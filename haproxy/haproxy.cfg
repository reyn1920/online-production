# HAProxy Configuration for TRAE AI Load Balancing
global
    daemon
    log stdout local0 info
    chroot/var/lib/haproxy
    stats socket/run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL/TLS Configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Performance tuning
    maxconn 4096
    nbthread 4

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Error handling
    errorfile 400/etc/haproxy/errors/400.http
    errorfile 403/etc/haproxy/errors/403.http
    errorfile 408/etc/haproxy/errors/408.http
    errorfile 500/etc/haproxy/errors/500.http
    errorfile 502/etc/haproxy/errors/502.http
    errorfile 503/etc/haproxy/errors/503.http
    errorfile 504/etc/haproxy/errors/504.http

# Statistics Interface
frontend stats
    bind *:8080
    stats enable
    stats uri/stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:admin123
    stats show-legends
    stats show-node

# Main Frontend - HTTP
frontend main_frontend
    bind *:80
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Health check endpoint
    acl is_health_check path_beg/health
    use_backend health_check if is_health_check
    
    # API routing
    acl is_api path_beg/api
    acl is_v1_api path_beg/v1
    acl is_docs path_beg/docs
    acl is_openapi path_beg/openapi.json
    use_backend api_backend if is_api or is_v1_api or is_docs or is_openapi
    
    # Content Agent routing
    acl is_content path_beg/content
    acl is_generate path_beg/generate
    use_backend content_agent_backend if is_content or is_generate
    
    # Marketing Agent routing
    acl is_marketing path_beg/marketing
    acl is_social path_beg/social
    use_backend marketing_agent_backend if is_marketing or is_social
    
    # Monetization routing
    acl is_monetization path_beg/monetization
    acl is_payment path_beg/payment
    acl is_stripe path_beg/stripe
    use_backend monetization_backend if is_monetization or is_payment or is_stripe
    
    # Analytics routing
    acl is_analytics path_beg/analytics
    acl is_dashboard path_beg/dashboard
    use_backend analytics_backend if is_analytics or is_dashboard
    
    # Metrics routing
    acl is_metrics path_beg/metrics
    use_backend prometheus_backend if is_metrics
    
    # Default to backend service
    default_backend backend_servers

# HTTPS Frontend (if SSL certificates are available)
frontend https_frontend
    bind *:443 ssl crt/etc/ssl/certs/trae-ai.pem
    
    # Redirect HTTP to HTTPS
    redirect scheme https if !{ ssl_fc }
    
    # Same routing as HTTP frontend
    acl is_health_check path_beg/health
    use_backend health_check if is_health_check
    
    acl is_api path_beg/api
    acl is_v1_api path_beg/v1
    use_backend api_backend if is_api or is_v1_api
    
    acl is_content path_beg/content
    use_backend content_agent_backend if is_content
    
    acl is_marketing path_beg/marketing
    use_backend marketing_agent_backend if is_marketing
    
    default_backend backend_servers

# Backend Definitions

# Health Check Backend
backend health_check
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    server health1 api:8000 check inter 10s fall 3 rise 2
    server health2 backend:8080 check inter 10s fall 3 rise 2

# API Backend (FastAPI)
backend api_backend
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    
    # Connection pooling
    option http-server-close
    option prefer-last-server
    
    # Sticky sessions for WebSocket connections
    cookie SERVERID insert indirect nocache
    
    # Auto-discovery of API instances
    server-template api 10 api:8000 check inter 30s fall 3 rise 2 cookie api resolvers docker init-addr none
    
    # Manual server definitions (fallback)
    server api1 api:8000 check inter 30s fall 3 rise 2 cookie api1
    server api2 api:8000 check inter 30s fall 3 rise 2 cookie api2 backup
    server api3 api:8000 check inter 30s fall 3 rise 2 cookie api3 backup

# Backend Service
backend backend_servers
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    
    # Server definitions with health checks
    server-template backend 5 backend:8080 check inter 30s fall 3 rise 2 resolvers docker init-addr none
    
    # Manual fallback servers
    server backend1 backend:8080 check inter 30s fall 3 rise 2
    server backend2 backend:8080 check inter 30s fall 3 rise 2 backup

# Content Agent Backend
backend content_agent_backend
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    
    # Longer timeouts for AI model processing
    timeout server 120s
    timeout connect 10s
    
    server-template content 5 content-agent:8001 check inter 30s fall 3 rise 2 resolvers docker init-addr none
    server content1 content-agent:8001 check inter 30s fall 3 rise 2
    server content2 content-agent:8001 check inter 30s fall 3 rise 2 backup

# Marketing Agent Backend
backend marketing_agent_backend
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    
    server-template marketing 5 marketing-agent:8002 check inter 30s fall 3 rise 2 resolvers docker init-addr none
    server marketing1 marketing-agent:8002 check inter 30s fall 3 rise 2
    server marketing2 marketing-agent:8002 check inter 30s fall 3 rise 2 backup

# Monetization Backend
backend monetization_backend
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    
    # Sticky sessions for payment processing
    cookie PAYMENTID insert indirect nocache
    
    server-template monetization 3 monetization-bundle:8003 check inter 30s fall 3 rise 2 cookie monetization resolvers docker init-addr none
    server monetization1 monetization-bundle:8003 check inter 30s fall 3 rise 2 cookie monetization1

# Analytics Backend
backend analytics_backend
    balance roundrobin
    option httpchk GET/health
    http-check expect status 200
    
    server-template analytics 3 analytics-dashboard:8004 check inter 30s fall 3 rise 2 resolvers docker init-addr none
    server analytics1 analytics-dashboard:8004 check inter 30s fall 3 rise 2

# Prometheus Backend (for metrics)
backend prometheus_backend
    balance roundrobin
    option httpchk GET/-/healthy
    http-check expect status 200
    
    server prometheus1 prometheus:9090 check inter 30s fall 3 rise 2

# Docker resolver for service discovery
resolvers docker
    nameserver dns1 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry 1s
    hold other 10s
    hold refused 10s
    hold nx 10s
    hold timeout 10s
    hold valid 10s
    hold obsolete 10s

# Global error pages
errorfile 503/etc/haproxy/errors/503-custom.http