--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/.venv311/lib/python3.11/site-packages/cython.py	2025-09-16 06:33:41+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/.venv311/lib/python3.11/site-packages/cython.py	2025-09-21 05:46:33.113668+00:00
@@ -7,23 +7,25 @@
 try:
     from typing import TYPE_CHECKING
 except ImportError:
     TYPE_CHECKING = False
 
-if not TYPE_CHECKING and __name__ == '__main__':
+if not TYPE_CHECKING and __name__ == "__main__":
 
     import os
     import sys
 
     # Make sure we import the right Cython
     cythonpath, _ = os.path.split(os.path.realpath(__file__))
     sys.path.insert(0, cythonpath)
 
     from Cython.Compiler.Main import main
-    main(command_line = 1)
+
+    main(command_line=1)
 
 else:
     # Void cython.* directives.
     from Cython.Shadow import *
+
     ## and bring in the __version__
     from Cython import __version__
-    from Cython import load_ipython_extension
\ No newline at end of file
+    from Cython import load_ipython_extension
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/.venv311/lib/python3.11/site-packages/cython.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/.venv311/lib/python3.11/site-packages/_black_version.py	2025-09-16 06:33:41+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/.venv311/lib/python3.11/site-packages/_black_version.py	2025-09-21 05:46:33.140986+00:00
@@ -1 +1 @@
-version = "23121"
\ No newline at end of file
+version = "23121"
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/.venv311/lib/python3.11/site-packages/_black_version.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/ai_ceo_master_controller.py	2025-09-19 08:31:59+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/ai_ceo_master_controller.py	2025-09-21 05:46:59.936954+00:00
@@ -259,19 +259,15 @@
         """Analyze current business state"""
         self.last_analysis_time = datetime.now()
 
         # Analyze task completion rates
         total_tasks = len(self.tasks)
-        completed_tasks = len(
-            [t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED]
-        )
+        completed_tasks = len([t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED])
         completion_rate = completed_tasks / total_tasks if total_tasks > 0 else 0
 
         # Analyze priority distribution
-        high_priority_tasks = len(
-            [t for t in self.tasks.values() if t.priority == Priority.HIGH]
-        )
+        high_priority_tasks = len([t for t in self.tasks.values() if t.priority == Priority.HIGH])
 
         logger.info(
             f"Business Analysis - Tasks: {total_tasks}, Completion Rate: {completion_rate:.2%}, High Priority: {high_priority_tasks}"
         )
 
@@ -282,17 +278,11 @@
             "timestamp": datetime.now(),
             "type": "strategic_decision",
             "description": "Automated strategic decision based on business analysis",
             "factors": {
                 "task_completion_rate": (
-                    len(
-                        [
-                            t
-                            for t in self.tasks.values()
-                            if t.status == TaskStatus.COMPLETED
-                        ]
-                    )
+                    len([t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED])
                     / len(self.tasks)
                     if self.tasks
                     else 0
                 ),
                 "high_priority_tasks": len(
@@ -308,13 +298,11 @@
         if len(self.decision_history) > 100:
             self.decision_history = self.decision_history[-100:]
 
     async def _execute_pending_tasks(self):
         """Execute pending business tasks"""
-        pending_tasks = [
-            t for t in self.tasks.values() if t.status == TaskStatus.PENDING
-        ]
+        pending_tasks = [t for t in self.tasks.values() if t.status == TaskStatus.PENDING]
 
         for task in pending_tasks[:5]:  # Execute up to 5 tasks per cycle
             try:
                 await self._execute_task(task)
             except Exception as e:
@@ -337,13 +325,11 @@
         logger.info(f"Task completed: {task.title}")
 
     async def _update_business_metrics(self):
         """Update business performance metrics"""
         # Simulate metric updates based on task completion and business state
-        completed_tasks = len(
-            [t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED]
-        )
+        completed_tasks = len([t for t in self.tasks.values() if t.status == TaskStatus.COMPLETED])
         total_tasks = len(self.tasks)
 
         if total_tasks > 0:
             productivity = completed_tasks / total_tasks
             self.metrics.employee_productivity = min(productivity * 100, 100)
@@ -445,13 +431,11 @@
     priority: str = "medium",
     assigned_to: Optional[str] = None,
 ) -> str:
     """Create a business task"""
     priority_enum = Priority(priority.lower())
-    return ai_ceo_controller.create_task(
-        title, description, priority_enum, assigned_to=assigned_to
-    )
+    return ai_ceo_controller.create_task(title, description, priority_enum, assigned_to=assigned_to)
 
 
 def get_system_status() -> dict[str, Any]:
     """Get system status"""
     return ai_ceo_controller.get_system_status()
@@ -461,19 +445,15 @@
     # Example usage
     async def main():
         await start_ai_ceo()
 
         # Create some example tasks
-        task1 = create_business_task(
-            "Market Analysis", "Analyze current market trends", "high"
-        )
+        task1 = create_business_task("Market Analysis", "Analyze current market trends", "high")
         task2 = create_business_task(
             "Product Development", "Develop new product features", "medium"
         )
-        task3 = create_business_task(
-            "Customer Outreach", "Reach out to potential customers", "low"
-        )
+        task3 = create_business_task("Customer Outreach", "Reach out to potential customers", "low")
 
         # Let it run for a bit
         await asyncio.sleep(5)
 
         # Check status
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/ai_ceo_master_controller.py
error: cannot format /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/agents/loop_prevention.py: Cannot parse: 3:4: 2.5 Pro
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/analytics.py	2025-09-21 01:31:30.186952+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/analytics.py	2025-09-21 05:47:24.213340+00:00
@@ -93,13 +93,11 @@
 
 class MetricStore:
     """In-memory metric storage with time-based retention"""
 
     def __init__(self, retention_hours: int = 24):
-        self.data: dict[str, deque[DataPoint]] = defaultdict(
-            lambda: deque(maxlen=10000)
-        )
+        self.data: dict[str, deque[DataPoint]] = defaultdict(lambda: deque(maxlen=10000))
         self.retention_hours = retention_hours
         self.last_cleanup = datetime.now()
 
     def add_point(
         self,
@@ -113,15 +111,11 @@
             timestamp = datetime.now()
 
         if tags is None:
             tags = {}
 
-        point = DataPoint(
-            timestamp=timestamp,
-            value=value,
-            tags=tags,
-            metric_name=metric_name)
+        point = DataPoint(timestamp=timestamp, value=value, tags=tags, metric_name=metric_name)
 
         self.data[metric_name].append(point)
 
         # Periodic cleanup
         if (datetime.now() - self.last_cleanup).total_seconds() > 3600:  # Every hour
@@ -146,14 +140,11 @@
         if end_time:
             points = [p for p in points if p.timestamp <= end_time]
 
         # Tag filtering
         if tags:
-            points = [
-                p for p in points if all(
-                    p.tags.get(k) == v for k,
-                    v in tags.items())]
+            points = [p for p in points if all(p.tags.get(k) == v for k, v in tags.items())]
 
         return points
 
     def get_metric_names(self) -> list[str]:
         """Get all metric names"""
@@ -163,14 +154,11 @@
         """Remove old data points beyond retention period"""
         cutoff_time = datetime.now() - timedelta(hours=self.retention_hours)
 
         for metric_name in self.data:
             # Remove old points
-            while (
-                self.data[metric_name]
-                and self.data[metric_name][0].timestamp < cutoff_time
-            ):
+            while self.data[metric_name] and self.data[metric_name][0].timestamp < cutoff_time:
                 self.data[metric_name].popleft()
 
         self.last_cleanup = datetime.now()
         logger.info("Completed data cleanup")
 
@@ -187,12 +175,11 @@
         start_time: Optional[datetime] = None,
         end_time: Optional[datetime] = None,
         tags: Optional[dict[str, str]] = None,
     ) -> Optional[MetricSummary]:
         """Calculate summary statistics for a metric"""
-        points = self.metric_store.get_points(
-            metric_name, start_time, end_time, tags)
+        points = self.metric_store.get_points(metric_name, start_time, end_time, tags)
 
         if not points:
             return None
 
         values = [p.value for p in points]
@@ -234,20 +221,17 @@
         sorted_values = sorted(values)
         index = int(percentile * (len(sorted_values) - 1))
         return sorted_values[index]
 
     def detect_anomalies(
-            self,
-            metric_name: str,
-            window_minutes: int = 60,
-            threshold_std: float = 2.0) -> list[DataPoint]:
+        self, metric_name: str, window_minutes: int = 60, threshold_std: float = 2.0
+    ) -> list[DataPoint]:
         """Detect anomalies in metric data"""
         end_time = datetime.now()
         start_time = end_time - timedelta(minutes=window_minutes)
 
-        points = self.metric_store.get_points(
-            metric_name, start_time, end_time)
+        points = self.metric_store.get_points(metric_name, start_time, end_time)
 
         if len(points) < 10:  # Need minimum data points
             return []
 
         values = [p.value for p in points]
@@ -266,12 +250,11 @@
     ) -> Optional[dict[str, Any]]:
         """Calculate trend information for a metric"""
         end_time = datetime.now()
         start_time = end_time - timedelta(minutes=window_minutes)
 
-        points = self.metric_store.get_points(
-            metric_name, start_time, end_time)
+        points = self.metric_store.get_points(metric_name, start_time, end_time)
 
         if len(points) < 2:
             return None
 
         # Simple linear trend calculation
@@ -281,12 +264,11 @@
         # Calculate slope using least squares
         x_values = list(range(n))
         x_mean = sum(x_values) / n
         y_mean = sum(values) / n
 
-        numerator = sum((x - x_mean) * (y - y_mean)
-                        for x, y in zip(x_values, values))
+        numerator = sum((x - x_mean) * (y - y_mean) for x, y in zip(x_values, values))
         denominator = sum((x - x_mean) ** 2 for x in x_values)
 
         if denominator == 0:
             slope = 0
         else:
@@ -327,23 +309,19 @@
         if end_time is None:
             end_time = datetime.now()
         if start_time is None:
             start_time = end_time - timedelta(hours=1)
 
-        report_id = hashlib.md5(
-            f"{title}_{start_time}_{end_time}".encode()
-        ).hexdigest()[:8]
+        report_id = hashlib.md5(f"{title}_{start_time}_{end_time}".encode()).hexdigest()[:8]
 
         # Calculate summaries for all metrics
         summaries = []
         insights = []
         recommendations = []
 
         for metric_name in metric_names:
-            summary = self.processor.calculate_summary(
-                metric_name, start_time, end_time
-            )
+            summary = self.processor.calculate_summary(metric_name, start_time, end_time)
             if summary:
                 summaries.append(summary)
 
                 # Generate insights
                 metric_insights = await self._generate_metric_insights(summary)
@@ -361,28 +339,24 @@
             id=report_id,
             title=title,
             description=f"Analytics report for {
                 len(metric_names)} metrics from {start_time} to {end_time}",
             generated_at=datetime.now(),
-            time_range=(
-                start_time,
-                end_time),
+            time_range=(start_time, end_time),
             metrics=summaries,
             insights=insights,
             recommendations=recommendations,
             data={
                 "total_metrics": len(summaries),
-                "total_data_points": sum(
-                    s.count for s in summaries),
+                "total_data_points": sum(s.count for s in summaries),
                 "report_generation_time": datetime.now(),
             },
         )
 
         return report
 
-    async def _generate_metric_insights(
-            self, summary: MetricSummary) -> list[str]:
+    async def _generate_metric_insights(self, summary: MetricSummary) -> list[str]:
         """Generate insights for a specific metric"""
         insights = []
 
         # High variability insight
         if summary.std_dev > summary.average * 0.5:
@@ -390,43 +364,33 @@
                 f"{summary.name} shows high variability (std dev: {summary.std_dev:.2f})"
             )
 
         # Extreme values insight
         if summary.max > summary.average * 3:
-            insights.append(
-                f"{summary.name} has extreme high values (max: {summary.max:.2f})"
-            )
+            insights.append(f"{summary.name} has extreme high values (max: {summary.max:.2f})")
 
         # Data volume insight
         if summary.count < 10:
-            insights.append(
-                f"{summary.name} has limited data points ({summary.count})")
+            insights.append(f"{summary.name} has limited data points ({summary.count})")
 
         return insights
 
-    async def _generate_recommendations(
-            self, summary: MetricSummary) -> list[str]:
+    async def _generate_recommendations(self, summary: MetricSummary) -> list[str]:
         """Generate recommendations for a specific metric"""
         recommendations = []
 
         # High variability recommendation
         if summary.std_dev > summary.average * 0.5:
-            recommendations.append(
-                f"Investigate causes of high variability in {summary.name}"
-            )
+            recommendations.append(f"Investigate causes of high variability in {summary.name}")
 
         # Data collection recommendation
         if summary.count < 50:
-            recommendations.append(
-                f"Increase data collection frequency for {summary.name}"
-            )
+            recommendations.append(f"Increase data collection frequency for {summary.name}")
 
         return recommendations
 
-    async def _generate_overall_insights(
-        self, summaries: list[MetricSummary]
-    ) -> list[str]:
+    async def _generate_overall_insights(self, summaries: list[MetricSummary]) -> list[str]:
         """Generate overall insights across all metrics"""
         insights = []
 
         if not summaries:
             return ["No metric data available for analysis"]
@@ -439,16 +403,13 @@
             insights.append(
                 "Overall data collection appears sparse - consider increasing frequency"
             )
 
         # Metric correlation (simplified)
-        high_var_metrics = [
-            s.name for s in summaries if s.std_dev > s.average * 0.3]
+        high_var_metrics = [s.name for s in summaries if s.std_dev > s.average * 0.3]
         if len(high_var_metrics) > len(summaries) * 0.5:
-            insights.append(
-                "Multiple metrics show high variability - system may be unstable"
-            )
+            insights.append("Multiple metrics show high variability - system may be unstable")
 
         return insights
 
 
 class AnalyticsEngine:
@@ -477,31 +438,25 @@
         self, name: str, value: Union[int, float], tags: Optional[dict[str, str]] = None
     ):
         """Record a metric value"""
         self.metric_store.add_point(name, value, tags)
 
-    def increment_counter(
-            self, name: str, tags: Optional[dict[str, str]] = None):
+    def increment_counter(self, name: str, tags: Optional[dict[str, str]] = None):
         """Increment a counter metric"""
         self.record_metric(f"{name}_count", 1, tags)
 
-    def record_timer(self, name: str, duration_ms: float,
-                     tags: Optional[dict[str, str]] = None):
+    def record_timer(self, name: str, duration_ms: float, tags: Optional[dict[str, str]] = None):
         """Record a timer metric"""
         self.record_metric(f"{name}_duration", duration_ms, tags)
 
-    async def get_metric_summary(
-        self, name: str, hours_back: int = 1
-    ) -> Optional[MetricSummary]:
+    async def get_metric_summary(self, name: str, hours_back: int = 1) -> Optional[MetricSummary]:
         """Get summary for a specific metric"""
         end_time = datetime.now()
         start_time = end_time - timedelta(hours=hours_back)
         return self.processor.calculate_summary(name, start_time, end_time)
 
-    async def detect_anomalies(
-        self, name: str, window_minutes: int = 60
-    ) -> list[DataPoint]:
+    async def detect_anomalies(self, name: str, window_minutes: int = 60) -> list[DataPoint]:
         """Detect anomalies in a metric"""
         return self.processor.detect_anomalies(name, window_minutes)
 
     async def generate_report(
         self, metric_names: Optional[list[str]] = None, hours_back: int = 1
@@ -511,13 +466,11 @@
             metric_names = self.metric_store.get_metric_names()
 
         end_time = datetime.now()
         start_time = end_time - timedelta(hours=hours_back)
 
-        return await self.report_generator.generate_report(
-            metric_names, start_time, end_time
-        )
+        return await self.report_generator.generate_report(metric_names, start_time, end_time)
 
     async def _periodic_cleanup(self):
         """Periodic cleanup task"""
         while self.is_running:
             try:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/analytics.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/actions_maxout.py	2025-09-21 01:31:30.364866+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/actions_maxout.py	2025-09-21 05:47:24.256839+00:00
@@ -159,22 +159,24 @@
                     if attempt < self.retry_count:
                         logger.warning(
                             f"Action {
                                 self.action_id} failed (attempt {
                                 attempt +
-                                1}), retrying: {e}")
+                                1}), retrying: {e}"
+                        )
                         await asyncio.sleep(self.retry_delay)
                     else:
                         raise
 
             return result
 
         except Exception as e:
             self.last_error = str(e)
             logger.error(
                 f"Action {
-                    self.action_id} failed after all retries: {e}")
+                    self.action_id} failed after all retries: {e}"
+            )
             raise
 
         finally:
             execution_time = time.time() - start_time
             self.metrics.update(execution_time, success)
@@ -186,13 +188,11 @@
             return await self.handler(*args, **kwargs)
         else:
             # Run sync functions in thread pool to avoid blocking
             loop = asyncio.get_event_loop()
             with ThreadPoolExecutor() as executor:
-                return await loop.run_in_executor(
-                    executor, lambda: self.handler(*args, **kwargs)
-                )
+                return await loop.run_in_executor(executor, lambda: self.handler(*args, **kwargs))
 
     def add_dependency(self, action_id: str):
         """Add a dependency to this action"""
         self.dependencies.add(action_id)
 
@@ -232,13 +232,11 @@
                 "execution_count": self.metrics.execution_count,
                 "average_execution_time": self.metrics.average_execution_time,
                 "success_count": self.metrics.success_count,
                 "failure_count": self.metrics.failure_count,
                 "last_execution": (
-                    self.metrics.last_execution.isoformat()
-                    if self.metrics.last_execution
-                    else None
+                    self.metrics.last_execution.isoformat() if self.metrics.last_execution else None
                 ),
             },
             "dependencies": list(self.dependencies),
             "dependents": list(self.dependents),
             "metadata": self.metadata,
@@ -298,12 +296,11 @@
         **kwargs,
     ) -> bool:
         """Register a new advanced action"""
         try:
             if action_id in self.actions:
-                logger.warning(
-                    f"Action {action_id} already exists, overwriting")
+                logger.warning(f"Action {action_id} already exists, overwriting")
 
             action = AdvancedAction(
                 action_id=action_id,
                 handler=handler,
                 category=category,
@@ -332,24 +329,21 @@
 
         action = self.actions[action_id]
 
         # Check dependencies
         if not await self._check_dependencies(action_id):
-            raise RuntimeError(
-                f"Dependencies not satisfied for action {action_id}")
+            raise RuntimeError(f"Dependencies not satisfied for action {action_id}")
 
         # Handle different execution modes
         if action.execution_mode == ExecutionMode.BATCH:
             return await self._queue_for_batch(action_id, args, kwargs)
         elif action.execution_mode == ExecutionMode.SCHEDULED:
             return await self._schedule_action(action_id, args, kwargs)
         else:
             return await self._execute_immediate(action_id, args, kwargs)
 
-    async def _execute_immediate(
-        self, action_id: str, args: tuple, kwargs: dict
-    ) -> Any:
+    async def _execute_immediate(self, action_id: str, args: tuple, kwargs: dict) -> Any:
         """Execute action immediately"""
         # Wait for available slot if at capacity
         while len(self.running_actions) >= self.max_concurrent_actions:
             await asyncio.sleep(0.1)
 
@@ -391,22 +385,14 @@
     async def _execute_dependents(self, action_id: str):
         """Execute dependent actions"""
         action = self.actions[action_id]
 
         for dependent_id in action.dependents:
-            if dependent_id in self.actions and await self._check_dependencies(
-                dependent_id
-            ):
-                asyncio.create_task(
-                    self._execute_immediate(
-                        dependent_id, (), {}))
-
-    async def _queue_for_batch(
-            self,
-            action_id: str,
-            args: tuple,
-            kwargs: dict) -> str:
+            if dependent_id in self.actions and await self._check_dependencies(dependent_id):
+                asyncio.create_task(self._execute_immediate(dependent_id, (), {}))
+
+    async def _queue_for_batch(self, action_id: str, args: tuple, kwargs: dict) -> str:
         """Queue action for batch processing"""
         batch_id = str(uuid.uuid4())
         self.action_queue.append(
             {
                 "batch_id": batch_id,
@@ -416,20 +402,15 @@
                 "queued_at": datetime.now(),
             }
         )
         return batch_id
 
-    async def _schedule_action(
-            self,
-            action_id: str,
-            args: tuple,
-            kwargs: dict) -> bool:
+    async def _schedule_action(self, action_id: str, args: tuple, kwargs: dict) -> bool:
         """Schedule action for later execution"""
         action = self.actions[action_id]
         if not action.schedule.enabled:
-            raise ValueError(
-                f"Action {action_id} is not configured for scheduling")
+            raise ValueError(f"Action {action_id} is not configured for scheduling")
 
         # Scheduling logic would be handled by the scheduler loop
         return True
 
     async def _scheduler_loop(self):
@@ -446,19 +427,15 @@
                         and action.schedule.next_run
                         and current_time >= action.schedule.next_run
                         and not action.is_running
                     ):
                         # Execute scheduled action
-                        asyncio.create_task(
-                            self._execute_immediate(action.action_id, (), {})
-                        )
+                        asyncio.create_task(self._execute_immediate(action.action_id, (), {}))
 
                         # Update next run time
                         if action.schedule.interval:
-                            action.schedule.next_run = (
-                                current_time + action.schedule.interval
-                            )
+                            action.schedule.next_run = current_time + action.schedule.interval
 
                         action.schedule.current_runs += 1
 
                         # Check max runs
                         if (
@@ -487,13 +464,11 @@
 
                     # Execute batch in parallel
                     tasks = []
                     for item in batch:
                         task = asyncio.create_task(
-                            self._execute_immediate(
-                                item["action_id"], item["args"], item["kwargs"]
-                            )
+                            self._execute_immediate(item["action_id"], item["args"], item["kwargs"])
                         )
                         tasks.append(task)
 
                     await asyncio.gather(*tasks, return_exceptions=True)
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/actions_maxout.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/dashboard_integration.py	2025-09-21 01:31:29.245906+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/dashboard_integration.py	2025-09-21 05:48:19.664432+00:00
@@ -119,26 +119,22 @@
         self.config = config
         self.last_update = datetime.now()
         self.cache: dict[str, Any] = {}
 
     @abstractmethod
-    async def fetch_data(
-        self, query: str, params: dict[str, Any] = None
-    ) -> list[DataPoint]:
+    async def fetch_data(self, query: str, params: dict[str, Any] = None) -> list[DataPoint]:
         """Fetch data from the source."""
 
     @abstractmethod
     async def test_connection(self) -> bool:
         """Test if the data source is accessible."""
 
 
 class APIDataSource(DataSource):
     """Data source for REST APIs."""
 
-    async def fetch_data(
-        self, query: str, params: dict[str, Any] = None
-    ) -> list[DataPoint]:
+    async def fetch_data(self, query: str, params: dict[str, Any] = None) -> list[DataPoint]:
         """Fetch data from API endpoint."""
         try:
             # Simulate API call
             data_points = []
             for i in range(10):
@@ -165,13 +161,11 @@
 
 
 class DatabaseDataSource(DataSource):
     """Data source for databases."""
 
-    async def fetch_data(
-        self, query: str, params: dict[str, Any] = None
-    ) -> list[DataPoint]:
+    async def fetch_data(self, query: str, params: dict[str, Any] = None) -> list[DataPoint]:
         """Fetch data from database."""
         try:
             # Simulate database query
             data_points = []
             for i in range(20):
@@ -208,25 +202,24 @@
         self.refresh_task: Optional[asyncio.Task[None]] = None
 
     async def refresh_data(self):
         """Refresh widget data from data source."""
         try:
-            query = self.config.config.get(
-                "query", "") if self.config.config else ""
-            params = self.config.config.get(
-                "params", {}) if self.config.config else {}
+            query = self.config.config.get("query", "") if self.config.config else ""
+            params = self.config.config.get("params", {}) if self.config.config else {}
 
             self.data = await self.data_source.fetch_data(query, params)
             self.last_refresh = datetime.now()
 
             logger.info(
                 f"Widget {self.config.widget_id} refreshed with {len(self.data)} data points"
             )
         except Exception as e:
             logger.error(
                 f"Widget refresh failed for {
-                    self.config.widget_id}: {e}")
+                    self.config.widget_id}: {e}"
+            )
 
     async def start_auto_refresh(self):
         """Start automatic data refresh."""
         if self.config.refresh_mode == RefreshMode.SCHEDULED:
 
@@ -253,21 +246,16 @@
     def get_summary(self) -> dict[str, Any]:
         """Get widget data summary."""
         if not self.data:
             return {"count": 0, "latest": None, "average": 0}
 
-        numeric_values = [
-            dp.value for dp in self.data if isinstance(dp.value, (int, float))
-        ]
+        numeric_values = [dp.value for dp in self.data if isinstance(dp.value, (int, float))]
 
         return {
-            "count": len(
-                self.data),
+            "count": len(self.data),
             "latest": self.data[0].value if self.data else None,
-            "average": (
-                sum(numeric_values) /
-                len(numeric_values) if numeric_values else 0),
+            "average": (sum(numeric_values) / len(numeric_values) if numeric_values else 0),
             "last_refresh": self.last_refresh.isoformat(),
         }
 
 
 class Dashboard:
@@ -283,19 +271,21 @@
         """Add a widget to the dashboard."""
         self.widgets[widget.config.widget_id] = widget
         logger.info(
             f"Added widget {
                 widget.config.widget_id} to dashboard {
-                self.config.dashboard_id}")
+                self.config.dashboard_id}"
+        )
 
     def remove_widget(self, widget_id: str) -> bool:
         """Remove a widget from the dashboard."""
         if widget_id in self.widgets:
             del self.widgets[widget_id]
             logger.info(
                 f"Removed widget {widget_id} from dashboard {
-                    self.config.dashboard_id}")
+                    self.config.dashboard_id}"
+            )
             return True
         return False
 
     async def refresh_all_widgets(self):
         """Refresh all widgets in the dashboard."""
@@ -304,11 +294,12 @@
             tasks.append(widget.refresh_data())
 
         await asyncio.gather(*tasks, return_exceptions=True)
         logger.info(
             f"Refreshed all widgets in dashboard {
-                self.config.dashboard_id}")
+                self.config.dashboard_id}"
+        )
 
     async def start_auto_refresh(self):
         """Start auto-refresh for all widgets."""
         for widget in self.widgets.values():
             await widget.start_auto_refresh()
@@ -365,16 +356,15 @@
             logger.info(f"Registered data source: {config.source_id}")
             return True
         except Exception as e:
             logger.error(
                 f"Failed to register data source {
-                    config.source_id}: {e}")
+                    config.source_id}: {e}"
+            )
             return False
 
-    async def create_dashboard(
-            self,
-            config: DashboardConfig) -> Optional[Dashboard]:
+    async def create_dashboard(self, config: DashboardConfig) -> Optional[Dashboard]:
         """Create a new dashboard."""
         try:
             dashboard = Dashboard(config)
 
             # Create widgets for the dashboard
@@ -384,19 +374,21 @@
                     widget = Widget(widget_config, data_source)
                     dashboard.add_widget(widget)
                 else:
                     logger.warning(
                         f"Data source not found for widget: {
-                            widget_config.widget_id}")
+                            widget_config.widget_id}"
+                    )
 
             self.dashboards[config.dashboard_id] = dashboard
             logger.info(f"Created dashboard: {config.dashboard_id}")
             return dashboard
         except Exception as e:
             logger.error(
                 f"Failed to create dashboard {
-                    config.dashboard_id}: {e}")
+                    config.dashboard_id}: {e}"
+            )
             return None
 
     def get_dashboard(self, dashboard_id: str) -> Optional[Dashboard]:
         """Get a dashboard by ID."""
         dashboard = self.dashboards.get(dashboard_id)
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/dashboard.py	2025-09-21 01:31:29.748738+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/dashboard.py	2025-09-21 05:48:19.704697+00:00
@@ -62,25 +62,17 @@
             self.db_path = self.config.get("db_path", "trae_ai.db")
 
     def get_queue_stats(self):
         return {"pending": 0, "in_progress": 0, "completed": 0, "failed": 0}
 
-    def add_task(
-            self,
-            task_type=None,
-            payload=None,
-            priority="medium",
-            agent_id=None,
-            **kwargs):
+    def add_task(self, task_type=None, payload=None, priority="medium", agent_id=None, **kwargs):
         return "mock-task-id"
 
     def get_recent_tasks(self, limit=10):
         return []
 
-    def get_tasks(
-        self, status=None, task_type=None, agent_id=None, limit=100, offset=0
-    ):
+    def get_tasks(self, status=None, task_type=None, agent_id=None, limit=100, offset=0):
         return []
 
 
 class TaskStatus:
     PENDING = "pending"
@@ -114,48 +106,37 @@
     AUDITING = "auditing"
 
 
 # Try to import TRAE.AI components, but use fallbacks if not available
 try:
-    sys.path.append(
-        os.path.dirname(
-            os.path.dirname(
-                os.path.abspath(__file__))))
+    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
 
     # Import TRAE.AI task manager but keep using our fallback interface
     from backend.task_queue_manager import TaskQueueManager as TraeTaskQueueManager
 
     # Create a wrapper that maintains our interface
     class TaskQueueManagerWrapper:
         def __init__(self, db_path_or_config):
             try:
                 if isinstance(db_path_or_config, str):
-                    self._manager = TraeTaskQueueManager(
-                        {"db_path": db_path_or_config})
+                    self._manager = TraeTaskQueueManager({"db_path": db_path_or_config})
                 else:
-                    self._manager = TraeTaskQueueManager(
-                        db_path_or_config or {})
+                    self._manager = TraeTaskQueueManager(db_path_or_config or {})
             except Exception:
                 # Fallback to mock if TRAE manager fails
                 self._manager = None
                 self.db_path = (
-                    db_path_or_config
-                    if isinstance(db_path_or_config, str)
-                    else "trae_ai.db"
+                    db_path_or_config if isinstance(db_path_or_config, str) else "trae_ai.db"
                 )
 
         def get_queue_stats(self):
             if self._manager and hasattr(self._manager, "get_queue_stats"):
                 try:
                     return self._manager.get_queue_stats()
                 except Exception:
                     pass
-            return {
-                "pending": 0,
-                "in_progress": 0,
-                "completed": 0,
-                "failed": 0}
+            return {"pending": 0, "in_progress": 0, "completed": 0, "failed": 0}
 
         def add_task(
             self,
             task_type=None,
             payload=None,
@@ -187,17 +168,11 @@
                     return self._manager.get_recent_tasks(limit=limit)
                 except Exception:
                     pass
             return []
 
-        def get_tasks(
-                self,
-                status=None,
-                task_type=None,
-                agent_id=None,
-                limit=100,
-                offset=0):
+        def get_tasks(self, status=None, task_type=None, agent_id=None, limit=100, offset=0):
             if self._manager and hasattr(self._manager, "get_tasks"):
                 try:
                     return self._manager.get_tasks(
                         status=status,
                         task_type=task_type,
@@ -271,14 +246,11 @@
 class DashboardApp:
     """Main dashboard application class with Total Access modules."""
 
     def __init__(self, config: Optional[DashboardConfig] = None):
         self.config = config or DashboardConfig()
-        self.app = Flask(
-            __name__,
-            static_folder="static",
-            template_folder="templates")
+        self.app = Flask(__name__, static_folder="static", template_folder="templates")
         self.app.secret_key = self.config.secret_key
 
         setup_logging(log_level=self.config.log_level)
         self.logger = get_logger(__name__)
 
@@ -302,19 +274,16 @@
     def _init_databases(self):
         """Initialize database connections."""
         try:
             intelligence_db_path = Path(self.config.intelligence_db_path)
             if not intelligence_db_path.exists():
-                self.logger.warning(
-                    f"Intelligence database not found at {intelligence_db_path}")
+                self.logger.warning(f"Intelligence database not found at {intelligence_db_path}")
             with sqlite3.connect(self.config.intelligence_db_path) as conn:
-                conn.execute(
-                    "SELECT name FROM sqlite_master WHERE type='table'")
+                conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
             self.logger.info("Intelligence database connection established")
         except Exception as e:
-            self.logger.error(
-                f"Failed to initialize intelligence database: {e}")
+            self.logger.error(f"Failed to initialize intelligence database: {e}")
 
     def _start_monitoring_thread(self):
         """Start background thread for monitoring agents and projects."""
 
         def monitor():
@@ -361,15 +330,13 @@
 
         @self.app.route("/api/tasks", methods=["GET"])
         def get_tasks():
             try:
                 if not self.task_manager:
-                    return jsonify(
-                        {"error": "Task manager not available"}), 503
+                    return jsonify({"error": "Task manager not available"}), 503
                 status = request.args.get("status")
-                limit = min(int(request.args.get("limit", 50)),
-                            self.config.max_tasks_display)
+                limit = min(int(request.args.get("limit", 50)), self.config.max_tasks_display)
                 tasks = self.task_manager.get_tasks(status=status, limit=limit)
                 task_list = [
                     {
                         "id": task.get("id"),
                         "type": task.get("task_type"),
@@ -397,12 +364,11 @@
 
         @self.app.route("/api/tasks", methods=["POST"])
         def create_task():
             try:
                 if not self.task_manager:
-                    return jsonify(
-                        {"error": "Task manager not available"}), 503
+                    return jsonify({"error": "Task manager not available"}), 503
                 data = request.get_json()
                 if not data:
                     raise BadRequest("No JSON data provided")
                 required_fields = ["type", "payload"]
                 for field in required_fields:
@@ -414,40 +380,39 @@
                     priority=data.get("priority", "medium"),
                     agent_id=data.get("agent_id"),
                 )
                 self.logger.info(
                     f"Created task {task_id} of type {
-                        data['type']}")
+                        data['type']}"
+                )
                 return (
                     jsonify(
                         {
                             "task_id": task_id,
                             "status": "created",
-                            "timestamp": datetime.now(
-                                timezone.utc).isoformat(),
-                        }),
+                            "timestamp": datetime.now(timezone.utc).isoformat(),
+                        }
+                    ),
                     201,
                 )
             except BadRequest as e:
                 return jsonify({"error": str(e)}), 400
             except Exception as e:
                 self.logger.error(f"Failed to create task: {e}")
                 return jsonify({"error": str(e)}), 500
 
-        @self.app.route("/api/database/tables/<table_name>/data",
-                        methods=["GET"])
+        @self.app.route("/api/database/tables/<table_name>/data", methods=["GET"])
         def get_table_data(table_name):
             try:
                 limit = min(int(request.args.get("limit", 100)), 1000)
                 offset = int(request.args.get("offset", 0))
                 with sqlite3.connect(self.config.intelligence_db_path) as conn:
                     conn.row_factory = sqlite3.Row
                     cursor = conn.cursor()
                     cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                     total_count = cursor.fetchone()[0]
-                    cursor.execute(
-                        f"SELECT * FROM {table_name} LIMIT ? OFFSET ?", (limit, offset))
+                    cursor.execute(f"SELECT * FROM {table_name} LIMIT ? OFFSET ?", (limit, offset))
                     rows = cursor.fetchall()
                     data = [dict(row) for row in rows]
                 return jsonify(
                     {
                         "table_name": table_name,
@@ -457,12 +422,11 @@
                         "offset": offset,
                         "timestamp": datetime.now(timezone.utc).isoformat(),
                     }
                 )
             except Exception as e:
-                self.logger.error(
-                    f"Failed to get table data for {table_name}: {e}")
+                self.logger.error(f"Failed to get table data for {table_name}: {e}")
                 return jsonify({"error": str(e)}), 500
 
         @self.app.route("/api/database/query", methods=["POST"])
         def execute_database_query():
             try:
@@ -518,15 +482,11 @@
 
     def _update_project_status(self):
         """Update project status information."""
         # Mock implementation - replace with actual project monitoring
 
-    def run(
-            self,
-            host: str = "0.0.0.0",
-            port: int = 8080,
-            debug: bool = False):
+    def run(self, host: str = "0.0.0.0", port: int = 8080, debug: bool = False):
         """Run the dashboard application."""
         try:
             self.logger.info(f"Starting TRAE.AI Dashboard on {host}:{port}")
             self._start_background_tasks()
             # Use Waitress for a production-ready server instead of Flask's dev
@@ -541,13 +501,12 @@
 
     def _start_background_tasks(self):
         """Start background monitoring tasks."""
         try:
             monitor_thread = threading.Thread(
-                target=self._background_monitor,
-                daemon=True,
-                name="SystemMonitor")
+                target=self._background_monitor, daemon=True, name="SystemMonitor"
+            )
             monitor_thread.start()
             self.logger.info("Background monitoring tasks started")
         except Exception as e:
             self.logger.error(f"Failed to start background tasks: {e}")
 
@@ -572,19 +531,12 @@
     """Main entry point for the dashboard application."""
     import argparse
 
     parser = argparse.ArgumentParser(description="TRAE.AI Dashboard")
     parser.add_argument("--host", default="0.0.0.0", help="Host to bind to")
-    parser.add_argument(
-        "--port",
-        type=int,
-        default=8080,
-        help="Port to bind to")
-    parser.add_argument(
-        "--debug",
-        action="store_true",
-        help="Enable debug mode")
+    parser.add_argument("--port", type=int, default=8080, help="Port to bind to")
+    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
     parser.add_argument("--config", help="Path to configuration file")
     args = parser.parse_args()
 
     def find_free_port(start_port, host):
         """Find an available port."""
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/dashboard_integration.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/dashboard.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/main.py	2025-09-21 01:31:30.745844+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/main.py	2025-09-21 05:48:40.635580+00:00
@@ -33,12 +33,9 @@
         }
     )
 
 
 if automation:
-    app.include_router(
-        automation.router,
-        prefix="/automation",
-        tags=["automation"])
+    app.include_router(automation.router, prefix="/automation", tags=["automation"])
 
 if webhuman:
     app.include_router(webhuman.router, prefix="/webhuman", tags=["webhuman"])
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/main.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/metrics.py	2025-09-21 01:31:29.080679+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/metrics.py	2025-09-21 05:48:40.839991+00:00
@@ -197,53 +197,39 @@
             else:
                 logger.error(f"Failed to store metric {self.config.name}")
         except Exception as e:
             logger.error(f"Error recording metric {self.config.name}: {e}")
 
-    async def increment(
-        self, amount: Union[int, float] = 1, tags: Optional[dict[str, str]] = None
-    ):
+    async def increment(self, amount: Union[int, float] = 1, tags: Optional[dict[str, str]] = None):
         """Increment a counter metric."""
         if self.config.metric_type != MetricType.COUNTER:
-            logger.warning(
-                f"Increment called on non-counter metric: {self.config.name}"
-            )
+            logger.warning(f"Increment called on non-counter metric: {self.config.name}")
             return
 
         current = self.current_value or 0
         await self.record(current + amount, tags)
 
-    async def set_gauge(
-        self, value: Union[int, float], tags: Optional[dict[str, str]] = None
-    ):
+    async def set_gauge(self, value: Union[int, float], tags: Optional[dict[str, str]] = None):
         """Set a gauge metric value."""
         if self.config.metric_type != MetricType.GAUGE:
-            logger.warning(
-                f"Set gauge called on non-gauge metric: {self.config.name}")
+            logger.warning(f"Set gauge called on non-gauge metric: {self.config.name}")
             return
 
         await self.record(value, tags)
 
     async def time_operation(
         self, operation: Callable[[], Any], tags: Optional[dict[str, str]] = None
     ) -> Any:
         """Time an operation and record the duration."""
         if self.config.metric_type != MetricType.TIMER:
-            logger.warning(
-                f"Time operation called on non-timer metric: {self.config.name}"
-            )
+            logger.warning(f"Time operation called on non-timer metric: {self.config.name}")
             return await operation()
 
         start_time = time.time()
         try:
-            result = (
-                await operation()
-                if asyncio.iscoroutinefunction(operation)
-                else operation()
-            )
-            duration = (time.time() - start_time) * \
-                1000  # Convert to milliseconds
+            result = await operation() if asyncio.iscoroutinefunction(operation) else operation()
+            duration = (time.time() - start_time) * 1000  # Convert to milliseconds
             await self.record(duration, tags)
             return result
         except Exception as e:
             duration = (time.time() - start_time) * 1000
             error_tags = tags.copy() if tags else {}
@@ -268,39 +254,34 @@
             elif threshold.condition == "gte" and value >= threshold.value:
                 condition_met = True
             elif threshold.condition == "lte" and value <= threshold.value:
                 condition_met = True
 
-            if condition_met and not self.alert_states.get(
-                    threshold.name, False):
+            if condition_met and not self.alert_states.get(threshold.name, False):
                 self.alert_states[threshold.name] = True
                 logger.warning(
                     f"Threshold alert: {
                         self.config.name} {
                         threshold.condition} {
-                        threshold.value} " f"(current: {value}, level: {
-                        threshold.alert_level.value})")
+                        threshold.value} "
+                    f"(current: {value}, level: {
+                        threshold.alert_level.value})"
+                )
             elif not condition_met and self.alert_states.get(threshold.name, False):
                 self.alert_states[threshold.name] = False
                 logger.info(
                     f"Threshold alert resolved: {
                         self.config.name} {
-                        threshold.name}")
-
-    async def get_statistics(
-        self, start_time: datetime, end_time: datetime
-    ) -> dict[str, Any]:
+                        threshold.name}"
+                )
+
+    async def get_statistics(self, start_time: datetime, end_time: datetime) -> dict[str, Any]:
         """Get statistical summary for the metric over a time range."""
         values = await self.storage.get_metrics(self.config.name, start_time, end_time)
 
         if not values:
-            return {
-                "count": 0,
-                "min": None,
-                "max": None,
-                "avg": None,
-                "sum": None}
+            return {"count": 0, "min": None, "max": None, "avg": None, "sum": None}
 
         numeric_values = [v.value for v in values]
 
         stats = {
             "count": len(numeric_values),
@@ -331,18 +312,20 @@
     def register_metric(self, config: MetricConfig) -> Metric:
         """Register a new metric."""
         if config.name in self.metrics:
             logger.warning(
                 f"Metric {
-                    config.name} already registered, replacing")
+                    config.name} already registered, replacing"
+            )
 
         metric = Metric(config, self.storage)
         self.metrics[config.name] = metric
         logger.info(
             f"Registered metric: {
                 config.name} ({
-                config.metric_type.value})")
+                config.metric_type.value})"
+        )
         return metric
 
     def get_metric(self, name: str) -> Optional[Metric]:
         """Get a registered metric by name."""
         return self.metrics.get(name)
@@ -390,18 +373,15 @@
         metric = self.get_metric(name)
         if metric:
             return await metric.time_operation(operation, tags)
         else:
             logger.warning(f"Timer metric not found: {name}")
-            return (
-                await operation()
-                if asyncio.iscoroutinefunction(operation)
-                else operation()
-            )
-
-    def create_counter(self, name: str, description: str,
-                       tags: Optional[dict[str, str]] = None) -> Metric:
+            return await operation() if asyncio.iscoroutinefunction(operation) else operation()
+
+    def create_counter(
+        self, name: str, description: str, tags: Optional[dict[str, str]] = None
+    ) -> Metric:
         """Create and register a counter metric."""
         config = MetricConfig(
             name=name,
             metric_type=MetricType.COUNTER,
             unit=MetricUnit.COUNT,
@@ -425,12 +405,13 @@
             description=description,
             tags=tags,
         )
         return self.register_metric(config)
 
-    def create_timer(self, name: str, description: str,
-                     tags: Optional[dict[str, str]] = None) -> Metric:
+    def create_timer(
+        self, name: str, description: str, tags: Optional[dict[str, str]] = None
+    ) -> Metric:
         """Create and register a timer metric."""
         config = MetricConfig(
             name=name,
             metric_type=MetricType.TIMER,
             unit=MetricUnit.MILLISECONDS,
@@ -451,12 +432,11 @@
             summary["metrics"][name] = {
                 "type": metric.config.metric_type.value,
                 "unit": metric.config.unit.value,
                 "description": metric.config.description,
                 "current_value": metric.current_value,
-                "last_updated": (
-                    metric.last_updated.isoformat() if metric.last_updated else None),
+                "last_updated": (metric.last_updated.isoformat() if metric.last_updated else None),
                 "stats_last_hour": stats,
             }
 
         return summary
 
@@ -475,19 +455,21 @@
                 lines.append(f"\n{name} ({data['type']})")
                 lines.append(f"  Description: {data['description']}")
                 lines.append(
                     f"  Current: {
                         data['current_value']} {
-                        data['unit']}")
+                        data['unit']}"
+                )
                 lines.append(f"  Last Updated: {data['last_updated']}")
 
                 stats = data["stats_last_hour"]
                 if stats["count"] > 0:
                     lines.append(
                         f"  Last Hour: {
                             stats['count']} values, avg={
-                            stats['avg']:.2f}")
+                            stats['avg']:.2f}"
+                    )
 
             return "\n".join(lines)
 
     async def start_background_tasks(self):
         """Start background tasks for metric aggregation."""
@@ -536,13 +518,11 @@
 ):
     """Increment a counter metric."""
     await metrics_collector.increment_counter(name, amount, tags)
 
 
-async def gauge(
-    name: str, value: Union[int, float], tags: Optional[dict[str, str]] = None
-):
+async def gauge(name: str, value: Union[int, float], tags: Optional[dict[str, str]] = None):
     """Set a gauge metric value."""
     await metrics_collector.set_gauge(name, value, tags)
 
 
 async def timer(
@@ -553,29 +533,22 @@
 
 
 def create_standard_metrics():
     """Create a set of standard application metrics."""
     # Request metrics
-    metrics_collector.create_counter(
-        "http_requests_total",
-        "Total HTTP requests")
+    metrics_collector.create_counter("http_requests_total", "Total HTTP requests")
     metrics_collector.create_counter("http_errors_total", "Total HTTP errors")
-    metrics_collector.create_timer(
-        "http_request_duration",
-        "HTTP request duration")
+    metrics_collector.create_timer("http_request_duration", "HTTP request duration")
 
     # System metrics
-    metrics_collector.create_gauge(
-        "memory_usage_bytes", "Memory usage in bytes", MetricUnit.BYTES
-    )
+    metrics_collector.create_gauge("memory_usage_bytes", "Memory usage in bytes", MetricUnit.BYTES)
     metrics_collector.create_gauge(
         "cpu_usage_percent", "CPU usage percentage", MetricUnit.PERCENTAGE
     )
 
     # Application metrics
-    metrics_collector.create_counter(
-        "user_registrations", "User registrations")
+    metrics_collector.create_counter("user_registrations", "User registrations")
     metrics_collector.create_counter("user_logins", "User logins")
     metrics_collector.create_gauge("active_users", "Currently active users")
 
     logger.info("Created standard metrics")
 
@@ -588,16 +561,12 @@
     # Start background tasks
     await metrics_collector.start_background_tasks()
 
     try:
         # Simulate some metric recording
-        await increment(
-            "http_requests_total", tags={"method": "GET", "endpoint": "/api/users"}
-        )
-        await increment(
-            "http_requests_total", tags={"method": "POST", "endpoint": "/api/users"}
-        )
+        await increment("http_requests_total", tags={"method": "GET", "endpoint": "/api/users"})
+        await increment("http_requests_total", tags={"method": "POST", "endpoint": "/api/users"})
         await gauge("active_users", 150)
         await gauge("memory_usage_bytes", 1024 * 1024 * 512)  # 512MB
 
         # Time an operation
         async def sample_operation():
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/metrics.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/services/ctr_guard.py	2025-09-21 01:31:31.357929+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/services/ctr_guard.py	2025-09-21 05:49:13.799105+00:00
@@ -9,14 +9,11 @@
 
 class CTRGuard:
     def __init__(self, min_delta: float = 0.5):
         self.min_delta = min_delta
 
-    def decide(
-            self,
-            historical_ctr: float,
-            candidate_ctr_pred: float) -> CTRDecision:
+    def decide(self, historical_ctr: float, candidate_ctr_pred: float) -> CTRDecision:
         if candidate_ctr_pred >= historical_ctr + self.min_delta:
             return CTRDecision(
                 True,
                 f"predicted uplift {
                     candidate_ctr_pred -
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/routes/automation.py	2025-09-21 01:31:31.328696+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/routes/automation.py	2025-09-21 05:49:13.851274+00:00
@@ -2,13 +2,11 @@
 from pydantic import BaseModel
 import os
 import sqlite3
 from typing import Optional
 
-DB_PATH = os.environ.get(
-    "TRAE_DB_PATH", os.path.join(os.getcwd(), "data", "trae_ai.db")
-)
+DB_PATH = os.environ.get("TRAE_DB_PATH", os.path.join(os.getcwd(), "data", "trae_ai.db"))
 os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
 
 router = APIRouter()
 
 
@@ -50,12 +48,11 @@
 
 @router.get("/toggles")
 def get_toggles(channel_id: str):
     conn = _connect()
     cur = conn.cursor()
-    cur.execute(
-        "SELECT * FROM automation_toggles WHERE channel_id = ?", (channel_id,))
+    cur.execute("SELECT * FROM automation_toggles WHERE channel_id = ?", (channel_id,))
     row = cur.fetchone()
     conn.close()
     if not row:
         return {
             "channel_id": channel_id,
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/websocket_manager.py	2025-09-21 01:31:31.249316+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/websocket_manager.py	2025-09-21 05:49:13.901806+00:00
@@ -67,15 +67,11 @@
 
 
 class WebSocketConnection:
     """Individual WebSocket connection wrapper"""
 
-    def __init__(
-            self,
-            connection_id: str,
-            websocket,
-            user_id: Optional[str] = None):
+    def __init__(self, connection_id: str, websocket, user_id: Optional[str] = None):
         self.connection_id = connection_id
         self.websocket = websocket
         self.user_id = user_id
         self.session_id = str(uuid.uuid4())
         self.connected_at = datetime.now(timezone.utc)
@@ -101,11 +97,12 @@
             return True
 
         except Exception as e:
             logger.error(
                 f"Failed to send message to connection {
-                    self.connection_id}: {e}")
+                    self.connection_id}: {e}"
+            )
             self.status = ConnectionStatus.ERROR
             return False
 
     async def send_json(self, data: dict[str, Any]) -> bool:
         """Send JSON data through this connection"""
@@ -114,11 +111,12 @@
             self.last_activity = datetime.now(timezone.utc)
             return True
         except Exception as e:
             logger.error(
                 f"Failed to send JSON to connection {
-                    self.connection_id}: {e}")
+                    self.connection_id}: {e}"
+            )
             self.status = ConnectionStatus.ERROR
             return False
 
     def get_info(self) -> ConnectionInfo:
         """Get connection information"""
@@ -141,13 +139,11 @@
     def __init__(self):
         self.connections: dict[str, WebSocketConnection] = {}
         # user_id -> connection_ids
         self.user_connections: dict[str, set[str]] = {}
         self.subscriptions: dict[str, set[str]] = {}  # topic -> connection_ids
-        self.message_handlers: dict[
-            MessageType, list[Callable[[str, WebSocketMessage], Any]]
-        ] = {}
+        self.message_handlers: dict[MessageType, list[Callable[[str, WebSocketMessage], Any]]] = {}
         self.heartbeat_interval = 30  # seconds
         self.heartbeat_task: Optional[asyncio.Task[None]] = None
         self.running = False
 
     async def start(self):
@@ -172,14 +168,11 @@
                 pass
 
         # Close all connections
         await self.disconnect_all()
 
-    async def add_connection(
-            self,
-            websocket,
-            user_id: Optional[str] = None) -> str:
+    async def add_connection(self, websocket, user_id: Optional[str] = None) -> str:
         """Add a new WebSocket connection"""
         connection_id = str(uuid.uuid4())
         connection = WebSocketConnection(connection_id, websocket, user_id)
 
         self.connections[connection_id] = connection
@@ -188,12 +181,11 @@
         if user_id:
             if user_id not in self.user_connections:
                 self.user_connections[user_id] = set()
             self.user_connections[user_id].add(connection_id)
 
-        logger.info(
-            f"Added WebSocket connection {connection_id} for user {user_id}")
+        logger.info(f"Added WebSocket connection {connection_id} for user {user_id}")
         return connection_id
 
     async def remove_connection(self, connection_id: str):
         """Remove a WebSocket connection"""
         if connection_id not in self.connections:
@@ -214,25 +206,20 @@
         # Remove connection
         del self.connections[connection_id]
 
         logger.info(f"Removed WebSocket connection {connection_id}")
 
-    async def send_to_connection(
-        self, connection_id: str, message: WebSocketMessage
-    ) -> bool:
+    async def send_to_connection(self, connection_id: str, message: WebSocketMessage) -> bool:
         """Send a message to a specific connection"""
         if connection_id not in self.connections:
             logger.warning(f"Connection {connection_id} not found")
             return False
 
         connection = self.connections[connection_id]
         return await connection.send_message(message)
 
-    async def send_to_user(
-            self,
-            user_id: str,
-            message: WebSocketMessage) -> int:
+    async def send_to_user(self, user_id: str, message: WebSocketMessage) -> int:
         """Send a message to all connections for a specific user"""
         if user_id not in self.user_connections:
             logger.warning(f"No connections found for user {user_id}")
             return 0
 
@@ -241,12 +228,13 @@
             if await self.send_to_connection(connection_id, message):
                 sent_count += 1
 
         return sent_count
 
-    async def broadcast(self, message: WebSocketMessage,
-                        exclude_connections: Optional[set[str]] = None) -> int:
+    async def broadcast(
+        self, message: WebSocketMessage, exclude_connections: Optional[set[str]] = None
+    ) -> int:
         """Broadcast a message to all connections"""
         exclude_connections = exclude_connections or set()
         sent_count = 0
 
         for connection_id in list(self.connections.keys()):
@@ -282,18 +270,14 @@
         if topic in self.subscriptions:
             self.subscriptions[topic].discard(connection_id)
             if not self.subscriptions[topic]:
                 del self.subscriptions[topic]
 
-        logger.info(
-            f"Connection {connection_id} unsubscribed from topic {topic}")
+        logger.info(f"Connection {connection_id} unsubscribed from topic {topic}")
         return True
 
-    async def publish_to_topic(
-            self,
-            topic: str,
-            message: WebSocketMessage) -> int:
+    async def publish_to_topic(self, topic: str, message: WebSocketMessage) -> int:
         """Publish a message to all subscribers of a topic"""
         if topic not in self.subscriptions:
             return 0
 
         sent_count = 0
@@ -301,12 +285,13 @@
             if await self.send_to_connection(connection_id, message):
                 sent_count += 1
 
         return sent_count
 
-    def add_message_handler(self, message_type: MessageType,
-                            handler: Callable[[str, WebSocketMessage], Any]):
+    def add_message_handler(
+        self, message_type: MessageType, handler: Callable[[str, WebSocketMessage], Any]
+    ):
         """Add a message handler for a specific message type"""
         if message_type not in self.message_handlers:
             self.message_handlers[message_type] = []
         self.message_handlers[message_type].append(handler)
 
@@ -315,13 +300,11 @@
         try:
             data = json.loads(raw_message)
 
             # Update connection activity
             if connection_id in self.connections:
-                self.connections[connection_id].last_activity = datetime.now(
-                    timezone.utc
-                )
+                self.connections[connection_id].last_activity = datetime.now(timezone.utc)
 
             # Create message object
             message = WebSocketMessage(
                 id=data.get("id", str(uuid.uuid4())),
                 type=MessageType(data.get("type", "data")),
@@ -345,26 +328,22 @@
                         await handler(connection_id, message)
                     except Exception as e:
                         logger.error(f"Error in message handler: {e}")
 
         except Exception as e:
-            logger.error(
-                f"Error handling message from connection {connection_id}: {e}")
+            logger.error(f"Error handling message from connection {connection_id}: {e}")
 
             # Send error response
             error_message = WebSocketMessage(
                 id=str(uuid.uuid4()),
                 type=MessageType.ERROR,
                 payload={"error": "Invalid message format", "details": str(e)},
                 timestamp=datetime.now(timezone.utc),
             )
             await self.send_to_connection(connection_id, error_message)
 
-    async def _handle_ping(
-            self,
-            connection_id: str,
-            ping_message: WebSocketMessage):
+    async def _handle_ping(self, connection_id: str, ping_message: WebSocketMessage):
         """Handle ping message by sending pong response"""
         pong_message = WebSocketMessage(
             id=str(uuid.uuid4()),
             type=MessageType.PONG,
             payload={"ping_id": ping_message.id},
@@ -381,28 +360,24 @@
                 if not self.running:
                     break
 
                 # Send heartbeat to all connections
                 heartbeat_message = WebSocketMessage(
-                    id=str(
-                        uuid.uuid4()), type=MessageType.HEARTBEAT, payload={
-                        "timestamp": datetime.now(
-                            timezone.utc).isoformat()}, timestamp=datetime.now(
-                        timezone.utc), )
+                    id=str(uuid.uuid4()),
+                    type=MessageType.HEARTBEAT,
+                    payload={"timestamp": datetime.now(timezone.utc).isoformat()},
+                    timestamp=datetime.now(timezone.utc),
+                )
 
                 # Remove stale connections
                 stale_connections = []
                 current_time = datetime.now(timezone.utc)
 
                 for connection_id, connection in self.connections.items():
-                    time_since_activity = (
-                        current_time - connection.last_activity
-                    ).total_seconds()
-
-                    if (
-                        time_since_activity > self.heartbeat_interval * 3
-                    ):  # 3 missed heartbeats
+                    time_since_activity = (current_time - connection.last_activity).total_seconds()
+
+                    if time_since_activity > self.heartbeat_interval * 3:  # 3 missed heartbeats
                         stale_connections.append(connection_id)
                     else:
                         await connection.send_message(heartbeat_message)
 
                 # Clean up stale connections
@@ -443,12 +418,11 @@
             "heartbeat_interval": self.heartbeat_interval,
         }
 
     def get_connections_info(self) -> list[dict[str, Any]]:
         """Get information about all connections"""
-        return [asdict(connection.get_info())
-                for connection in self.connections.values()]
+        return [asdict(connection.get_info()) for connection in self.connections.values()]
 
 
 # Global WebSocket manager instance
 websocket_manager = WebSocketManager()
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/services/ctr_guard.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/routes/automation.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app/websocket_manager.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/base_agents.py	2025-09-21 01:31:23.895749+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/base_agents.py	2025-09-21 05:49:22.279899+00:00
@@ -24,12 +24,11 @@
 
     def __init__(self, agent_id: str, name: str):
         self.agent_id = agent_id
         self.name = name
         self.agent_type = "base"
-        self.logger = logging.getLogger(
-            f"{self.__class__.__name__}_{self.agent_id}")
+        self.logger = logging.getLogger(f"{self.__class__.__name__}_{self.agent_id}")
         self.is_active = False
 
     @property
     @abstractmethod
     def capabilities(self) -> list[AgentCapability]:
@@ -61,14 +60,11 @@
 
 
 class PlannerAgent(BaseAgent):
     """Agent responsible for planning and task orchestration"""
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
         super().__init__(agent_id or str(uuid.uuid4()), name or "PlannerAgent")
         self.agent_type = "planner"
 
     @property
     def capabilities(self) -> list[AgentCapability]:
@@ -89,23 +85,17 @@
                 "result": f"Planning task {task_type} completed",
                 "agent_id": self.agent_id,
             }
         except Exception as e:
             self.logger.error(f"Planning task failed: {e}")
-            return {
-                "success": False,
-                "error": str(e),
-                "agent_id": self.agent_id}
+            return {"success": False, "error": str(e), "agent_id": self.agent_id}
 
 
 class ExecutorAgent(BaseAgent):
     """Agent responsible for task execution"""
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
         super().__init__(agent_id or str(uuid.uuid4()), name or "ExecutorAgent")
         self.agent_type = "executor"
 
     @property
     def capabilities(self) -> list[AgentCapability]:
@@ -126,23 +116,17 @@
                 "result": f"Execution task {task_type} completed",
                 "agent_id": self.agent_id,
             }
         except Exception as e:
             self.logger.error(f"Execution task failed: {e}")
-            return {
-                "success": False,
-                "error": str(e),
-                "agent_id": self.agent_id}
+            return {"success": False, "error": str(e), "agent_id": self.agent_id}
 
 
 class AuditorAgent(BaseAgent):
     """Agent responsible for auditing and validation"""
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
         super().__init__(agent_id or str(uuid.uuid4()), name or "AuditorAgent")
         self.agent_type = "auditor"
 
     @property
     def capabilities(self) -> list[AgentCapability]:
@@ -163,9 +147,6 @@
                 "result": f"Auditing task {task_type} completed",
                 "agent_id": self.agent_id,
             }
         except Exception as e:
             self.logger.error(f"Auditing task failed: {e}")
-            return {
-                "success": False,
-                "error": str(e),
-                "agent_id": self.agent_id}
+            return {"success": False, "error": str(e), "agent_id": self.agent_id}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/base_agents.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app_backup_pre_rescaffolding_20250918_231926/routes/webhuman.py	2025-09-19 08:32:00+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app_backup_pre_rescaffolding_20250918_231926/routes/webhuman.py	2025-09-21 05:49:22.399769+00:00
@@ -55,13 +55,11 @@
     async with async_playwright() as p:
         browser = await p.chromium.launch(
             headless=task.headless,
             args=["--disable-blink-features=AutomationControlled"],
         )
-        context = await browser.new_context(
-            locale="en-US", timezone_id="America/Denver"
-        )
+        context = await browser.new_context(locale="en-US", timezone_id="America/Denver")
         page = await context.new_page()
         await page.goto(task.url, wait_until="domcontentloaded", timeout=45000)
         await _humanize_page(page, task)
         await browser.close()
     return {"ok": True}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app_backup_pre_rescaffolding_20250918_231926/routes/webhuman.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app_backup_pre_rescaffolding_20250918_231926/quality_dashboard.py	2025-09-19 08:32:37+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app_backup_pre_rescaffolding_20250918_231926/quality_dashboard.py	2025-09-21 05:49:22.765518+00:00
@@ -238,13 +238,11 @@
 
             health_checks.append(
                 HealthCheck(
                     name="database",
                     status=(
-                        HealthStatus.HEALTHY
-                        if db_response_time < 100
-                        else HealthStatus.WARNING
+                        HealthStatus.HEALTHY if db_response_time < 100 else HealthStatus.WARNING
                     ),
                     message=f"Database responding in {db_response_time:.1f}ms",
                     timestamp=timestamp,
                     response_time_ms=db_response_time,
                 )
@@ -566,19 +564,15 @@
             ):
                 latest_checks[check.name] = check
 
         return {
             "checks": [asdict(check) for check in latest_checks.values()],
-            "overall_status": self._calculate_overall_health(
-                list(latest_checks.values())
-            ),
+            "overall_status": self._calculate_overall_health(list(latest_checks.values())),
             "total_services": len(latest_checks),
         }
 
-    async def _get_performance_metrics_data(
-        self, widget: DashboardWidget
-    ) -> dict[str, Any]:
+    async def _get_performance_metrics_data(self, widget: DashboardWidget) -> dict[str, Any]:
         """Get performance metrics data for chart widget."""
         time_range = widget.config.get("time_range", "1h")
 
         # Calculate time range
         if time_range == "1h":
@@ -590,12 +584,11 @@
 
         # Filter metrics by time and type
         performance_metrics = [
             m
             for m in self.data_collector.metrics
-            if m.timestamp > start_time
-            and m.metric_type == QualityMetricType.PERFORMANCE
+            if m.timestamp > start_time and m.metric_type == QualityMetricType.PERFORMANCE
         ]
 
         # Group by metric name
         grouped_metrics = defaultdict(list)
         for metric in performance_metrics:
@@ -618,22 +611,16 @@
         filtered_alerts = self.data_collector.alerts
         if not show_resolved:
             filtered_alerts = [a for a in filtered_alerts if not a.resolved]
 
         # Sort by timestamp (newest first) and limit
-        sorted_alerts = sorted(
-            filtered_alerts, key=lambda x: x.timestamp, reverse=True
-        )[:max_items]
+        sorted_alerts = sorted(filtered_alerts, key=lambda x: x.timestamp, reverse=True)[:max_items]
 
         return {
             "alerts": [asdict(alert) for alert in sorted_alerts],
-            "total_active": len(
-                [a for a in self.data_collector.alerts if not a.resolved]
-            ),
-            "total_resolved": len(
-                [a for a in self.data_collector.alerts if a.resolved]
-            ),
+            "total_active": len([a for a in self.data_collector.alerts if not a.resolved]),
+            "total_resolved": len([a for a in self.data_collector.alerts if a.resolved]),
         }
 
     async def _get_latest_metrics_data(self, widget: DashboardWidget) -> dict[str, Any]:
         """Get latest metrics data for table widget."""
         # Get the latest value for each metric
@@ -661,18 +648,14 @@
                 }
             )
 
         return {
             "rows": table_data,
-            "columns": widget.config.get(
-                "columns", ["name", "value", "unit", "status"]
-            ),
+            "columns": widget.config.get("columns", ["name", "value", "unit", "status"]),
         }
 
-    async def _get_gauge_data(
-        self, widget: DashboardWidget, metric_name: str
-    ) -> dict[str, Any]:
+    async def _get_gauge_data(self, widget: DashboardWidget, metric_name: str) -> dict[str, Any]:
         """Get gauge data for a specific metric."""
         # Find the latest value for this metric
         latest_metric = None
         for metric in reversed(self.data_collector.metrics):
             if metric.name == metric_name:
@@ -703,13 +686,11 @@
             "thresholds": thresholds,
             "unit": latest_metric.unit,
             "timestamp": latest_metric.timestamp.isoformat(),
         }
 
-    async def _get_resource_metrics_data(
-        self, widget: DashboardWidget
-    ) -> dict[str, Any]:
+    async def _get_resource_metrics_data(self, widget: DashboardWidget) -> dict[str, Any]:
         """Get resource metrics data for chart."""
         metrics_to_include = widget.config.get("metrics", ["cpu_usage", "memory_usage"])
 
         # Filter and group metrics
         resource_data: dict[str, list[dict[str, Any]]] = defaultdict(list)
@@ -767,13 +748,11 @@
             metrics_by_type.get("performance", [])
         )
         reliability_score = self._calculate_reliability_score(
             metrics_by_type.get("reliability", [])
         )
-        security_score = self._calculate_security_score(
-            metrics_by_type.get("security", [])
-        )
+        security_score = self._calculate_security_score(metrics_by_type.get("security", []))
 
         overall_score = (performance_score + reliability_score + security_score) / 3
 
         return {
             "overall_score": round(overall_score, 1),
@@ -874,13 +853,11 @@
         summary = await quality_dashboard.get_quality_summary()
         print(f"Quality Summary: {json.dumps(summary, indent=2)}")
 
         # Get dashboard data
         overview_data = await quality_dashboard.get_dashboard_data("overview")
-        print(
-            f"\nOverview Dashboard: {json.dumps(overview_data, indent=2, default=str)}"
-        )
+        print(f"\nOverview Dashboard: {json.dumps(overview_data, indent=2, default=str)}")
 
         # List available dashboards
         dashboards = quality_dashboard.get_available_dashboards()
         print(f"\nAvailable Dashboards: {json.dumps(dashboards, indent=2)}")
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/app_backup_pre_rescaffolding_20250918_231926/quality_dashboard.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/auditor_agent.py	2025-09-21 01:31:24.000772+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/auditor_agent.py	2025-09-21 05:49:27.364843+00:00
@@ -11,14 +11,11 @@
 
 
 class AuditorAgent(BaseAgent):
     """Agent responsible for auditing and compliance monitoring"""
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
         super().__init__(agent_id or str(uuid.uuid4()), name or "AuditorAgent")
         self.agent_type = "auditor"
         self.audit_logs = []
         self.compliance_rules = {}
 
@@ -30,12 +27,11 @@
         """Execute auditing tasks"""
         try:
             task_type = task.get("type", "unknown")
             task_id = task.get("id", str(uuid.uuid4()))
 
-            self.logger.info(
-                f"Processing audit task: {task_type} (ID: {task_id})")
+            self.logger.info(f"Processing audit task: {task_type} (ID: {task_id})")
 
             if task_type == "audit_system":
                 return await self._audit_system(task)
             elif task_type == "compliance_check":
                 return await self._compliance_check(task)
@@ -46,14 +42,11 @@
             else:
                 return await self._handle_generic_task(task)
 
         except Exception as e:
             self.logger.error(f"Audit task failed: {e}")
-            return {
-                "success": False,
-                "error": str(e),
-                "agent_id": self.agent_id}
+            return {"success": False, "error": str(e), "agent_id": self.agent_id}
 
     async def _audit_system(self, task: dict[str, Any]) -> dict[str, Any]:
         """Perform system audit"""
         system_id = task.get("system_id", "default")
         audit_scope = task.get("scope", ["all"])
@@ -142,23 +135,26 @@
         audit_type = task.get("audit_type", "comprehensive")
 
         # Simulate security audit
         await asyncio.sleep(2.5)
 
-        security_findings = [{"vulnerability": "Weak SSL/TLS configuration",
-                              "severity": "high",
-                              "cvss_score": 7.5,
-                              "affected_components": ["web_server"],
-                              "remediation": "Update SSL/TLS configuration to use stronger ciphers",
-                              },
-                             {"vulnerability": "Outdated dependencies",
-                              "severity": "medium",
-                              "cvss_score": 5.3,
-                              "affected_components": ["application"],
-                              "remediation": "Update all dependencies to latest secure versions",
-                              },
-                             ]
+        security_findings = [
+            {
+                "vulnerability": "Weak SSL/TLS configuration",
+                "severity": "high",
+                "cvss_score": 7.5,
+                "affected_components": ["web_server"],
+                "remediation": "Update SSL/TLS configuration to use stronger ciphers",
+            },
+            {
+                "vulnerability": "Outdated dependencies",
+                "severity": "medium",
+                "cvss_score": 5.3,
+                "affected_components": ["application"],
+                "remediation": "Update all dependencies to latest secure versions",
+            },
+        ]
 
         security_result = {
             "audit_id": str(uuid.uuid4()),
             "target": target,
             "audit_type": audit_type,
@@ -175,13 +171,11 @@
         }
 
     async def _performance_audit(self, task: dict[str, Any]) -> dict[str, Any]:
         """Perform performance audit"""
         system_component = task.get("component", "application")
-        metrics = task.get(
-            "metrics", [
-                "response_time", "throughput", "resource_usage"])
+        metrics = task.get("metrics", ["response_time", "throughput", "resource_usage"])
 
         # Simulate performance audit
         await asyncio.sleep(1.8)
 
         performance_metrics = {
@@ -212,12 +206,11 @@
             "success": True,
             "performance_result": performance_result,
             "agent_id": self.agent_id,
         }
 
-    async def _handle_generic_task(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _handle_generic_task(self, task: dict[str, Any]) -> dict[str, Any]:
         """Handle generic audit tasks"""
         task_type = task.get("type", "unknown")
 
         # Simulate generic task processing
         await asyncio.sleep(1.0)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/auditor_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/performance_analytics_agent.py	2025-09-21 01:31:23.639533+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/performance_analytics_agent.py	2025-09-21 05:49:55.809716+00:00
@@ -48,23 +48,16 @@
             }
 
     async def _collect_metrics(self, task: dict[str, Any]) -> dict[str, Any]:
         """Collect performance metrics"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Performance metrics collected"}
+        return {"status": "completed", "result": "Performance metrics collected"}
 
     async def _generate_report(self, task: dict[str, Any]) -> dict[str, Any]:
         """Generate performance report"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Performance report generated"}
+        return {"status": "completed", "result": "Performance report generated"}
 
-    async def _analyze_performance(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _analyze_performance(self, task: dict[str, Any]) -> dict[str, Any]:
         """Analyze performance data"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Performance analysis completed"}
+        return {"status": "completed", "result": "Performance analysis completed"}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/performance_analytics_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/financial_agent.py	2025-09-21 01:31:23.670030+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/financial_agent.py	2025-09-21 05:49:56.012145+00:00
@@ -54,14 +54,11 @@
         """Analyze revenue streams"""
         await asyncio.sleep(0.1)  # Simulate processing
         return {
             "status": "completed",
             "result": "Revenue analysis completed",
-            "revenue_streams": [
-                "subscriptions",
-                "one_time_purchases",
-                "advertising"],
+            "revenue_streams": ["subscriptions", "one_time_purchases", "advertising"],
             "total_revenue": 10000,
             "growth_rate": 15.5,
         }
 
     async def _track_costs(self, task: dict[str, Any]) -> dict[str, Any]:
@@ -86,12 +83,11 @@
                 "Optimize infrastructure costs",
             ],
             "projected_savings": 1200,
         }
 
-    async def _generate_financial_report(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _generate_financial_report(self, task: dict[str, Any]) -> dict[str, Any]:
         """Generate financial report"""
         await asyncio.sleep(0.1)  # Simulate processing
         return {
             "status": "completed",
             "result": "Financial report generated",
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/financial_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/evolution_agent.py	2025-09-21 01:31:23.718443+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/evolution_agent.py	2025-09-21 05:49:56.020050+00:00
@@ -52,24 +52,16 @@
             }
 
     async def _monitor_trends(self, task: dict[str, Any]) -> dict[str, Any]:
         """Monitor content trends"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Trends monitored successfully"}
+        return {"status": "completed", "result": "Trends monitored successfully"}
 
-    async def _analyze_innovation(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _analyze_innovation(self, task: dict[str, Any]) -> dict[str, Any]:
         """Analyze innovation opportunities"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Innovation analysis completed"}
+        return {"status": "completed", "result": "Innovation analysis completed"}
 
-    async def _evolve_capabilities(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _evolve_capabilities(self, task: dict[str, Any]) -> dict[str, Any]:
         """Evolve system capabilities"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Capabilities evolved successfully"}
+        return {"status": "completed", "result": "Capabilities evolved successfully"}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/evolution_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/executor_agent.py	2025-09-21 01:31:23.617462+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/executor_agent.py	2025-09-21 05:49:56.074284+00:00
@@ -11,14 +11,11 @@
 
 
 class ExecutorAgent(BaseAgent):
     """Agent responsible for task execution and coordination"""
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
         super().__init__(agent_id or str(uuid.uuid4()), name or "ExecutorAgent")
         self.agent_type = "executor"
         self.execution_queue = []
         self.active_executions = {}
 
@@ -30,12 +27,11 @@
         """Execute tasks"""
         try:
             task_type = task.get("type", "unknown")
             task_id = task.get("id", str(uuid.uuid4()))
 
-            self.logger.info(
-                f"Processing execution task: {task_type} (ID: {task_id})")
+            self.logger.info(f"Processing execution task: {task_type} (ID: {task_id})")
 
             if task_type == "execute_command":
                 return await self._execute_command(task)
             elif task_type == "execute_script":
                 return await self._execute_script(task)
@@ -46,14 +42,11 @@
             else:
                 return await self._handle_generic_task(task)
 
         except Exception as e:
             self.logger.error(f"Execution task failed: {e}")
-            return {
-                "success": False,
-                "error": str(e),
-                "agent_id": self.agent_id}
+            return {"success": False, "error": str(e), "agent_id": self.agent_id}
 
     async def _execute_command(self, task: dict[str, Any]) -> dict[str, Any]:
         """Execute a command"""
         command = task.get("command", "")
         execution_id = task.get("execution_id", str(uuid.uuid4()))
@@ -164,12 +157,11 @@
             "status": execution_info.get("status", "unknown"),
             "info": execution_info,
             "agent_id": self.agent_id,
         }
 
-    async def _handle_generic_task(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _handle_generic_task(self, task: dict[str, Any]) -> dict[str, Any]:
         """Handle generic execution tasks"""
         task_type = task.get("type", "unknown")
 
         # Simulate generic task processing
         await asyncio.sleep(0.8)
@@ -179,12 +171,11 @@
             "task_type": task_type,
             "result": f"Execution task {task_type} completed",
             "agent_id": self.agent_id,
         }
 
-    def get_execution_status(
-            self, execution_id: str) -> Optional[dict[str, Any]]:
+    def get_execution_status(self, execution_id: str) -> Optional[dict[str, Any]]:
         """Get execution status by ID"""
         return self.active_executions.get(execution_id)
 
     def list_active_executions(self) -> list[dict[str, Any]]:
         """List all active executions"""
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/executor_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/collaboration_outreach_agent.py	2025-09-21 01:31:24.190833+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/collaboration_outreach_agent.py	2025-09-21 05:49:56.966134+00:00
@@ -48,21 +48,16 @@
             }
 
     async def _identify_partners(self, task: dict[str, Any]) -> dict[str, Any]:
         """Identify potential partners"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Potential partners identified"}
+        return {"status": "completed", "result": "Potential partners identified"}
 
     async def _create_outreach(self, task: dict[str, Any]) -> dict[str, Any]:
         """Create outreach campaign"""
         await asyncio.sleep(0.1)  # Simulate processing
         return {"status": "completed", "result": "Outreach campaign created"}
 
-    async def _manage_partnerships(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _manage_partnerships(self, task: dict[str, Any]) -> dict[str, Any]:
         """Manage existing partnerships"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Partnerships managed successfully"}
+        return {"status": "completed", "result": "Partnerships managed successfully"}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/collaboration_outreach_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/content_agent.py	2025-09-21 01:31:24.523019+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/content_agent.py	2025-09-21 05:49:56.990290+00:00
@@ -50,17 +50,12 @@
 class ContentAgent(BaseAgent):
     """
     Content Agent for conservative media content creation and management
     """
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
-        super().__init__(
-            agent_id=agent_id or "content_agent", name=name or "Content Agent"
-        )
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
+        super().__init__(agent_id=agent_id or "content_agent", name=name or "Content Agent")
         self.logger = logging.getLogger(__name__)
 
         # Content templates for different platforms
         self.content_templates = {
             "twitter": {
@@ -220,13 +215,11 @@
             "content_id": content_id,
             "scheduled_for": schedule_time,
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _analyze_content_performance(
-        self, task: dict[str, Any]
-    ) -> dict[str, Any]:
+    async def _analyze_content_performance(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Analyze content performance metrics
         """
         platform = task.get("platform", "all")
         time_period = task.get("time_period", "7_days")
@@ -252,37 +245,27 @@
             "time_period": time_period,
             "data": performance_data,
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _generate_content_strategy(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _generate_content_strategy(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Generate content strategy
         """
-        target_platforms = task.get(
-            "platforms", ["twitter", "facebook", "truth_social"]
-        )
+        target_platforms = task.get("platforms", ["twitter", "facebook", "truth_social"])
         duration = task.get("duration", "30_days")
 
         strategy = ContentStrategy(
             strategy_id=f"strategy_{
                 datetime.now().strftime('%Y%m%d_%H%M%S')}",
             name=f"Conservative Content Strategy - {duration}",
             target_platforms=target_platforms,
             content_themes=self.content_themes,
             posting_schedule={
                 "daily_posts": 3,
-                "peak_times": [
-                    "09:00",
-                    "12:00",
-                    "18:00",
-                    "21:00"],
-                "content_mix": {
-                    "original": 60,
-                    "curated": 25,
-                    "engagement": 15},
+                "peak_times": ["09:00", "12:00", "18:00", "21:00"],
+                "content_mix": {"original": 60, "curated": 25, "engagement": 15},
             },
             engagement_goals={
                 "likes_per_post": 100,
                 "shares_per_post": 25,
                 "comments_per_post": 15,
@@ -300,13 +283,11 @@
             "platforms": target_platforms,
             "duration": duration,
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _create_cross_platform_content(
-        self, task: dict[str, Any]
-    ) -> dict[str, Any]:
+    async def _create_cross_platform_content(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Create content optimized for multiple platforms
         """
         topic = task.get("topic", "conservative_values")
         platforms = task.get("platforms", ["twitter", "facebook"])
@@ -314,13 +295,11 @@
         cross_platform_content = {}
 
         for platform in platforms:
             if platform in self.content_templates:
                 template = self.content_templates[platform]
-                content = self._generate_platform_specific_content(
-                    topic, platform, template
-                )
+                content = self._generate_platform_specific_content(topic, platform, template)
                 cross_platform_content[platform] = content
 
         return {
             "status": "completed",
             "result": "Cross-platform content created",
@@ -335,28 +314,19 @@
         Generate Twitter-optimized content
         """
         tweets = {
             "political_hypocrisy": {
                 "body": "🚨 Another day, another Democratic double standard! They preach about climate change while flying private jets. The hypocrisy is real, folks! #ConservativeValues #Hypocrisy #ClimateHypocrisy",
-                "tags": [
-                    "ConservativeValues",
-                    "Hypocrisy",
-                    "ClimateHypocrisy"],
+                "tags": ["ConservativeValues", "Hypocrisy", "ClimateHypocrisy"],
             },
             "media_bias": {
                 "body": "📺 Mainstream media at it again! Selective reporting and biased coverage. We see through the narrative! #MediaBias #TruthMatters #ConservativeMedia",
-                "tags": [
-                    "MediaBias",
-                    "TruthMatters",
-                    "ConservativeMedia"],
+                "tags": ["MediaBias", "TruthMatters", "ConservativeMedia"],
             },
             "constitutional_rights": {
                 "body": "🇺🇸 Our Constitution isn't a suggestion - it's the law of the land! Defending our rights is not negotiable. #Constitution #Freedom #AmericaFirst",
-                        "tags": [
-                            "Constitution",
-                            "Freedom",
-                            "AmericaFirst"],
+                "tags": ["Constitution", "Freedom", "AmericaFirst"],
             },
         }
 
         return tweets.get(
             topic,
@@ -378,25 +348,21 @@
 They lecture us about climate change while taking private jets to climate summits. They want to defund the police while hiring private security. They push for higher taxes while using every loophole to avoid paying their fair share.
 
 This isn't about politics - it's about integrity. We deserve leaders who practice what they preach.
 
 What are your thoughts? Have you noticed these contradictions too?""",
-                "tags": [
-                    "Hypocrisy",
-                    "Leadership",
-                    "Integrity"],
-            }}
+                "tags": ["Hypocrisy", "Leadership", "Integrity"],
+            }
+        }
 
         return posts.get(
             topic,
             {
                 "title": f"Conservative Perspective: {
                     topic.title()}",
                 "body": f"Sharing some thoughts on {topic} from a conservative viewpoint. What do you think?",
-                "tags": [
-                    "Conservative",
-                    "Discussion"],
+                "tags": ["Conservative", "Discussion"],
             },
         )
 
     def _generate_article(self, topic: str) -> dict[str, Any]:
         """
@@ -408,32 +374,22 @@
             "body": f"""In-depth analysis of {topic} from a conservative perspective.
 
 [Article content would be generated here based on the specific topic and current events]
 
 Conclusion: Conservative principles provide the framework for understanding and addressing {topic} in a way that preserves our values and strengthens our nation.""",
-            "tags": [
-                "Conservative",
-                "Analysis",
-                topic.replace(
-                    "_",
-                    "")],
-        }
-
-    def _generate_generic_post(
-            self, topic: str, platform: str) -> dict[str, Any]:
+            "tags": ["Conservative", "Analysis", topic.replace("_", "")],
+        }
+
+    def _generate_generic_post(self, topic: str, platform: str) -> dict[str, Any]:
         """
         Generate generic post content
         """
         return {
             "title": f"{
                 topic.title()} - Conservative Perspective",
             "body": f"Conservative viewpoint on {topic}. Standing for traditional values and constitutional principles.",
-            "tags": [
-                "Conservative",
-                topic.replace(
-                    "_",
-                    "")],
+            "tags": ["Conservative", topic.replace("_", "")],
         }
 
     def _generate_platform_specific_content(
         self, topic: str, platform: str, template: dict[str, Any]
     ) -> dict[str, Any]:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/content_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/channels.py	2025-09-21 01:31:28.535317+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/channels.py	2025-09-21 05:50:13.774188+00:00
@@ -13,19 +13,16 @@
 def get_db_connection() -> Optional[Any]:
     """Mock database connection."""
     return None
 
 
-def execute_query(
-    query: str, params: Optional[dict[str, Any]] = None
-) -> list[dict[str, Any]]:
+def execute_query(query: str, params: Optional[dict[str, Any]] = None) -> list[dict[str, Any]]:
     """Mock query execution."""
     return []
 
 
-def execute_update(
-        query: str, params: Optional[dict[str, Any]] = None) -> bool:
+def execute_update(query: str, params: Optional[dict[str, Any]] = None) -> bool:
     """Mock update execution."""
     return True
 
 
 logger = logging.getLogger(__name__)
@@ -42,14 +39,12 @@
 class ChannelResponse(BaseModel):
     id: str = Field(..., description="Channel ID")
     name: str = Field(..., description="Channel name")
     description: Optional[str] = Field(None, description="Channel description")
     is_private: bool = Field(False, description="Whether channel is private")
-    created_at: Optional[datetime] = Field(
-        None, description="Creation timestamp")
-    updated_at: Optional[datetime] = Field(
-        None, description="Update timestamp")
+    created_at: Optional[datetime] = Field(None, description="Creation timestamp")
+    updated_at: Optional[datetime] = Field(None, description="Update timestamp")
 
 
 class MessageCreate(BaseModel):
     content: str = Field(..., description="Message content")
     channel_id: str = Field(..., description="Channel ID")
@@ -57,12 +52,11 @@
 
 class MessageResponse(BaseModel):
     id: str = Field(..., description="Message ID")
     content: str = Field(..., description="Message content")
     channel_id: str = Field(..., description="Channel ID")
-    created_at: Optional[datetime] = Field(
-        None, description="Creation timestamp")
+    created_at: Optional[datetime] = Field(None, description="Creation timestamp")
 
 
 class ChannelService:
     """Service class for channel operations."""
 
@@ -162,13 +156,11 @@
 @router.get("/{channel_id}", response_model=ChannelResponse)
 async def get_channel(channel_id: str) -> ChannelResponse:
     """Get a specific channel."""
     channel = ChannelService.get_channel(channel_id)
     if not channel:
-        raise HTTPException(
-            status_code=status.HTTP_404_NOT_FOUND, detail="Channel not found"
-        )
+        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Channel not found")
     return channel
 
 
 @router.get("/health")
 async def health_check() -> dict[str, str]:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/channels.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/strategic_advisor_agent.py	2025-09-21 01:31:23.839207+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/strategic_advisor_agent.py	2025-09-21 05:50:14.130408+00:00
@@ -55,12 +55,9 @@
     async def _create_strategy(self, task: dict[str, Any]) -> dict[str, Any]:
         """Create strategic plan"""
         await asyncio.sleep(0.1)  # Simulate processing
         return {"status": "completed", "result": "Strategic plan created"}
 
-    async def _provide_recommendations(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _provide_recommendations(self, task: dict[str, Any]) -> dict[str, Any]:
         """Provide strategic recommendations"""
         await asyncio.sleep(0.1)  # Simulate processing
-        return {
-            "status": "completed",
-            "result": "Strategic recommendations provided"}
+        return {"status": "completed", "result": "Strategic recommendations provided"}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/strategic_advisor_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/system_agent.py	2025-09-21 01:31:24.329443+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/system_agent.py	2025-09-21 05:50:14.207148+00:00
@@ -49,17 +49,12 @@
 class SystemAgent(BaseAgent):
     """
     System Agent for infrastructure and system management
     """
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
-        super().__init__(
-            agent_id=agent_id or "system_agent", name=name or "System Agent"
-        )
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
+        super().__init__(agent_id=agent_id or "system_agent", name=name or "System Agent")
         self.logger = logging.getLogger(__name__)
 
         # System monitoring configuration
         self.monitoring_interval = 60  # seconds
         self.alert_thresholds = {
@@ -141,12 +136,11 @@
                 "status": "error",
                 "error": str(e),
                 "timestamp": datetime.now().isoformat(),
             }
 
-    async def _perform_health_check(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _perform_health_check(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Perform comprehensive system health check
         """
         health_status = {
             "overall_status": "healthy",
@@ -162,13 +156,11 @@
             memory_percent = 45.0  # Simulated memory usage
             disk_percent = 60.0  # Simulated disk usage
 
             health_status["components"]["cpu"] = {
                 "status": (
-                    "healthy"
-                    if cpu_percent < self.alert_thresholds["cpu_usage"]
-                    else "warning"
+                    "healthy" if cpu_percent < self.alert_thresholds["cpu_usage"] else "warning"
                 ),
                 "usage_percent": cpu_percent,
             }
 
             health_status["components"]["memory"] = {
@@ -181,32 +173,27 @@
                 "available_gb": 8.5,  # Simulated available memory
             }
 
             health_status["components"]["disk"] = {
                 "status": (
-                    "healthy"
-                    if disk_percent < self.alert_thresholds["disk_usage"]
-                    else "warning"
+                    "healthy" if disk_percent < self.alert_thresholds["disk_usage"] else "warning"
                 ),
                 "usage_percent": disk_percent,
                 "free_gb": 50.2,  # Simulated free disk space
             }
 
             # Check for alerts
             if cpu_percent >= self.alert_thresholds["cpu_usage"]:
-                health_status["alerts"].append(
-                    f"High CPU usage: {cpu_percent}%")
+                health_status["alerts"].append(f"High CPU usage: {cpu_percent}%")
                 health_status["overall_status"] = "warning"
 
             if memory_percent >= self.alert_thresholds["memory_usage"]:
-                health_status["alerts"].append(
-                    f"High memory usage: {memory_percent}%")
+                health_status["alerts"].append(f"High memory usage: {memory_percent}%")
                 health_status["overall_status"] = "warning"
 
             if disk_percent >= self.alert_thresholds["disk_usage"]:
-                health_status["alerts"].append(
-                    f"High disk usage: {disk_percent}%")
+                health_status["alerts"].append(f"High disk usage: {disk_percent}%")
                 health_status["overall_status"] = "warning"
 
         except Exception as e:
             health_status["overall_status"] = "error"
             health_status["alerts"].append(f"Health check error: {str(e)}")
@@ -219,12 +206,11 @@
             "health_status": health_status,
             "check_time": self.last_health_check.isoformat(),
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _start_system_monitoring(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _start_system_monitoring(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Start continuous system monitoring
         """
         duration = task.get("duration", 3600)  # Default 1 hour
         interval = task.get("interval", self.monitoring_interval)
@@ -322,13 +308,11 @@
 
     async def _update_system(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Perform system updates
         """
-        update_type = task.get(
-            "update_type", "security"
-        )  # 'security', 'all', 'specific'
+        update_type = task.get("update_type", "security")  # 'security', 'all', 'specific'
         auto_restart = task.get("auto_restart", False)
 
         # Simulate update process
         update_results = {
             "packages_updated": 12,
@@ -349,22 +333,17 @@
 
     async def _security_scan(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Perform security vulnerability scan
         """
-        scan_type = task.get("scan_type",
-                             "full")  # 'quick', 'full', 'targeted'
+        scan_type = task.get("scan_type", "full")  # 'quick', 'full', 'targeted'
         target_paths = task.get("paths", ["/"])
 
         # Simulate security scan
         scan_results = {
             "vulnerabilities_found": 2,
-            "severity_breakdown": {
-                "critical": 0,
-                "high": 1,
-                "medium": 1,
-                "low": 0},
+            "severity_breakdown": {"critical": 0, "high": 1, "medium": 1, "low": 0},
             "recommendations": [
                 "Update package XYZ to latest version",
                 "Review file permissions in /etc/config",
             ],
         }
@@ -377,12 +356,11 @@
             "scan_type": scan_type,
             "scan_results": scan_results,
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _optimize_performance(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _optimize_performance(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Perform system performance optimization
         """
         optimization_areas = task.get("areas", ["memory", "disk", "network"])
 
@@ -393,30 +371,18 @@
         }
 
         # Simulate optimization process
         for area in optimization_areas:
             if area == "memory":
-                optimization_results["optimizations_applied"].append(
-                    "Memory cache optimization"
-                )
-                optimization_results["performance_improvement"][
-                    "memory"
-                ] = "15% improvement"
+                optimization_results["optimizations_applied"].append("Memory cache optimization")
+                optimization_results["performance_improvement"]["memory"] = "15% improvement"
             elif area == "disk":
-                optimization_results["optimizations_applied"].append(
-                    "Disk defragmentation"
-                )
-                optimization_results["performance_improvement"][
-                    "disk"
-                ] = "8% improvement"
+                optimization_results["optimizations_applied"].append("Disk defragmentation")
+                optimization_results["performance_improvement"]["disk"] = "8% improvement"
             elif area == "network":
-                optimization_results["optimizations_applied"].append(
-                    "Network buffer tuning"
-                )
-                optimization_results["performance_improvement"][
-                    "network"
-                ] = "12% improvement"
+                optimization_results["optimizations_applied"].append("Network buffer tuning")
+                optimization_results["performance_improvement"]["network"] = "12% improvement"
 
         await asyncio.sleep(3)  # Simulate optimization time
 
         return {
             "status": "completed",
@@ -443,15 +409,12 @@
                 disk_usage=disk.percent,
                 network_io={
                     "bytes_sent": network.bytes_sent,
                     "bytes_recv": network.bytes_recv,
                 },
-                active_processes=len(
-                    psutil.pids()),
-                system_load=os.getloadavg()[0] if hasattr(
-                    os,
-                    "getloadavg") else 0.0,
+                active_processes=len(psutil.pids()),
+                system_load=os.getloadavg()[0] if hasattr(os, "getloadavg") else 0.0,
             )
         except Exception as e:
             self.logger.error(f"Error collecting system metrics: {e}")
             return SystemMetrics(
                 timestamp=datetime.now(),
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/system_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/research_agent.py	2025-09-21 01:31:24.171070+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/research_agent.py	2025-09-21 05:50:14.595235+00:00
@@ -50,26 +50,21 @@
 class ResearchAgent(BaseAgent):
     """
     Research Agent for information gathering and analysis
     """
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
-        super().__init__(
-            agent_id=agent_id or "research_agent",
-            name=name or "Research Agent")
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
+        super().__init__(agent_id=agent_id or "research_agent", name=name or "Research Agent")
         self.logger = logging.getLogger(__name__)
 
         # Research sources configuration
         self.research_sources = {
-            "news_apis": [
-                "newsapi.org", "gnews.io", "mediastack.com"], "social_media": [
-                "twitter_api", "reddit_api", "facebook_api"], "government_data": [
-                "data.gov", "census.gov", "congress.gov"], "academic": [
-                    "scholar.google.com", "jstor.org", "pubmed.ncbi.nlm.nih.gov"], }
+            "news_apis": ["newsapi.org", "gnews.io", "mediastack.com"],
+            "social_media": ["twitter_api", "reddit_api", "facebook_api"],
+            "government_data": ["data.gov", "census.gov", "congress.gov"],
+            "academic": ["scholar.google.com", "jstor.org", "pubmed.ncbi.nlm.nih.gov"],
+        }
 
         # Research storage
         self.active_queries: list[ResearchQuery] = []
         self.completed_research: list[ResearchResult] = []
 
@@ -231,12 +226,11 @@
             "evidence": fact_check_result["supporting_evidence"],
             "confidence": fact_check_result["confidence_level"],
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _competitor_analysis(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _competitor_analysis(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Analyze competitor content and strategies
         """
         competitors = task.get("competitors", [])
         analysis_type = task.get("analysis_type", "content")
@@ -268,12 +262,11 @@
             "analysis_type": analysis_type,
             "data": analysis_results,
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _sentiment_analysis(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _sentiment_analysis(self, task: dict[str, Any]) -> dict[str, Any]:
         """
         Analyze sentiment around topics or content
         """
         topic = task.get("topic", "")
         data_sources = task.get("sources", ["social_media", "news"])
@@ -317,14 +310,11 @@
             "key_findings": [
                 f"Primary insight about {topic}",
                 f"Secondary analysis of {topic} trends",
                 f"Implications for conservative perspective on {topic}",
             ],
-            "sources": [
-                "News APIs",
-                "Government Data",
-                "Academic Sources"],
+            "sources": ["News APIs", "Government Data", "Academic Sources"],
             "confidence": 0.85,
             "raw_data": {
                 "search_terms": keywords,
                 "depth_level": depth,
                 "data_points": 150,
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/research_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/planner_agent.py	2025-09-21 01:31:23.775044+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/planner_agent.py	2025-09-21 05:50:14.858724+00:00
@@ -11,14 +11,11 @@
 
 
 class PlannerAgent(BaseAgent):
     """Agent responsible for task planning and coordination"""
 
-    def __init__(
-            self,
-            agent_id: Optional[str] = None,
-            name: Optional[str] = None):
+    def __init__(self, agent_id: Optional[str] = None, name: Optional[str] = None):
         super().__init__(agent_id or str(uuid.uuid4()), name or "PlannerAgent")
         self.agent_type = "planner"
         self.plans = {}
         self.active_tasks = {}
 
@@ -30,12 +27,11 @@
         """Execute planning tasks"""
         try:
             task_type = task.get("type", "unknown")
             task_id = task.get("id", str(uuid.uuid4()))
 
-            self.logger.info(
-                f"Processing planning task: {task_type} (ID: {task_id})")
+            self.logger.info(f"Processing planning task: {task_type} (ID: {task_id})")
 
             if task_type == "create_plan":
                 return await self._create_plan(task)
             elif task_type == "update_plan":
                 return await self._update_plan(task)
@@ -46,14 +42,11 @@
             else:
                 return await self._handle_generic_task(task)
 
         except Exception as e:
             self.logger.error(f"Planning task failed: {e}")
-            return {
-                "success": False,
-                "error": str(e),
-                "agent_id": self.agent_id}
+            return {"success": False, "error": str(e), "agent_id": self.agent_id}
 
     async def _create_plan(self, task: dict[str, Any]) -> dict[str, Any]:
         """Create a new execution plan"""
         plan_id = task.get("plan_id", str(uuid.uuid4()))
         requirements = task.get("requirements", [])
@@ -124,12 +117,11 @@
             "plan_id": plan_id,
             "status": "execution_started",
             "agent_id": self.agent_id,
         }
 
-    async def _analyze_requirements(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _analyze_requirements(self, task: dict[str, Any]) -> dict[str, Any]:
         """Analyze task requirements"""
         requirements = task.get("requirements", [])
 
         # Simulate requirements analysis
         await asyncio.sleep(0.7)
@@ -146,12 +138,11 @@
             "analysis": analysis,
             "requirements_count": len(requirements),
             "agent_id": self.agent_id,
         }
 
-    async def _handle_generic_task(
-            self, task: dict[str, Any]) -> dict[str, Any]:
+    async def _handle_generic_task(self, task: dict[str, Any]) -> dict[str, Any]:
         """Handle generic planning tasks"""
         task_type = task.get("type", "unknown")
 
         # Simulate generic task processing
         await asyncio.sleep(0.5)
@@ -161,12 +152,11 @@
             "task_type": task_type,
             "result": f"Planning task {task_type} completed",
             "agent_id": self.agent_id,
         }
 
-    def _generate_plan_steps(
-            self, requirements: list[str]) -> list[dict[str, Any]]:
+    def _generate_plan_steps(self, requirements: list[str]) -> list[dict[str, Any]]:
         """Generate plan steps from requirements"""
         steps = []
         for i, req in enumerate(requirements):
             steps.append(
                 {
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/agents/planner_agent.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api_orchestrator.py	2025-09-21 01:31:21.657127+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api_orchestrator.py	2025-09-21 05:50:16.808109+00:00
@@ -32,12 +32,11 @@
         if fastapi_available and FastAPI:
             self.app = FastAPI(title="API Orchestrator", version="1.0.0")
             self._setup_middleware()
             self._setup_routes()
         else:
-            self.logger.warning(
-                "FastAPI not available, running in limited mode")
+            self.logger.warning("FastAPI not available, running in limited mode")
 
     def _setup_middleware(self):
         """Setup CORS and other middleware"""
         if self.app and CORSMiddleware:
             self.app.add_middleware(
@@ -69,16 +68,14 @@
                     return JSONResponse(content=result)
                 return result
             except Exception as execution_error:
                 self.logger.error("API execution failed: %s", execution_error)
                 if HTTPException:
-                    raise HTTPException(
-                        status_code=500, detail=str(execution_error))
+                    raise HTTPException(status_code=500, detail=str(execution_error))
                 raise execution_error
 
-    async def _execute_request(
-            self, request: dict[str, Any]) -> dict[str, Any]:
+    async def _execute_request(self, request: dict[str, Any]) -> dict[str, Any]:
         """Execute an API request"""
         endpoint = request.get("endpoint")
         method = request.get("method", "GET")
         params = request.get("params", {})
 
@@ -91,20 +88,17 @@
             "method": method,
             "params": params,
             "result": "Mock response",
         }
 
-    def register_route(self, path: str, handler,
-                       methods: Optional[list[str]] = None):
+    def register_route(self, path: str, handler, methods: Optional[list[str]] = None):
         """Register a new route"""
         if methods is None:
             methods = ["GET"]
 
         if not fastapi_available:
-            self.logger.warning(
-                "Cannot register route %s - FastAPI not available", path
-            )
+            self.logger.warning("Cannot register route %s - FastAPI not available", path)
             return False
 
         self.routes[path] = {"handler": handler, "methods": methods}
 
         self.logger.info("Registered route: %s", path)
@@ -119,12 +113,11 @@
         import uvicorn
 
         uvicorn.run(self.app, host=host, port=port)
         return True
 
-    async def _process_request(
-            self, request_data: dict[str, Any]) -> dict[str, Any]:
+    async def _process_request(self, request_data: dict[str, Any]) -> dict[str, Any]:
         """Process the actual request"""
         # Simulate processing time
         await asyncio.sleep(0.1)
 
         request_type = request_data.get("type", "unknown")
@@ -140,33 +133,29 @@
                 "status": "completed",
                 "result": f"Request type {request_type} processed successfully",
                 "timestamp": datetime.now().isoformat(),
             }
 
-    async def _handle_agent_task(
-            self, request_data: dict[str, Any]) -> dict[str, Any]:
+    async def _handle_agent_task(self, request_data: dict[str, Any]) -> dict[str, Any]:
         """Handle agent task requests"""
         return {
             "status": "completed",
             "result": "Agent task completed",
             "agent_id": request_data.get("agent_id", "unknown"),
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _handle_data_query(
-            self, request_data: dict[str, Any]) -> dict[str, Any]:
+    async def _handle_data_query(self, request_data: dict[str, Any]) -> dict[str, Any]:
         """Handle data query requests"""
         return {
             "status": "completed",
             "result": "Data query completed",
             "query": request_data.get("query", "unknown"),
             "timestamp": datetime.now().isoformat(),
         }
 
-    async def _handle_system_status(
-        self, request_data: dict[str, Any]
-    ) -> dict[str, Any]:
+    async def _handle_system_status(self, request_data: dict[str, Any]) -> dict[str, Any]:
         """Handle system status requests"""
         return {
             "status": "completed",
             "result": "System is operational",
             "active_requests": len(self.active_requests),
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api_orchestrator.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/upload.py	2025-09-21 01:31:28.266839+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/upload.py	2025-09-21 05:50:16.906927+00:00
@@ -29,12 +29,11 @@
 
         return decorator
 
     def delete(self, path: str, **kwargs):
         def decorator(func):
-            self.routes.append(
-                {"method": "DELETE", "path": path, "func": func})
+            self.routes.append({"method": "DELETE", "path": path, "func": func})
             return func
 
         return decorator
 
 
@@ -80,19 +79,11 @@
 logger = logging.getLogger(__name__)
 
 # Configuration
 UPLOAD_DIR = Path("uploads")
 MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
-ALLOWED_EXTENSIONS = {
-    ".jpg",
-    ".jpeg",
-    ".png",
-    ".gif",
-    ".pdf",
-    ".txt",
-    ".doc",
-    ".docx"}
+ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".gif", ".pdf", ".txt", ".doc", ".docx"}
 
 # Ensure upload directory exists
 UPLOAD_DIR.mkdir(exist_ok=True)
 
 # Pydantic Models
@@ -133,13 +124,11 @@
         self.file_info = file_info
         super().__init__(**kwargs)
 
 
 class FileListResponse(BaseModel):
-    def __init__(
-        self, files: Optional[list[FileInfo]] = None, total: int = 0, **kwargs
-    ):
+    def __init__(self, files: Optional[list[FileInfo]] = None, total: int = 0, **kwargs):
         self.files = files or []
         self.total = total
         super().__init__(**kwargs)
 
 
@@ -181,24 +170,20 @@
 
     @staticmethod
     def _get_safe_filename(filename: str) -> str:
         """Generate a safe filename."""
         # Remove potentially dangerous characters
-        safe_chars = (
-            "-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
-        )
+        safe_chars = "-_.() abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
         safe_filename = "".join(c for c in filename if c in safe_chars)
         return safe_filename[:255]  # Limit filename length
 
     @staticmethod
     async def upload_file(file: UploadFile) -> UploadResponse:
         """Upload a file to the server."""
         try:
             if not file.filename:
-                raise HTTPException(
-                    status.HTTP_400_BAD_REQUEST,
-                    "No file provided")
+                raise HTTPException(status.HTTP_400_BAD_REQUEST, "No file provided")
 
             # Check file extension
             if not UploadService._is_allowed_file(file.filename):
                 raise HTTPException(
                     status.HTTP_415_UNSUPPORTED_MEDIA_TYPE,
@@ -247,74 +232,66 @@
                 file_hash=file_hash,
             )
 
             logger.info(
                 f"File uploaded successfully: {
-                    file.filename} -> {stored_filename}")
+                    file.filename} -> {stored_filename}"
+            )
 
             return UploadResponse(
-                success=True,
-                message="File uploaded successfully",
-                file_info=file_info)
+                success=True, message="File uploaded successfully", file_info=file_info
+            )
 
         except HTTPException:
             raise
         except Exception as e:
             logger.error(f"Error uploading file: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to upload file"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to upload file")
 
     @staticmethod
     def get_file_info(file_id: str) -> FileInfo:
         """Get information about an uploaded file."""
         try:
             # Find file by ID
             for file_path in UPLOAD_DIR.glob(f"{file_id}_*"):
                 if file_path.is_file():
                     stat = file_path.stat()
                     content_type = (
-                        mimetypes.guess_type(str(file_path))[0]
-                        or "application/octet-stream"
+                        mimetypes.guess_type(str(file_path))[0] or "application/octet-stream"
                     )
 
                     # Extract original filename
                     stored_filename = file_path.name
-                    original_filename = stored_filename[
-                        len(file_id) + 1:
-                    ]  # Remove file_id prefix
+                    original_filename = stored_filename[len(file_id) + 1 :]  # Remove file_id prefix
 
                     return FileInfo(
                         file_id=file_id,
                         filename=stored_filename,
                         original_filename=original_filename,
                         content_type=content_type,
                         size=stat.st_size,
-                        upload_date=datetime.fromtimestamp(
-                            stat.st_ctime),
+                        upload_date=datetime.fromtimestamp(stat.st_ctime),
                         file_hash=UploadService._calculate_file_hash(file_path),
                     )
 
             raise HTTPException(status.HTTP_404_NOT_FOUND, "File not found")
 
         except HTTPException:
             raise
         except Exception as e:
             logger.error(f"Error getting file info: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR,
-                "Failed to get file info")
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to get file info")
 
     @staticmethod
     def list_files(limit: int = 100, offset: int = 0) -> FileListResponse:
         """List uploaded files."""
         try:
             files = []
             all_files = list(UPLOAD_DIR.glob("*"))
             all_files.sort(key=lambda x: x.stat().st_ctime, reverse=True)
 
-            for file_path in all_files[offset: offset + limit]:
+            for file_path in all_files[offset : offset + limit]:
                 if file_path.is_file():
                     try:
                         # Extract file ID from filename
                         filename = file_path.name
                         if "_" in filename:
@@ -324,12 +301,11 @@
                             file_id = filename
                             original_filename = filename
 
                         stat = file_path.stat()
                         content_type = (
-                            mimetypes.guess_type(str(file_path))[0]
-                            or "application/octet-stream"
+                            mimetypes.guess_type(str(file_path))[0] or "application/octet-stream"
                         )
 
                         file_info = FileInfo(
                             file_id=file_id,
                             filename=filename,
@@ -338,21 +314,18 @@
                             size=stat.st_size,
                             upload_date=datetime.fromtimestamp(stat.st_ctime),
                         )
                         files.append(file_info)
                     except Exception as e:
-                        logger.warning(
-                            f"Error processing file {file_path}: {e}")
+                        logger.warning(f"Error processing file {file_path}: {e}")
                         continue
 
             return FileListResponse(files=files, total=len(all_files))
 
         except Exception as e:
             logger.error(f"Error listing files: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to list files"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to list files")
 
     @staticmethod
     def delete_file(file_id: str) -> DeleteResponse:
         """Delete an uploaded file."""
         try:
@@ -364,23 +337,19 @@
                     deleted = True
                     logger.info(f"File deleted: {file_path.name}")
                     break
 
             if not deleted:
-                raise HTTPException(
-                    status.HTTP_404_NOT_FOUND, "File not found")
-
-            return DeleteResponse(
-                success=True, message="File deleted successfully")
+                raise HTTPException(status.HTTP_404_NOT_FOUND, "File not found")
+
+            return DeleteResponse(success=True, message="File deleted successfully")
 
         except HTTPException:
             raise
         except Exception as e:
             logger.error(f"Error deleting file: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to delete file"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to delete file")
 
     @staticmethod
     def get_file_path(file_id: str) -> Path:
         """Get the file path for a given file ID."""
         for file_path in UPLOAD_DIR.glob(f"{file_id}_*"):
@@ -432,13 +401,11 @@
             "content_type": file_info.content_type,
             "size": file_info.size,
         }
     except Exception as e:
         logger.error(f"Error downloading file: {e}")
-        raise HTTPException(
-            status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to download file"
-        )
+        raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to download file")
 
 
 @router.get("/health")
 def health_check():
     """Health check endpoint for Upload service."""
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/upload.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/runtimehq.py	2025-09-21 01:31:28.387163+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/runtimehq.py	2025-09-21 05:50:18.233944+00:00
@@ -164,13 +164,11 @@
                 cpu_percent=cpu_percent,
                 memory_percent=memory.percent,
                 memory_used=memory.used,
                 memory_total=memory.total,
                 disk_percent=(
-                    disk.percent
-                    if hasattr(disk, "percent")
-                    else (disk.used / disk.total * 100)
+                    disk.percent if hasattr(disk, "percent") else (disk.used / disk.total * 100)
                 ),
                 disk_used=disk.used,
                 disk_total=disk.total,
             )
         except Exception as e:
@@ -193,14 +191,11 @@
                 status=process.status(),
             )
         except Exception as e:
             logger.error(f"Error getting process info: {e}")
             # Return default process info if psutil fails
-            return ProcessInfo(
-                pid=os.getpid(),
-                name="python",
-                status="running")
+            return ProcessInfo(pid=os.getpid(), name="python", status="running")
 
     @staticmethod
     def get_uptime() -> str:
         """Get application uptime."""
         try:
@@ -228,12 +223,12 @@
                 process_info=process_info,
             )
         except Exception as e:
             logger.error(f"Error getting runtime status: {e}")
             raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR,
-                "Failed to get runtime status")
+                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to get runtime status"
+            )
 
     @staticmethod
     def get_recent_logs(limit: int = 100) -> list[LogEntry]:
         """Get recent log entries."""
         try:
@@ -248,33 +243,29 @@
                 LogEntry(
                     level="INFO",
                     message="Database connection established",
                     module="database",
                 ),
-                LogEntry(
-                    level="INFO",
-                    message="API server running",
-                    module="api"),
+                LogEntry(level="INFO", message="API server running", module="api"),
             ]
 
             return logs[:limit]
         except Exception as e:
             logger.error(f"Error getting recent logs: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to get logs"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to get logs")
 
     @staticmethod
     def update_config(config_update: ConfigUpdate) -> dict[str, Any]:
         """Update runtime configuration."""
         try:
             # This is a simplified implementation
             # In a real application, you would update actual configuration
             logger.info(
                 f"Config update requested: {
                     config_update.key} = {
-                    config_update.value}")
+                    config_update.value}"
+            )
 
             return {
                 "success": True,
                 "message": f"Configuration '{
                     config_update.key}' updated successfully",
@@ -282,12 +273,12 @@
                 "value": config_update.value,
             }
         except Exception as e:
             logger.error(f"Error updating config: {e}")
             raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR,
-                "Failed to update configuration")
+                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to update configuration"
+            )
 
     @staticmethod
     def restart_service() -> dict[str, Any]:
         """Restart the service (graceful restart)."""
         try:
@@ -300,13 +291,11 @@
                 "message": "Service restart initiated",
                 "timestamp": datetime.utcnow().isoformat(),
             }
         except Exception as e:
             logger.error(f"Error restarting service: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR,
-                "Failed to restart service")
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to restart service")
 
 
 # API Router
 router = APIRouter(prefix="/api/runtime", tags=["runtime"])
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/runtimehq.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/pet_endpoints.py	2025-09-21 01:31:28.439200+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/pet_endpoints.py	2025-09-21 05:50:18.242154+00:00
@@ -33,12 +33,11 @@
 
         return decorator
 
     def delete(self, path: str, **kwargs):
         def decorator(func):
-            self.routes.append(
-                {"method": "DELETE", "path": path, "func": func})
+            self.routes.append({"method": "DELETE", "path": path, "func": func})
             return func
 
         return decorator
 
 
@@ -192,13 +191,11 @@
                 created_at=now,
                 updated_at=now,
             )
         except Exception as e:
             logger.error(f"Error creating pet: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to create pet"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to create pet")
 
     @staticmethod
     def get_pets(owner_id: Optional[str] = None) -> list[PetResponse]:
         """Get all pets or pets by owner."""
         try:
@@ -225,13 +222,11 @@
                 )
 
             return pets
         except Exception as e:
             logger.error(f"Error fetching pets: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to fetch pets"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to fetch pets")
 
     @staticmethod
     def get_pet(pet_id: str) -> Optional[PetResponse]:
         """Get a specific pet by ID."""
         try:
@@ -252,13 +247,11 @@
                 created_at=row[6],
                 updated_at=row[7],
             )
         except Exception as e:
             logger.error(f"Error fetching pet {pet_id}: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to fetch pet"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to fetch pet")
 
     @staticmethod
     def update_pet(pet_id: str, pet_data: PetUpdate) -> Optional[PetResponse]:
         """Update a pet."""
         try:
@@ -298,13 +291,11 @@
             # Return updated pet
             return PetService.get_pet(pet_id)
 
         except Exception as e:
             logger.error(f"Error updating pet {pet_id}: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to update pet"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to update pet")
 
     @staticmethod
     def delete_pet(pet_id: str) -> bool:
         """Delete a pet."""
         try:
@@ -317,13 +308,11 @@
             execute_update(query, (pet_id,))
             return True
 
         except Exception as e:
             logger.error(f"Error deleting pet {pet_id}: {e}")
-            raise HTTPException(
-                status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to delete pet"
-            )
+            raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, "Failed to delete pet")
 
 
 # API Router
 router = APIRouter(prefix="/api/pets", tags=["pets"])
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/api/pet_endpoints.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/ai_inpainting.py	2025-09-21 01:31:26.272238+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/ai_inpainting.py	2025-09-21 05:50:19.017106+00:00
@@ -128,13 +128,11 @@
 
         except Exception as e:
             self.logger.error(f"Manual mask creation failed: {e}")
             return None
 
-    def create_automatic_mask(
-        self, image_path: str, threshold: float = 0.5
-    ) -> Optional[Any]:
+    def create_automatic_mask(self, image_path: str, threshold: float = 0.5) -> Optional[Any]:
         """Create mask automatically using edge detection"""
         if not cv2 or not np:
             return None
 
         try:
@@ -172,11 +170,11 @@
 
             mask = np.zeros(image.shape[:2], dtype=np.uint8)
             x, y, w, h = object_coords
 
             # Create rectangular mask
-            mask[y: y + h, x: x + w] = 255
+            mask[y : y + h, x : x + w] = 255
 
             # Apply morphological operations to smooth edges
             kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
             mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
 
@@ -205,25 +203,22 @@
             if image is None:
                 return None
 
             # Resize if target size specified
             if target_size:
-                image = cv2.resize(
-                    image, target_size, interpolation=cv2.INTER_LANCZOS4)
+                image = cv2.resize(image, target_size, interpolation=cv2.INTER_LANCZOS4)
 
             # Noise reduction
             image = cv2.bilateralFilter(image, 9, 75, 75)
 
             return image
 
         except Exception as e:
             self.logger.error(f"Image preprocessing failed: {e}")
             return None
 
-    def enhance_result(
-        self, image: Any, enhancement_factor: float = 1.2
-    ) -> Optional[Any]:
+    def enhance_result(self, image: Any, enhancement_factor: float = 1.2) -> Optional[Any]:
         """Enhance inpainting result"""
         if not cv2 or not np:
             return image
 
         try:
@@ -247,23 +242,18 @@
 
         except Exception as e:
             self.logger.error(f"Result enhancement failed: {e}")
             return image
 
-    def calculate_quality_score(
-            self,
-            original: Any,
-            result: Any,
-            mask: Any) -> float:
+    def calculate_quality_score(self, original: Any, result: Any, mask: Any) -> float:
         """Calculate quality score for inpainting result"""
         if not cv2 or not np:
             return 0.0
 
         try:
             # Calculate PSNR in masked region
-            masked_original = cv2.bitwise_and(
-                original, original, mask=255 - mask)
+            masked_original = cv2.bitwise_and(original, original, mask=255 - mask)
             masked_result = cv2.bitwise_and(result, result, mask=255 - mask)
 
             mse = np.mean((masked_original - masked_result) ** 2)
             if mse == 0:
                 return 100.0
@@ -324,57 +314,42 @@
             return result
         except Exception as e:
             self.logger.error(f"Fast marching inpainting failed: {e}")
             return None
 
-    async def inpaint_ai_diffusion(
-            self,
-            image: Any,
-            mask: Any) -> Optional[Any]:
+    async def inpaint_ai_diffusion(self, image: Any, mask: Any) -> Optional[Any]:
         """Inpaint using AI diffusion (placeholder for future ML integration)"""
         # Placeholder for AI-based inpainting
         # In a real implementation, this would use a trained model
-        self.logger.info(
-            "AI diffusion inpainting not yet implemented, falling back to Telea"
-        )
+        self.logger.info("AI diffusion inpainting not yet implemented, falling back to Telea")
         return self.inpaint_telea(image, mask)
 
-    async def process_inpainting(
-            self, request: InpaintingRequest) -> InpaintingResult:
+    async def process_inpainting(self, request: InpaintingRequest) -> InpaintingResult:
         """Process inpainting request"""
         start_time = datetime.now()
 
         try:
             # Load and preprocess image
             image = self.image_processor.preprocess_image(request.image_path)
             if image is None:
-                return InpaintingResult(
-                    success=False, error="Failed to load or preprocess image"
-                )
+                return InpaintingResult(success=False, error="Failed to load or preprocess image")
 
             original_size = (image.shape[1], image.shape[0])
 
             # Generate or load mask
             if request.mask_path:
-                mask = (
-                    cv2.imread(
-                        request.mask_path,
-                        cv2.IMREAD_GRAYSCALE) if cv2 else None)
+                mask = cv2.imread(request.mask_path, cv2.IMREAD_GRAYSCALE) if cv2 else None
             else:
                 # Generate mask based on type
                 if request.mask_type == MaskType.AUTOMATIC:
-                    mask = self.mask_generator.create_automatic_mask(
-                        request.image_path)
+                    mask = self.mask_generator.create_automatic_mask(request.image_path)
                 else:
                     # Default manual mask (empty for now)
-                    mask = np.zeros(
-                        image.shape[:2], dtype=np.uint8) if np else None
+                    mask = np.zeros(image.shape[:2], dtype=np.uint8) if np else None
 
             if mask is None:
-                return InpaintingResult(
-                    success=False, error="Failed to generate or load mask"
-                )
+                return InpaintingResult(success=False, error="Failed to generate or load mask")
 
             # Perform inpainting based on method
             if request.method == InpaintingMethod.TELEA:
                 result = self.inpaint_telea(image, mask)
             elif request.method == InpaintingMethod.NAVIER_STOKES:
@@ -385,37 +360,29 @@
                 result = await self.inpaint_ai_diffusion(image, mask)
             else:
                 result = self.inpaint_telea(image, mask)  # Default fallback
 
             if result is None:
-                return InpaintingResult(
-                    success=False, error="Inpainting algorithm failed"
-                )
+                return InpaintingResult(success=False, error="Inpainting algorithm failed")
 
             # Enhance result if requested
             if request.enhance_result:
                 result = self.image_processor.enhance_result(result)
 
             # Calculate quality score
-            quality_score = self.image_processor.calculate_quality_score(
-                image, result, mask
-            )
+            quality_score = self.image_processor.calculate_quality_score(image, result, mask)
 
             # Save result
             output_path = request.output_path
             if not output_path:
-                base_name = os.path.splitext(
-                    os.path.basename(request.image_path))[0]
-                output_path = os.path.join(
-                    self.temp_dir, f"{base_name}_inpainted.jpg")
+                base_name = os.path.splitext(os.path.basename(request.image_path))[0]
+                output_path = os.path.join(self.temp_dir, f"{base_name}_inpainted.jpg")
 
             if cv2:
                 success = cv2.imwrite(output_path, result)
                 if not success:
-                    return InpaintingResult(
-                        success=False, error="Failed to save result image"
-                    )
+                    return InpaintingResult(success=False, error="Failed to save result image")
 
             processing_time = (datetime.now() - start_time).total_seconds()
 
             return InpaintingResult(
                 success=True,
@@ -433,22 +400,17 @@
             )
 
         except Exception as e:
             self.logger.error(f"Inpainting processing failed: {e}")
             processing_time = (datetime.now() - start_time).total_seconds()
-            return InpaintingResult(
-                success=False, error=str(e), processing_time=processing_time
-            )
+            return InpaintingResult(success=False, error=str(e), processing_time=processing_time)
 
 
 class AIInpainting:
     """Main AI Inpainting class - high-level interface"""
 
-    def __init__(
-            self,
-            temp_dir: Optional[str] = None,
-            enable_gpu: bool = False):
+    def __init__(self, temp_dir: Optional[str] = None, enable_gpu: bool = False):
         self.logger = logging.getLogger(__name__)
         self.temp_dir = temp_dir or tempfile.gettempdir()
         self.enable_gpu = enable_gpu and torch is not None
         self.engine = InpaintingEngine(temp_dir)
 
@@ -480,17 +442,13 @@
         object_coords: tuple[int, int, int, int],
         output_path: Optional[str] = None,
     ) -> InpaintingResult:
         """Remove object from image"""
         # Generate mask for object removal
-        mask = self.engine.mask_generator.create_object_removal_mask(
-            image_path, object_coords
-        )
+        mask = self.engine.mask_generator.create_object_removal_mask(image_path, object_coords)
         if mask is None:
-            return InpaintingResult(
-                success=False, error="Failed to create object removal mask"
-            )
+            return InpaintingResult(success=False, error="Failed to create object removal mask")
 
         # Save temporary mask
         mask_path = os.path.join(self.temp_dir, "temp_object_mask.png")
         if cv2:
             cv2.imwrite(mask_path, mask)
@@ -517,13 +475,11 @@
     ) -> InpaintingResult:
         """Repair scratches and artifacts in image"""
         # Generate automatic mask for scratch detection
         mask = self.engine.mask_generator.create_automatic_mask(image_path)
         if mask is None:
-            return InpaintingResult(
-                success=False, error="Failed to create scratch repair mask"
-            )
+            return InpaintingResult(success=False, error="Failed to create scratch repair mask")
 
         # Save temporary mask
         mask_path = os.path.join(self.temp_dir, "temp_scratch_mask.png")
         if cv2:
             cv2.imwrite(mask_path, mask)
@@ -565,13 +521,11 @@
             "opencv_available": cv2 is not None,
             "numpy_available": np is not None,
             "pil_available": Image is not None,
             "torch_available": torch is not None,
             "gpu_enabled": self.enable_gpu,
-            "supported_methods": [
-                method.value for method in self.get_supported_methods()
-            ],
+            "supported_methods": [method.value for method in self.get_supported_methods()],
             "temp_directory": self.temp_dir,
         }
 
 
 # Convenience functions
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/ai_inpainting.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/content_analyzer.py	2025-09-21 01:31:26.072662+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/content_analyzer.py	2025-09-21 05:50:21.989763+00:00
@@ -183,14 +183,11 @@
         # Strip leading/trailing whitespace
         text = text.strip()
 
         return text
 
-    def extract_words(
-            self,
-            text: str,
-            remove_stop_words: bool = True) -> list[str]:
+    def extract_words(self, text: str, remove_stop_words: bool = True) -> list[str]:
         """Extract words from text."""
         # Clean text
         cleaned = self.clean_text(text)
 
         # Remove punctuation
@@ -410,15 +407,11 @@
                         negative_score += score
 
             # Calculate overall sentiment
             total_score = positive_score - negative_score
             total_words = len(
-                [
-                    w
-                    for w in words
-                    if w in self.positive_words or w in self.negative_words
-                ]
+                [w for w in words if w in self.positive_words or w in self.negative_words]
             )
 
             if total_words == 0:
                 sentiment_score = SentimentScore.NEUTRAL
                 confidence = 0.0
@@ -438,13 +431,11 @@
                 else:
                     sentiment_score = SentimentScore.NEUTRAL
 
             return {
                 "sentiment_score": sentiment_score.value,
-                "sentiment_label": sentiment_score.name.lower().replace(
-                    "_",
-                    " "),
+                "sentiment_label": sentiment_score.name.lower().replace("_", " "),
                 "positive_score": positive_score,
                 "negative_score": negative_score,
                 "confidence": confidence,
                 "total_sentiment_words": total_words,
             }
@@ -484,26 +475,24 @@
             # Perform requested analyses
             analysis_results = {}
 
             for analysis_type in request.analysis_types:
                 if analysis_type == AnalysisType.SENTIMENT:
-                    analysis_results["sentiment"] = (
-                        self.sentiment_analyzer.analyze_sentiment(
-                            request.content))
+                    analysis_results["sentiment"] = self.sentiment_analyzer.analyze_sentiment(
+                        request.content
+                    )
 
                 elif analysis_type == AnalysisType.QUALITY:
                     analysis_results["quality"] = self._analyze_quality(
                         request.content, request.content_type
                     )
 
             # Calculate overall quality score
-            quality_score = self._calculate_overall_quality_score(
-                analysis_results)
+            quality_score = self._calculate_overall_quality_score(analysis_results)
 
             # Generate recommendations
-            recommendations = self._generate_recommendations(
-                analysis_results, request)
+            recommendations = self._generate_recommendations(analysis_results, request)
 
             # Calculate processing time
             end_time = datetime.utcnow()
             processing_time = (end_time - start_time).total_seconds()
 
@@ -513,17 +502,14 @@
                 content_type=request.content_type,
                 analysis_results=analysis_results,
                 quality_score=quality_score,
                 recommendations=recommendations,
                 metadata={
-                    "content_length": len(
-                        request.content),
-                    "analysis_types": [
-                        at.value for at in request.analysis_types],
+                    "content_length": len(request.content),
+                    "analysis_types": [at.value for at in request.analysis_types],
                     "language": request.language,
-                    "has_custom_keywords": bool(
-                        request.custom_keywords),
+                    "has_custom_keywords": bool(request.custom_keywords),
                     "custom_metadata": request.metadata or {},
                 },
                 timestamp=end_time.isoformat(),
                 processing_time=processing_time,
             )
@@ -545,13 +531,11 @@
 
         except Exception as e:
             logger.error(f"Error analyzing content: {e}")
             raise
 
-    def _analyze_quality(
-        self, content: str, content_type: ContentType
-    ) -> dict[str, Any]:
+    def _analyze_quality(self, content: str, content_type: ContentType) -> dict[str, Any]:
         """Analyze overall content quality."""
         try:
             # Basic quality metrics
             words = content.split()
             sentences = self.text_processor.extract_sentences(content)
@@ -567,13 +551,11 @@
 
         except Exception as e:
             logger.error(f"Error analyzing quality: {e}")
             return {"overall_quality": 50.0}
 
-    def _calculate_overall_quality_score(
-        self, analysis_results: dict[str, Any]
-    ) -> float:
+    def _calculate_overall_quality_score(self, analysis_results: dict[str, Any]) -> float:
         """Calculate overall quality score from all analyses."""
         try:
             scores = []
 
             # Sentiment score (neutral is good for most content)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/content_analyzer.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/audio_post_production.py	2025-09-21 01:31:26.556656+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/audio_post_production.py	2025-09-21 05:50:22.495885+00:00
@@ -224,13 +224,11 @@
             sample_rate=44100,  # Default assumption
             channels=2,  # Default assumption
             file_size=file_size,
         )
 
-    def detect_silence(
-        self, file_path: str, threshold: float = -40.0
-    ) -> list[tuple[float, float]]:
+    def detect_silence(self, file_path: str, threshold: float = -40.0) -> list[tuple[float, float]]:
         """Detect silent segments in audio"""
         try:
             if AudioSegment is None:
                 return []
 
@@ -238,11 +236,11 @@
             silence_ranges = []
 
             # Simple silence detection
             chunk_size = 100  # ms
             for i in range(0, len(audio), chunk_size):
-                chunk = audio[i: i + chunk_size]
+                chunk = audio[i : i + chunk_size]
                 if chunk.dBFS < threshold:
                     start_time = i / 1000.0
                     end_time = min(i + chunk_size, len(audio)) / 1000.0
                     silence_ranges.append((start_time, end_time))
 
@@ -268,22 +266,20 @@
         self, audio_data: Any, sample_rate: int, intensity: float = 1.0
     ) -> Any:
         """Apply noise reduction to audio data"""
         try:
             if np is None or signal is None:
-                self.logger.warning(
-                    "NumPy or SciPy not available for noise reduction")
+                self.logger.warning("NumPy or SciPy not available for noise reduction")
                 return audio_data
 
             # Simple spectral subtraction noise reduction
             # This is a simplified implementation
             if len(audio_data.shape) > 1:
                 # Process each channel separately
                 processed = np.zeros_like(audio_data)
                 for i in range(audio_data.shape[0]):
-                    processed[i] = self._spectral_subtraction(
-                        audio_data[i], intensity)
+                    processed[i] = self._spectral_subtraction(audio_data[i], intensity)
                 return processed
             else:
                 return self._spectral_subtraction(audio_data, intensity)
 
         except Exception as e:
@@ -304,15 +300,11 @@
             filtered = signal.filtfilt(b, a, audio)
             return audio * (1 - intensity) + filtered * intensity
 
         return audio
 
-    def apply_normalization(
-            self,
-            audio_data: Any,
-            target_level: float = -
-            3.0) -> Any:
+    def apply_normalization(self, audio_data: Any, target_level: float = -3.0) -> Any:
         """Normalize audio to target level"""
         try:
             if np is None:
                 return audio_data
 
@@ -352,12 +344,11 @@
             # Find samples above threshold
             above_threshold = np.abs(compressed) > threshold_linear
 
             # Apply compression to samples above threshold
             compressed[above_threshold] = np.sign(compressed[above_threshold]) * (
-                threshold_linear
-                + (np.abs(compressed[above_threshold]) - threshold_linear) / ratio
+                threshold_linear + (np.abs(compressed[above_threshold]) - threshold_linear) / ratio
             )
 
             return compressed
 
         except Exception as e:
@@ -397,13 +388,11 @@
 
         except Exception as e:
             self.logger.error(f"EQ failed: {e}")
             return audio_data
 
-    def process_audio_file(
-        self, request: AudioProcessingRequest
-    ) -> AudioProcessingResult:
+    def process_audio_file(self, request: AudioProcessingRequest) -> AudioProcessingResult:
         """Process audio file with specified parameters"""
         start_time = datetime.now()
 
         try:
             # Analyze input file
@@ -413,28 +402,24 @@
                     success=False, error="Failed to analyze input audio file"
                 )
 
             # Load audio data
             if librosa is not None:
-                audio_data, sample_rate = librosa.load(
-                    request.input_path, sr=None)
+                audio_data, sample_rate = librosa.load(request.input_path, sr=None)
             elif AudioSegment is not None:
                 audio_segment = AudioSegment.from_file(request.input_path)
                 audio_data = (
-                    np.array(audio_segment.get_array_of_samples())
-                    if np is not None
-                    else None
+                    np.array(audio_segment.get_array_of_samples()) if np is not None else None
                 )
                 sample_rate = audio_segment.frame_rate
             else:
                 return AudioProcessingResult(
-                    success=False, error="No audio processing library available")
+                    success=False, error="No audio processing library available"
+                )
 
             if audio_data is None:
-                return AudioProcessingResult(
-                    success=False, error="Failed to load audio data"
-                )
+                return AudioProcessingResult(success=False, error="Failed to load audio data")
 
             # Apply processing chain
             processed_audio = audio_data
             applied_effects = []
 
@@ -449,31 +434,25 @@
                     target_level = (
                         params.custom_params.get("target_level", -3.0)
                         if params.custom_params
                         else -3.0
                     )
-                    processed_audio = self.apply_normalization(
-                        processed_audio, target_level
-                    )
+                    processed_audio = self.apply_normalization(processed_audio, target_level)
                     applied_effects.append("normalization")
 
                 elif params.processing_type == ProcessingType.COMPRESSION:
                     threshold = params.threshold or -12.0
                     ratio = params.ratio or 4.0
-                    processed_audio = self.apply_compression(
-                        processed_audio, threshold, ratio
-                    )
+                    processed_audio = self.apply_compression(processed_audio, threshold, ratio)
                     applied_effects.append("compression")
 
                 elif params.processing_type == ProcessingType.EQ:
                     if params.frequency_range and params.custom_params:
                         freq = params.frequency_range[0]
                         gain = params.custom_params.get("gain", 0.0)
                         q = params.custom_params.get("q_factor", 1.0)
-                        processed_audio = self.apply_eq(
-                            processed_audio, sample_rate, freq, gain, q
-                        )
+                        processed_audio = self.apply_eq(processed_audio, sample_rate, freq, gain, q)
                         applied_effects.append("eq")
 
             # Apply final normalization if requested
             if request.normalize_output:
                 processed_audio = self.apply_normalization(processed_audio)
@@ -481,36 +460,29 @@
                     applied_effects.append("final_normalization")
 
             # Determine output path
             output_path = request.output_path
             if not output_path:
-                base_name = os.path.splitext(
-                    os.path.basename(request.input_path))[0]
+                base_name = os.path.splitext(os.path.basename(request.input_path))[0]
                 output_path = os.path.join(
                     self.temp_dir,
                     f"{base_name}_processed.{request.target_format.value}",
                 )
 
             # Save processed audio
             success = self._save_audio(
-                processed_audio,
-                sample_rate,
-                output_path,
-                request.target_format)
+                processed_audio, sample_rate, output_path, request.target_format
+            )
 
             if not success:
-                return AudioProcessingResult(
-                    success=False, error="Failed to save processed audio"
-                )
+                return AudioProcessingResult(success=False, error="Failed to save processed audio")
 
             # Analyze processed audio
             processed_metadata = self.analyzer.analyze_audio(output_path)
 
             # Calculate quality score
-            quality_score = self._calculate_quality_score(
-                original_metadata, processed_metadata
-            )
+            quality_score = self._calculate_quality_score(original_metadata, processed_metadata)
 
             processing_time = (datetime.now() - start_time).total_seconds()
 
             return AudioProcessingResult(
                 success=True,
@@ -528,26 +500,22 @@
             return AudioProcessingResult(
                 success=False, error=str(e), processing_time=processing_time
             )
 
     def _save_audio(
-            self,
-            audio_data: Any,
-            sample_rate: int,
-            output_path: str,
-            format: AudioFormat) -> bool:
+        self, audio_data: Any, sample_rate: int, output_path: str, format: AudioFormat
+    ) -> bool:
         """Save processed audio to file"""
         try:
             if AudioSegment is not None and np is not None:
                 # Convert numpy array to AudioSegment
                 audio_int16 = (audio_data * 32767).astype(np.int16)
                 audio_segment = AudioSegment(
                     audio_int16.tobytes(),
                     frame_rate=sample_rate,
                     sample_width=2,
-                    channels=1 if len(
-                        audio_data.shape) == 1 else audio_data.shape[0],
+                    channels=1 if len(audio_data.shape) == 1 else audio_data.shape[0],
                 )
 
                 # Export in requested format
                 audio_segment.export(output_path, format=format.value)
                 return True
@@ -564,13 +532,12 @@
         except Exception as e:
             self.logger.error(f"Audio save failed: {e}")
             return False
 
     def _calculate_quality_score(
-            self,
-            original: Optional[AudioMetadata],
-            processed: Optional[AudioMetadata]) -> float:
+        self, original: Optional[AudioMetadata], processed: Optional[AudioMetadata]
+    ) -> float:
         """Calculate quality score for processed audio"""
         try:
             if not original or not processed:
                 return 50.0
 
@@ -617,42 +584,21 @@
         enhancement_level: str = "medium",
     ) -> AudioProcessingResult:
         """Enhance audio with automatic processing chain"""
         # Define enhancement presets
         presets = {
-            "light": [
-                ProcessingParameters(
-                    ProcessingType.NORMALIZATION,
-                    intensity=0.8)],
+            "light": [ProcessingParameters(ProcessingType.NORMALIZATION, intensity=0.8)],
             "medium": [
-                ProcessingParameters(
-                    ProcessingType.NOISE_REDUCTION,
-                    intensity=0.6),
-                ProcessingParameters(
-                    ProcessingType.COMPRESSION,
-                    threshold=-15.0,
-                    ratio=3.0),
-                ProcessingParameters(
-                    ProcessingType.NORMALIZATION,
-                    intensity=1.0),
+                ProcessingParameters(ProcessingType.NOISE_REDUCTION, intensity=0.6),
+                ProcessingParameters(ProcessingType.COMPRESSION, threshold=-15.0, ratio=3.0),
+                ProcessingParameters(ProcessingType.NORMALIZATION, intensity=1.0),
             ],
             "heavy": [
-                ProcessingParameters(
-                    ProcessingType.NOISE_REDUCTION,
-                    intensity=0.8),
-                ProcessingParameters(
-                    ProcessingType.COMPRESSION,
-                    threshold=-12.0,
-                    ratio=4.0),
-                ProcessingParameters(
-                    ProcessingType.EQ,
-                    frequency_range=(
-                        100.0,
-                        8000.0)),
-                ProcessingParameters(
-                    ProcessingType.NORMALIZATION,
-                    intensity=1.0),
+                ProcessingParameters(ProcessingType.NOISE_REDUCTION, intensity=0.8),
+                ProcessingParameters(ProcessingType.COMPRESSION, threshold=-12.0, ratio=4.0),
+                ProcessingParameters(ProcessingType.EQ, frequency_range=(100.0, 8000.0)),
+                ProcessingParameters(ProcessingType.NORMALIZATION, intensity=1.0),
             ],
         }
 
         processing_chain = presets.get(enhancement_level, presets["medium"])
 
@@ -675,13 +621,11 @@
             ProcessingParameters(
                 ProcessingType.EQ,
                 frequency_range=(20.0, 20000.0),
                 custom_params={"gain": 1.0, "q_factor": 0.7},
             ),
-            ProcessingParameters(
-                ProcessingType.COMPRESSION, threshold=-18.0, ratio=2.5
-            ),
+            ProcessingParameters(ProcessingType.COMPRESSION, threshold=-18.0, ratio=2.5),
             ProcessingParameters(
                 ProcessingType.NORMALIZATION,
                 custom_params={"target_level": target_lufs},
             ),
         ]
@@ -718,14 +662,12 @@
     processor = AudioPostProduction()
     return await processor.enhance_audio(input_path, output_path, enhancement_level)
 
 
 async def master_audio(
-        input_path: str,
-        output_path: Optional[str] = None,
-        target_lufs: float = -
-        14.0) -> AudioProcessingResult:
+    input_path: str, output_path: Optional[str] = None, target_lufs: float = -14.0
+) -> AudioProcessingResult:
     """Convenience function for audio mastering"""
     processor = AudioPostProduction()
     return await processor.master_audio(input_path, output_path, target_lufs)
 
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/audio_post_production.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/ai_video_editing.py	2025-09-21 01:31:25.570368+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/ai_video_editing.py	2025-09-21 05:50:22.656289+00:00
@@ -119,12 +119,11 @@
 
     def __init__(self):
         self.logger = logging.getLogger(__name__)
         self.threshold = 0.3  # Scene change threshold
 
-    async def detect_scenes(
-            self, video_path: str) -> list[tuple[float, float]]:
+    async def detect_scenes(self, video_path: str) -> list[tuple[float, float]]:
         """Detect scene boundaries in video"""
         try:
             if not cv2:
                 # Fallback to basic time-based scenes
                 return await self._detect_time_based_scenes(video_path)
@@ -167,13 +166,11 @@
 
         except Exception as e:
             self.logger.error(f"Scene detection failed: {e}")
             return await self._detect_time_based_scenes(video_path)
 
-    async def _detect_time_based_scenes(
-        self, video_path: str
-    ) -> list[tuple[float, float]]:
+    async def _detect_time_based_scenes(self, video_path: str) -> list[tuple[float, float]]:
         """Fallback scene detection based on time intervals"""
         try:
             # Get video duration using ffprobe
             cmd = [
                 "ffprobe",
@@ -239,15 +236,12 @@
         except Exception as e:
             self.logger.error(f"Failed to get video info: {e}")
             return {"error": str(e)}
 
     async def trim_video(
-            self,
-            input_path: str,
-            start_time: float,
-            end_time: float,
-            output_path: str) -> EditResult:
+        self, input_path: str, start_time: float, end_time: float, output_path: str
+    ) -> EditResult:
         """Trim video to specified time range"""
         try:
             duration = end_time - start_time
 
             cmd = [
@@ -266,17 +260,14 @@
                 "-y",
             ]
 
             start_process_time = datetime.now()
             result = subprocess.run(cmd, capture_output=True, text=True)
-            processing_time = (
-                datetime.now() -
-                start_process_time).total_seconds()
+            processing_time = (datetime.now() - start_process_time).total_seconds()
 
             if result.returncode == 0:
-                file_size = (os.path.getsize(output_path)
-                             if os.path.exists(output_path) else 0)
+                file_size = os.path.getsize(output_path) if os.path.exists(output_path) else 0
 
                 return EditResult(
                     success=True,
                     output_path=output_path,
                     duration=duration,
@@ -292,13 +283,11 @@
 
         except Exception as e:
             self.logger.error(f"Video trimming failed: {e}")
             return EditResult(success=False, error=str(e))
 
-    async def merge_videos(
-        self, video_paths: list[str], output_path: str
-    ) -> EditResult:
+    async def merge_videos(self, video_paths: list[str], output_path: str) -> EditResult:
         """Merge multiple videos into one"""
         list_file = None
         try:
             # Create temporary file list for ffmpeg
             list_file = os.path.join(self.temp_dir, "merge_list.txt")
@@ -324,12 +313,11 @@
             start_time = datetime.now()
             result = subprocess.run(cmd, capture_output=True, text=True)
             processing_time = (datetime.now() - start_time).total_seconds()
 
             if result.returncode == 0:
-                file_size = (os.path.getsize(output_path)
-                             if os.path.exists(output_path) else 0)
+                file_size = os.path.getsize(output_path) if os.path.exists(output_path) else 0
 
                 return EditResult(
                     success=True,
                     output_path=output_path,
                     file_size=file_size,
@@ -391,12 +379,11 @@
             start_time = datetime.now()
             result = subprocess.run(cmd, capture_output=True, text=True)
             processing_time = (datetime.now() - start_time).total_seconds()
 
             if result.returncode == 0:
-                file_size = (os.path.getsize(output_path)
-                             if os.path.exists(output_path) else 0)
+                file_size = os.path.getsize(output_path) if os.path.exists(output_path) else 0
 
                 return EditResult(
                     success=True,
                     output_path=output_path,
                     file_size=file_size,
@@ -446,21 +433,18 @@
             start_time = datetime.now()
             result = subprocess.run(cmd, capture_output=True, text=True)
             processing_time = (datetime.now() - start_time).total_seconds()
 
             if result.returncode == 0:
-                file_size = (os.path.getsize(output_path)
-                             if os.path.exists(output_path) else 0)
+                file_size = os.path.getsize(output_path) if os.path.exists(output_path) else 0
 
                 return EditResult(
                     success=True,
                     output_path=output_path,
                     file_size=file_size,
                     processing_time=processing_time,
-                    metadata={
-                        "effect": effect_type.value,
-                        "parameters": parameters},
+                    metadata={"effect": effect_type.value, "parameters": parameters},
                 )
 
             return EditResult(
                 success=False,
                 error=f"Effect application failed: {result.stderr}",
@@ -469,13 +453,11 @@
 
         except Exception as e:
             self.logger.error(f"Effect processing failed: {e}")
             return EditResult(success=False, error=str(e))
 
-    def _build_filter_string(
-        self, effect_type: EffectType, parameters: dict[str, Any]
-    ) -> str:
+    def _build_filter_string(self, effect_type: EffectType, parameters: dict[str, Any]) -> str:
         """Build FFmpeg filter string for effect"""
         if effect_type == EffectType.BLUR:
             radius = parameters.get("radius", 5)
             return f"boxblur={radius}:{radius}"
 
@@ -537,13 +519,11 @@
 
         except Exception as e:
             self.logger.error(f"Video analysis failed: {e}")
             return {"error": str(e)}
 
-    async def auto_edit_video(
-        self, video_path: str, style: str = "dynamic"
-    ) -> EditResult:
+    async def auto_edit_video(self, video_path: str, style: str = "dynamic") -> EditResult:
         """Automatically edit video based on AI analysis"""
         try:
             # Analyze video first
             analysis = await self.analyze_video(video_path)
 
@@ -559,13 +539,11 @@
             output_path = os.path.join(
                 self.temp_dir,
                 f"auto_edited_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4",
             )
 
-            result = await self._execute_edit_plan(
-                video_path, edit_operations, output_path
-            )
+            result = await self._execute_edit_plan(video_path, edit_operations, output_path)
 
             return result
 
         except Exception as e:
             self.logger.error(f"Auto video editing failed: {e}")
@@ -585,15 +563,14 @@
                 if duration > 5.0:  # Trim long scenes
                     new_duration = min(duration * 0.7, 8.0)
                     operations.append(
                         EditOperation(
                             operation_type=VideoEditType.TRIM,
-                            parameters={
-                                "start": start,
-                                "duration": new_duration},
+                            parameters={"start": start, "duration": new_duration},
                             priority=1,
-                        ))
+                        )
+                    )
 
                 # Add transition between scenes
                 if i < len(scenes) - 1:
                     operations.append(
                         EditOperation(
@@ -610,23 +587,20 @@
             # Add cinematic effects
             for start, end in scenes:
                 operations.append(
                     EditOperation(
                         operation_type=VideoEditType.EFFECT,
-                        parameters={
-                            "effect": EffectType.CONTRAST,
-                            "value": 1.2},
+                        parameters={"effect": EffectType.CONTRAST, "value": 1.2},
                         priority=1,
-                    ))
+                    )
+                )
 
         return operations
 
     async def _execute_edit_plan(
-            self,
-            input_path: str,
-            operations: list[EditOperation],
-            output_path: str) -> EditResult:
+        self, input_path: str, operations: list[EditOperation], output_path: str
+    ) -> EditResult:
         """Execute the generated edit plan"""
         try:
             current_path = input_path
             temp_files = []
 
@@ -678,12 +652,11 @@
             # Clean up temp files
             for temp_file in temp_files:
                 if os.path.exists(temp_file):
                     os.remove(temp_file)
 
-            file_size = (os.path.getsize(output_path)
-                         if os.path.exists(output_path) else 0)
+            file_size = os.path.getsize(output_path) if os.path.exists(output_path) else 0
 
             return EditResult(
                 success=True,
                 output_path=output_path,
                 file_size=file_size,
@@ -706,13 +679,11 @@
 
 
 # Convenience functions
 
 
-async def edit_video_auto(
-        video_path: str,
-        style: str = "dynamic") -> EditResult:
+async def edit_video_auto(video_path: str, style: str = "dynamic") -> EditResult:
     """Convenience function for automatic video editing"""
     editor = AIVideoEditor()
     try:
         return await editor.auto_edit_video(video_path, style)
     finally:
@@ -725,13 +696,11 @@
     """Convenience function for video trimming"""
     processor = VideoProcessor()
     return await processor.trim_video(input_path, start_time, end_time, output_path)
 
 
-async def merge_video_clips(
-        video_paths: list[str],
-        output_path: str) -> EditResult:
+async def merge_video_clips(video_paths: list[str], output_path: str) -> EditResult:
     """Convenience function for video merging"""
     processor = VideoProcessor()
     return await processor.merge_videos(video_paths, output_path)
 
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/content/ai_video_editing.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/core/database.py	2025-09-21 01:31:23.170029+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/core/database.py	2025-09-21 05:50:24.635159+00:00
@@ -198,13 +198,11 @@
 
             if self.db_type == "sqlite":
                 conn.executescript(schema_sql)
             else:
                 # For PostgreSQL, execute statements individually
-                statements = [
-                    stmt.strip() for stmt in schema_sql.split(";") if stmt.strip()
-                ]
+                statements = [stmt.strip() for stmt in schema_sql.split(";") if stmt.strip()]
                 for stmt in statements:
                     if stmt and not stmt.startswith("--"):
                         conn.execute(stmt)
         else:
             # Fallback basic schema
@@ -317,27 +315,22 @@
             logger.error(f"Session error: {e}")
             raise DatabaseError(f"Session operation failed: {e}")
         finally:
             session.close()
 
-    def execute_query(
-        self, query: str, params: Optional[tuple] = None
-    ) -> list[dict[str, Any]]:
+    def execute_query(self, query: str, params: Optional[tuple] = None) -> list[dict[str, Any]]:
         """Execute a SELECT query and return results"""
         with self.get_connection() as conn:
             if self.db_type == "postgresql":
                 cursor = conn.cursor()
                 cursor.execute(query, params or ())
                 return [dict(row) for row in cursor.fetchall()]
             else:
                 cursor = conn.execute(query, params or ())
                 return [dict(row) for row in cursor.fetchall()]
 
-    def execute_update(
-            self,
-            query: str,
-            params: Optional[tuple] = None) -> int:
+    def execute_update(self, query: str, params: Optional[tuple] = None) -> int:
         """Execute an INSERT/UPDATE/DELETE query and return affected rows"""
         with self.get_connection() as conn:
             if self.db_type == "postgresql":
                 cursor = conn.cursor()
                 cursor.execute(query, params or ())
@@ -348,13 +341,11 @@
 
     def execute_script(self, script: str) -> None:
         """Execute a SQL script"""
         with self.get_connection() as conn:
             if self.db_type == "postgresql":
-                statements = [
-                    stmt.strip() for stmt in script.split(";") if stmt.strip()
-                ]
+                statements = [stmt.strip() for stmt in script.split(";") if stmt.strip()]
                 cursor = conn.cursor()
                 for stmt in statements:
                     if stmt and not stmt.startswith("--"):
                         cursor.execute(stmt)
             else:
@@ -415,12 +406,11 @@
 def get_db_session():
     """Get SQLAlchemy session context manager"""
     return db_manager.get_session()
 
 
-def execute_query(
-        query: str, params: Optional[tuple] = None) -> list[dict[str, Any]]:
+def execute_query(query: str, params: Optional[tuple] = None) -> list[dict[str, Any]]:
     """Execute a SELECT query"""
     return db_manager.execute_query(query, params)
 
 
 def execute_update(query: str, params: Optional[tuple] = None) -> int:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/core/database.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/database_setup.py	2025-09-21 01:31:22.136765+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/database_setup.py	2025-09-21 05:51:03.277923+00:00
@@ -176,13 +176,11 @@
             bool: True if reset successful, False otherwise
         """
         try:
             with sqlite3.connect(str(self.db_path)) as conn:
                 # Get all table names
-                cursor = conn.execute(
-                    "SELECT name FROM sqlite_master WHERE type='table'"
-                )
+                cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
                 tables = [row[0] for row in cursor.fetchall()]
 
                 # Drop all tables
                 for table in tables:
                     conn.execute(f"DROP TABLE IF EXISTS {table}")
@@ -209,19 +207,15 @@
             with sqlite3.connect(str(self.db_path)) as conn:
                 # Test basic connectivity
                 conn.execute("SELECT 1")
 
                 # Check if core tables exist
-                cursor = conn.execute(
-                    "SELECT name FROM sqlite_master WHERE type='table'"
-                )
+                cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
                 tables = [row[0] for row in cursor.fetchall()]
 
-                required_tables = [
-                    "task_queue", "api_registry", "system_status"]
-                missing_tables = [
-                    t for t in required_tables if t not in tables]
+                required_tables = ["task_queue", "api_registry", "system_status"]
+                missing_tables = [t for t in required_tables if t not in tables]
 
                 return {
                     "status": "healthy" if not missing_tables else "degraded",
                     "database_path": str(self.db_path),
                     "tables_found": len(tables),
@@ -249,12 +243,11 @@
     """Reset database by dropping and recreating all tables"""
     db_setup = DatabaseSetup(database_url)
     return db_setup.reset_database()
 
 
-def database_health_check(
-        database_url: Optional[str] = None) -> dict[str, Any]:
+def database_health_check(database_url: Optional[str] = None) -> dict[str, Any]:
     """Perform database health check"""
     db_setup = DatabaseSetup(database_url)
     return db_setup.health_check()
 
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/database_setup.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/database_manager.py	2025-09-21 01:31:21.890327+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/database_manager.py	2025-09-21 05:51:03.391855+00:00
@@ -11,10 +11,11 @@
 from typing import List, Dict, Any, Optional
 
 # Use sqlite3 for synchronous operations if aiosqlite is not available
 try:
     import aiosqlite
+
     async_db_available = True
 except ImportError:
     aiosqlite = None  # type: ignore
     async_db_available = False
 
@@ -30,69 +31,69 @@
             "quality_metrics.db",
             "performance_metrics.db",
             "automation_performance.db",
             "runtime.db",
             "model_generator.db",
-            "ollama_cache.db"
-        ],
-        "description": "Databases required for high-speed video creation and avatar generation"
+            "ollama_cache.db",
+        ],
+        "description": "Databases required for high-speed video creation and avatar generation",
     },
     "cloud_databases": {
         # Databases that can be moved to cloud storage
         "analytics": [
             "analytics_dashboard.db",
             "analytics.db",
             "performance_analytics.db",
             "engagement_tracking.sqlite",
-            "youtube_engagement.sqlite"
+            "youtube_engagement.sqlite",
         ],
         "business": [
             "marketing_monetization.sqlite",
             "marketing.db",
             "monetization.db",
             "revenue_streams.db",
             "cost_tracking.db",
-            "promotion_campaigns.sqlite"
+            "promotion_campaigns.sqlite",
         ],
         "content_management": [
             "rss_watcher.db",
             "youtube_automation.sqlite",
             "channels.db",
-            "collaboration_outreach.db"
+            "collaboration_outreach.db",
         ],
         "system_admin": [
             "error_tracking.db",
             "example_error_tracking.db",
             "scan_results.sqlite",
             "api_integration.db",
-            "routellm_usage.db"
+            "routellm_usage.db",
         ],
         "development": [
             "test_comprehensive.db",
             "test_fraud.db",
             "test_fraud2.db",
             "test_fraud3.db",
             "test_results.db",
-            "test.db"
+            "test.db",
         ],
         "backups": [
             "right_perspective_backup_20250902_012246.db",
             "base44.sqlite",
-            "trae_production.db"
-        ],
-        "description": "Databases suitable for cloud storage - non-performance critical"
+            "trae_production.db",
+        ],
+        "description": "Databases suitable for cloud storage - non-performance critical",
     },
     "hybrid_databases": {
         # Databases that may need evaluation based on usage patterns
         "evaluate_case_by_case": [
             "intelligence.db",
             "master_orchestrator.db",
             "trae_ai.db",
-            "content_agent.db"
-        ],
-        "description": "Databases requiring evaluation based on access patterns and usage frequency"
-    }
+            "content_agent.db",
+        ],
+        "description": "Databases requiring evaluation based on access patterns and usage frequency",
+    },
 }
 
 
 class DatabaseStorageManager:
     """Manages database storage strategy for local vs cloud deployment"""
@@ -119,27 +120,29 @@
         """Get storage recommendation for a database"""
         if self.is_performance_critical(db_name):
             return {
                 "recommendation": "local",
                 "reason": "Performance-critical for video/avatar creation",
-                "category": "performance_critical"
+                "category": "performance_critical",
             }
         elif self.can_move_to_cloud(db_name):
             return {
                 "recommendation": "cloud",
                 "reason": "Non-performance critical, suitable for cloud storage",
-                "category": self._get_cloud_category(db_name)}
+                "category": self._get_cloud_category(db_name),
+            }
         elif self.requires_evaluation(db_name):
             return {
                 "recommendation": "evaluate",
                 "reason": "Requires case-by-case evaluation based on usage patterns",
-                "category": "hybrid"}
+                "category": "hybrid",
+            }
         else:
             return {
                 "recommendation": "unknown",
                 "reason": "Database not found in configuration",
-                "category": "uncategorized"
+                "category": "uncategorized",
             }
 
     def _get_cloud_category(self, db_name: str) -> str:
         """Get the cloud storage category for a database"""
         for category, dbs in self.config["cloud_databases"].items():
@@ -148,23 +151,22 @@
         return "unknown"
 
     def generate_migration_plan(self) -> Dict[str, Any]:
         """Generate a comprehensive migration plan"""
         plan = {
-            "local_count": len(
-                self.config["local_databases"]["performance_critical"]),
+            "local_count": len(self.config["local_databases"]["performance_critical"]),
             "cloud_count": sum(
-                len(dbs) for dbs in self.config["cloud_databases"].values() if isinstance(
-                    dbs,
-                    list)),
-            "evaluation_count": len(
-                self.config["hybrid_databases"]["evaluate_case_by_case"]),
+                len(dbs) for dbs in self.config["cloud_databases"].values() if isinstance(dbs, list)
+            ),
+            "evaluation_count": len(self.config["hybrid_databases"]["evaluate_case_by_case"]),
             "migration_strategy": {
                 "phase_1": "Keep performance-critical databases local",
                 "phase_2": "Migrate analytics and business databases to cloud",
-                "phase_3": "Evaluate hybrid databases based on usage patterns"},
-            "estimated_storage_savings": "~80% reduction in local storage requirements"}
+                "phase_3": "Evaluate hybrid databases based on usage patterns",
+            },
+            "estimated_storage_savings": "~80% reduction in local storage requirements",
+        }
         return plan
 
 
 class DatabaseManager:
     """Manages database connections and operations"""
@@ -252,13 +254,11 @@
                 updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
             )
         """
         )
 
-    async def execute_query(
-        self, query: str, params: tuple[Any, ...] = ()
-    ) -> list[dict[str, Any]]:
+    async def execute_query(self, query: str, params: tuple[Any, ...] = ()) -> list[dict[str, Any]]:
         """Execute a SELECT query and return results"""
         try:
             if async_db_available and aiosqlite:
                 async with aiosqlite.connect(self.db_path) as db:
                     db.row_factory = aiosqlite.Row
@@ -273,12 +273,11 @@
                     return [dict(row) for row in rows]
         except Exception as e:
             logger.error(f"Query execution failed: {e}")
             raise
 
-    async def execute_update(
-            self, query: str, params: tuple[Any, ...] = ()) -> int:
+    async def execute_update(self, query: str, params: tuple[Any, ...] = ()) -> int:
         """Execute an INSERT, UPDATE, or DELETE query"""
         try:
             if async_db_available and aiosqlite:
                 async with aiosqlite.connect(self.db_path) as db:
                     cursor = await db.execute(query, params)
@@ -351,44 +350,30 @@
         """
         )
 
     async def get_user_by_id(self, user_id: int) -> Optional[dict[str, Any]]:
         """Get user by ID"""
-        results = await self.execute_query(
-            "SELECT * FROM users WHERE id = ?", (user_id,)
-        )
+        results = await self.execute_query("SELECT * FROM users WHERE id = ?", (user_id,))
         return results[0] if results else None
 
-    async def get_user_by_username(
-            self, username: str) -> Optional[dict[str, Any]]:
+    async def get_user_by_username(self, username: str) -> Optional[dict[str, Any]]:
         """Get user by username"""
-        results = await self.execute_query(
-            "SELECT * FROM users WHERE username = ?", (username,)
-        )
+        results = await self.execute_query("SELECT * FROM users WHERE username = ?", (username,))
         return results[0] if results else None
 
-    async def create_user(
-            self,
-            username: str,
-            email: str,
-            password_hash: str) -> int:
+    async def create_user(self, username: str, email: str, password_hash: str) -> int:
         """Create a new user"""
         await self.execute_update(
             "INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)",
             (username, email, password_hash),
         )
-        results = await self.execute_query(
-            "SELECT id FROM users WHERE username = ?", (username,)
-        )
+        results = await self.execute_query("SELECT id FROM users WHERE username = ?", (username,))
         return results[0]["id"] if results else 0
 
-    async def create_session(self,
-                             session_id: str,
-                             user_id: int,
-                             data: dict[str,
-                                        Any],
-                             expires_at: datetime) -> bool:
+    async def create_session(
+        self, session_id: str, user_id: int, data: dict[str, Any], expires_at: datetime
+    ) -> bool:
         """Create a new session"""
         try:
             await self.execute_update(
                 "INSERT INTO sessions (id, user_id, data, expires_at) VALUES (?, ?, ?, ?)",
                 (session_id, user_id, json.dumps(data), expires_at),
@@ -403,20 +388,17 @@
             "SELECT * FROM sessions WHERE id = ? AND expires_at > CURRENT_TIMESTAMP",
             (session_id,),
         )
         if results:
             session = results[0]
-            session["data"] = json.loads(
-                session["data"]) if session["data"] else {}
+            session["data"] = json.loads(session["data"]) if session["data"] else {}
             return session
         return None
 
     async def delete_session(self, session_id: str) -> bool:
         """Delete a session"""
-        rowcount = await self.execute_update(
-            "DELETE FROM sessions WHERE id = ?", (session_id,)
-        )
+        rowcount = await self.execute_update("DELETE FROM sessions WHERE id = ?", (session_id,))
         return rowcount > 0
 
     async def create_task(
         self,
         user_id: int,
@@ -449,13 +431,11 @@
         )
         return rowcount > 0
 
     async def get_setting(self, key: str) -> Optional[str]:
         """Get a setting value"""
-        results = await self.execute_query(
-            "SELECT value FROM settings WHERE key = ?", (key,)
-        )
+        results = await self.execute_query("SELECT value FROM settings WHERE key = ?", (key,))
         return results[0]["value"] if results else None
 
     async def set_setting(self, key: str, value: str) -> bool:
         """Set a setting value"""
         try:
@@ -467,30 +447,22 @@
         except Exception:
             return False
 
     async def cleanup_expired_sessions(self):
         """Remove expired sessions"""
-        await self.execute_update(
-            "DELETE FROM sessions WHERE expires_at <= CURRENT_TIMESTAMP"
-        )
+        await self.execute_update("DELETE FROM sessions WHERE expires_at <= CURRENT_TIMESTAMP")
 
     async def get_status(self) -> dict[str, Any]:
         """Get database status"""
         try:
             # Test connection
             await self.execute_query("SELECT 1")
 
             # Get table counts
-            users_count = await self.execute_query(
-                "SELECT COUNT(*) as count FROM users"
-            )
-            sessions_count = await self.execute_query(
-                "SELECT COUNT(*) as count FROM sessions"
-            )
-            tasks_count = await self.execute_query(
-                "SELECT COUNT(*) as count FROM tasks"
-            )
+            users_count = await self.execute_query("SELECT COUNT(*) as count FROM users")
+            sessions_count = await self.execute_query("SELECT COUNT(*) as count FROM sessions")
+            tasks_count = await self.execute_query("SELECT COUNT(*) as count FROM tasks")
 
             return {
                 "status": "healthy",
                 "database_path": self.db_path,
                 "tables": {
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/database_manager.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/core/secret_store_bridge.py	2025-09-21 01:31:23.062992+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/core/secret_store_bridge.py	2025-09-21 05:51:03.531122+00:00
@@ -39,16 +39,14 @@
                             key, value = line.split("=", 1)
                             self.secrets[key.strip()] = value.strip()
             except Exception as e:
                 logger.warning(
                     f"Could not load secrets from {
-                        self.config_path}: {e}")
+                        self.config_path}: {e}"
+                )
 
-    def get_secret(
-            self,
-            key: str,
-            default: Optional[str] = None) -> Optional[str]:
+    def get_secret(self, key: str, default: Optional[str] = None) -> Optional[str]:
         """Get a secret value by key.
 
         Args:
             key: The secret key to retrieve
             default: Default value if key not found
@@ -93,11 +91,10 @@
             required_keys: List of required secret keys
 
         Returns:
             True if all required secrets are present
         """
-        missing_keys = [
-            key for key in required_keys if key not in self.secrets]
+        missing_keys = [key for key in required_keys if key not in self.secrets]
         if missing_keys:
             logger.error(f"Missing required secrets: {missing_keys}")
             return False
         return True
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/core/secret_store_bridge.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/health_monitor.py	2025-09-21 01:31:21.976934+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/health_monitor.py	2025-09-21 05:51:22.294543+00:00
@@ -169,13 +169,11 @@
         start_time = time.time()
 
         try:
             # Check external APIs or services
             async with aiohttp.ClientSession() as session:
-                async with session.get(
-                    "https://httpbin.org/status/200", timeout=5
-                ) as response:
+                async with session.get("https://httpbin.org/status/200", timeout=5) as response:
                     if response.status == 200:
                         status = HealthStatus.HEALTHY
                         message = "External services accessible"
                     else:
                         status = HealthStatus.WARNING
@@ -255,11 +253,11 @@
 
             self.metrics_history.append(metrics)
 
             # Keep only recent metrics
             if len(self.metrics_history) > self.max_history:
-                self.metrics_history = self.metrics_history[-self.max_history:]
+                self.metrics_history = self.metrics_history[-self.max_history :]
 
         except Exception as e:
             self.logger.error(f"Failed to collect system metrics: {e}")
 
     def get_overall_status(self) -> HealthStatus:
@@ -294,22 +292,19 @@
                     "metadata": check.metadata,
                 }
                 for name, check in self.checks.items()
             },
             "metrics": {
-                "current": (
-                    self.metrics_history[-1].__dict__ if self.metrics_history else None
-                ),
+                "current": (self.metrics_history[-1].__dict__ if self.metrics_history else None),
                 "history_count": len(self.metrics_history),
             },
         }
 
     def get_metrics_summary(self, minutes: int = 10) -> dict[str, Any]:
         """Get metrics summary for the specified time period."""
         cutoff_time = datetime.now() - timedelta(minutes=minutes)
-        recent_metrics = [
-            m for m in self.metrics_history if m.timestamp >= cutoff_time]
+        recent_metrics = [m for m in self.metrics_history if m.timestamp >= cutoff_time]
 
         if not recent_metrics:
             return {"error": "No metrics available for the specified period"}
 
         cpu_values = [m.cpu_percent for m in recent_metrics]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/health_monitor.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/engines/hypocrisy_engine.py	2025-09-21 01:31:28.138722+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/engines/hypocrisy_engine.py	2025-09-21 05:51:22.678460+00:00
@@ -36,28 +36,23 @@
             "in the past",
             "going forward",
             "historically",
         ]
 
-    def analyze_text(
-        self, text: str, context: Optional[dict[str, Any]] = None
-    ) -> dict[str, Any]:
+    def analyze_text(self, text: str, context: Optional[dict[str, Any]] = None) -> dict[str, Any]:
         """Analyze text for hypocrisy patterns."""
         try:
             if not text or not isinstance(text, str):
                 return self._create_empty_result("Invalid input text")
 
             # Clean and normalize text
             normalized_text = self._normalize_text(text)
 
             # Perform various analyses
-            contradiction_analysis = self._detect_contradictions(
-                normalized_text)
-            temporal_analysis = self._analyze_temporal_inconsistencies(
-                normalized_text)
-            sentiment_analysis = self._analyze_sentiment_shifts(
-                normalized_text)
+            contradiction_analysis = self._detect_contradictions(normalized_text)
+            temporal_analysis = self._analyze_temporal_inconsistencies(normalized_text)
+            sentiment_analysis = self._analyze_sentiment_shifts(normalized_text)
 
             # Calculate overall hypocrisy score
             hypocrisy_score = self._calculate_hypocrisy_score(
                 contradiction_analysis, temporal_analysis, sentiment_analysis
             )
@@ -104,14 +99,12 @@
             # Split text into sentences
             sentences = re.split(r"[.!?]+", text)
 
             # Check for contradiction patterns
             for i, sentence1 in enumerate(sentences):
-                for j, sentence2 in enumerate(sentences[i + 1:], i + 1):
-                    contradiction = self._check_sentence_contradiction(
-                        sentence1, sentence2
-                    )
+                for j, sentence2 in enumerate(sentences[i + 1 :], i + 1):
+                    contradiction = self._check_sentence_contradiction(sentence1, sentence2)
                     if contradiction:
                         contradictions.append(
                             {
                                 "sentence1": sentence1.strip(),
                                 "sentence2": sentence2.strip(),
@@ -128,15 +121,11 @@
                 "severity": self._assess_contradiction_severity(contradictions),
             }
 
         except Exception as e:
             logger.error(f"Error detecting contradictions: {e}")
-            return {
-                "found": False,
-                "count": 0,
-                "contradictions": [],
-                "error": str(e)}
+            return {"found": False, "count": 0, "contradictions": [], "error": str(e)}
 
     def _check_sentence_contradiction(
         self, sentence1: str, sentence2: str
     ) -> Optional[dict[str, Any]]:
         """Check if two sentences contradict each other."""
@@ -149,57 +138,34 @@
             if self._contains_opposite_sentiments(sentence1, sentence2):
                 return {"type": "sentiment_opposition", "confidence": 0.6}
 
             # Check for contradiction patterns
             for pattern1, pattern2 in self.contradiction_patterns:
-                if re.search(
-                        pattern1,
-                        sentence1) and re.search(
-                        pattern2,
-                        sentence2):
+                if re.search(pattern1, sentence1) and re.search(pattern2, sentence2):
                     return {"type": "pattern_contradiction", "confidence": 0.7}
 
             return None
 
         except Exception:
             return None
 
     def _contains_negation_pair(self, sentence1: str, sentence2: str) -> bool:
         """Check if sentences contain negation pairs."""
-        negation_words = [
-            "not",
-            "never",
-            "no",
-            "don't",
-            "won't",
-            "can't",
-            "shouldn't"]
-        affirmation_words = [
-            "always",
-            "yes",
-            "do",
-            "will",
-            "can",
-            "should",
-            "must"]
+        negation_words = ["not", "never", "no", "don't", "won't", "can't", "shouldn't"]
+        affirmation_words = ["always", "yes", "do", "will", "can", "should", "must"]
 
         # Simple heuristic: check for negation in one and affirmation in
         # another
         has_negation_1 = any(word in sentence1 for word in negation_words)
-        has_affirmation_2 = any(
-            word in sentence2 for word in affirmation_words)
+        has_affirmation_2 = any(word in sentence2 for word in affirmation_words)
 
         has_negation_2 = any(word in sentence2 for word in negation_words)
-        has_affirmation_1 = any(
-            word in sentence1 for word in affirmation_words)
-
-        return (has_negation_1 and has_affirmation_2) or (
-            has_negation_2 and has_affirmation_1
-        )
-
-    def _contains_opposite_sentiments(
-            self, sentence1: str, sentence2: str) -> bool:
+        has_affirmation_1 = any(word in sentence1 for word in affirmation_words)
+
+        return (has_negation_1 and has_affirmation_2) or (has_negation_2 and has_affirmation_1)
+
+    def _contains_opposite_sentiments(self, sentence1: str, sentence2: str) -> bool:
         """Check for opposite sentiment words."""
         positive_words = [
             "good",
             "great",
             "excellent",
@@ -222,24 +188,18 @@
         has_negative_2 = any(word in sentence2 for word in negative_words)
 
         has_negative_1 = any(word in sentence1 for word in negative_words)
         has_positive_2 = any(word in sentence2 for word in positive_words)
 
-        return (has_positive_1 and has_negative_2) or (
-            has_negative_1 and has_positive_2
-        )
-
-    def _assess_contradiction_severity(
-        self, contradictions: list[dict[str, Any]]
-    ) -> str:
+        return (has_positive_1 and has_negative_2) or (has_negative_1 and has_positive_2)
+
+    def _assess_contradiction_severity(self, contradictions: list[dict[str, Any]]) -> str:
         """Assess the severity of contradictions found."""
         if not contradictions:
             return "none"
 
-        high_confidence_count = sum(
-            1 for c in contradictions if c.get("confidence", 0) > 0.7
-        )
+        high_confidence_count = sum(1 for c in contradictions if c.get("confidence", 0) > 0.7)
 
         if high_confidence_count >= 3:
             return "severe"
         elif high_confidence_count >= 1:
             return "moderate"
@@ -265,30 +225,24 @@
                 for match in matches:
                     temporal_markers.append(
                         {
                             "indicator": indicator,
                             "position": match.start(),
-                            "context": text[
-                                max(0, match.start() - 20): match.end() + 20
-                            ],
+                            "context": text[max(0, match.start() - 20) : match.end() + 20],
                         }
                     )
 
             # Analyze for inconsistencies
-            inconsistencies = self._find_temporal_inconsistencies(
-                temporal_markers, text
-            )
+            inconsistencies = self._find_temporal_inconsistencies(temporal_markers, text)
 
             return {
                 "found": len(inconsistencies) > 0,
                 "count": len(inconsistencies),
                 "temporal_markers": len(temporal_markers),
                 "inconsistencies": inconsistencies[:3],  # Limit to top 3
                 "severity": (
-                    "high"
-                    if len(inconsistencies) > 2
-                    else "low" if inconsistencies else "none"
+                    "high" if len(inconsistencies) > 2 else "low" if inconsistencies else "none"
                 ),
             }
 
         except Exception as e:
             logger.error(f"Error analyzing temporal inconsistencies: {e}")
@@ -309,25 +263,22 @@
             "historically",
         ]
         present_indicators = ["today", "now", "currently"]
         future_indicators = ["tomorrow", "next week", "going forward"]
 
-        has_past = any(
-            marker["indicator"] in past_indicators for marker in markers)
-        has_present = any(
-            marker["indicator"] in present_indicators for marker in markers
-        )
-        has_future = any(
-            marker["indicator"] in future_indicators for marker in markers)
+        has_past = any(marker["indicator"] in past_indicators for marker in markers)
+        has_present = any(marker["indicator"] in present_indicators for marker in markers)
+        has_future = any(marker["indicator"] in future_indicators for marker in markers)
 
         if has_past and has_present and has_future:
             inconsistencies.append(
                 {
                     "type": "mixed_temporal_references",
                     "description": "Text contains conflicting temporal references",
                     "confidence": 0.6,
-                })
+                }
+            )
 
         return inconsistencies
 
     def _analyze_sentiment_shifts(self, text: str) -> dict[str, Any]:
         """Analyze sentiment shifts that might indicate hypocrisy."""
@@ -341,23 +292,21 @@
                     sentiment_scores.append(score)
 
             # Calculate sentiment variance
             if len(sentiment_scores) > 1:
                 mean_sentiment = sum(sentiment_scores) / len(sentiment_scores)
-                variance = sum(
-                    (score - mean_sentiment) ** 2 for score in sentiment_scores
-                ) / len(sentiment_scores)
+                variance = sum((score - mean_sentiment) ** 2 for score in sentiment_scores) / len(
+                    sentiment_scores
+                )
 
                 return {
                     "found": variance > 0.5,  # Threshold for significant shifts
                     "variance": round(variance, 3),
                     "mean_sentiment": round(mean_sentiment, 3),
                     "sentence_count": len(sentiment_scores),
                     "severity": (
-                        "high"
-                        if variance > 1.0
-                        else "moderate" if variance > 0.5 else "low"
+                        "high" if variance > 1.0 else "moderate" if variance > 0.5 else "low"
                     ),
                 }
             else:
                 return {
                     "found": False,
@@ -420,25 +369,21 @@
                     "severe": 40,
                     "moderate": 25,
                     "mild": 15,
                     "minimal": 5,
                 }
-                score += contradiction_weight.get(
-                    contradictions.get("severity", "minimal"), 0
-                )
+                score += contradiction_weight.get(contradictions.get("severity", "minimal"), 0)
 
             # Temporal inconsistency score (0-30 points)
             if temporal.get("found"):
                 temporal_weight = {"high": 30, "moderate": 20, "low": 10}
-                score += temporal_weight.get(
-                    temporal.get("severity", "low"), 0)
+                score += temporal_weight.get(temporal.get("severity", "low"), 0)
 
             # Sentiment shift score (0-30 points)
             if sentiment.get("found"):
                 sentiment_weight = {"high": 30, "moderate": 20, "low": 10}
-                score += sentiment_weight.get(
-                    sentiment.get("severity", "low"), 0)
+                score += sentiment_weight.get(sentiment.get("severity", "low"), 0)
 
             # Normalize to 0-100 scale
             return min(100.0, score)
 
         except Exception as e:
@@ -450,28 +395,34 @@
     ) -> str:
         """Generate a human-readable summary of the analysis."""
         try:
             if score < 20:
                 level = "Low"
-                description = "The text shows minimal signs of hypocrisy or contradictory statements."
+                description = (
+                    "The text shows minimal signs of hypocrisy or contradictory statements."
+                )
             elif score < 50:
                 level = "Moderate"
-                description = "The text contains some contradictory elements that may indicate inconsistency."
+                description = (
+                    "The text contains some contradictory elements that may indicate inconsistency."
+                )
             elif score < 80:
                 level = "High"
-                description = "The text shows significant contradictions and inconsistent statements."
+                description = (
+                    "The text shows significant contradictions and inconsistent statements."
+                )
             else:
                 level = "Very High"
-                description = "The text contains severe contradictions and highly inconsistent messaging."
+                description = (
+                    "The text contains severe contradictions and highly inconsistent messaging."
+                )
 
             details = []
             if contradictions.get("found"):
-                details.append(
-                    f"{contradictions['count']} contradiction(s) detected")
+                details.append(f"{contradictions['count']} contradiction(s) detected")
             if temporal.get("found"):
-                details.append(
-                    f"{temporal['count']} temporal inconsistency(ies) found")
+                details.append(f"{temporal['count']} temporal inconsistency(ies) found")
 
             summary = f"{level} hypocrisy level (score: {
                 score:.1f}/100). {description}"
             if details:
                 summary += f" Specific issues: {', '.join(details)}."
@@ -515,13 +466,11 @@
 
     def __init__(self):
         self.analyzer = HypocrisyAnalyzer()
         self.cache = {}  # Simple in-memory cache
 
-    def analyze(
-        self, text: str, context: Optional[dict[str, Any]] = None
-    ) -> dict[str, Any]:
+    def analyze(self, text: str, context: Optional[dict[str, Any]] = None) -> dict[str, Any]:
         """Analyze text for hypocrisy patterns."""
         try:
             # Create cache key
             cache_key = hash(text + str(context or {}))
 
@@ -582,13 +531,11 @@
 engine = HypocrisyEngine()
 
 # Convenience functions
 
 
-def analyze_hypocrisy(
-    text: str, context: Optional[dict[str, Any]] = None
-) -> dict[str, Any]:
+def analyze_hypocrisy(text: str, context: Optional[dict[str, Any]] = None) -> dict[str, Any]:
     """Convenience function to analyze text for hypocrisy."""
     return engine.analyze(text, context)
 
 
 def batch_analyze_hypocrisy(
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/engines/hypocrisy_engine.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/integrations/mcp_protocol.py	2025-09-21 01:31:27.035642+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/integrations/mcp_protocol.py	2025-09-21 05:51:56.050447+00:00
@@ -244,14 +244,12 @@
 
         # Server configuration
         self.info = MCPServerInfo(
             name=name,
             version=version,
-            capabilities=capabilities or [
-                MCPCapability.TOOLS,
-                MCPCapability.RESOURCES,
-                MCPCapability.CONTEXT],
+            capabilities=capabilities
+            or [MCPCapability.TOOLS, MCPCapability.RESOURCES, MCPCapability.CONTEXT],
             description=f"TRAE.AI MCP Server - {name}",
             author="TRAE.AI System",
         )
 
         self.host = host
@@ -321,36 +319,26 @@
             await self.server.wait_closed()
         self.executor.shutdown(wait=True)
         self.logger.info("MCP Server stopped")
 
     # Message handlers
-    async def _handle_initialize(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_initialize(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle initialization request."""
         return MCPMessage(
             id=message.id,
             result={
                 "protocolVersion": "2024-11-05",
-                "capabilities": [
-                    cap.value for cap in self.info.capabilities],
-                "serverInfo": {
-                    "name": self.info.name,
-                    "version": self.info.version},
+                "capabilities": [cap.value for cap in self.info.capabilities],
+                "serverInfo": {"name": self.info.name, "version": self.info.version},
             },
         )
 
-    async def _handle_ping(
-            self,
-            client_id: str,
-            message: MCPMessage) -> MCPMessage:
+    async def _handle_ping(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle ping request."""
         return MCPMessage(id=message.id, result={"pong": True})
 
-    async def _handle_list_tools(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_list_tools(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle list tools request."""
         tools = []
         for tool in self.tools.values():
             tool_data = {
                 "name": tool.name,
@@ -361,23 +349,19 @@
                 tool_data["outputSchema"] = tool.outputSchema
             tools.append(tool_data)
 
         return MCPMessage(id=message.id, result={"tools": tools})
 
-    async def _handle_call_tool(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_call_tool(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle tool call request."""
         params = message.params or {}
         tool_name = params.get("name")
 
         if not tool_name or tool_name not in self.tools:
             return MCPMessage(
                 id=message.id,
-                error={
-                    "code": -32602,
-                    "message": f"Tool '{tool_name}' not found"},
+                error={"code": -32602, "message": f"Tool '{tool_name}' not found"},
             )
 
         tool = self.tools[tool_name]
 
         try:
@@ -385,22 +369,16 @@
                 result = await tool.handler(params.get("arguments", {}))
                 return MCPMessage(id=message.id, result=result)
             else:
                 return MCPMessage(
                     id=message.id,
-                    error={
-                        "code": -32603,
-                        "message": "Tool handler not implemented"},
+                    error={"code": -32603, "message": "Tool handler not implemented"},
                 )
         except Exception as e:
-            return MCPMessage(
-                id=message.id, error={
-                    "code": -32603, "message": str(e)})
-
-    async def _handle_list_resources(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+            return MCPMessage(id=message.id, error={"code": -32603, "message": str(e)})
+
+    async def _handle_list_resources(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle list resources request."""
         resources = []
         for resource in self.resources.values():
             resources.append(
                 {
@@ -411,23 +389,19 @@
                 }
             )
 
         return MCPMessage(id=message.id, result={"resources": resources})
 
-    async def _handle_read_resource(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_read_resource(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle read resource request."""
         params = message.params or {}
         uri = params.get("uri")
 
         if not uri or uri not in self.resources:
             return MCPMessage(
                 id=message.id,
-                error={
-                    "code": -32602,
-                    "message": f"Resource '{uri}' not found"},
+                error={"code": -32602, "message": f"Resource '{uri}' not found"},
             )
 
         resource = self.resources[uri]
 
         return MCPMessage(
@@ -445,38 +419,30 @@
                     }
                 ]
             },
         )
 
-    async def _handle_list_prompts(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_list_prompts(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle list prompts request."""
         prompts = []
         for prompt in self.prompts.values():
-            prompt_data = {
-                "name": prompt.name,
-                "description": prompt.description}
+            prompt_data = {"name": prompt.name, "description": prompt.description}
             if prompt.arguments:
                 prompt_data["arguments"] = prompt.arguments
             prompts.append(prompt_data)
 
         return MCPMessage(id=message.id, result={"prompts": prompts})
 
-    async def _handle_get_prompt(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_get_prompt(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle get prompt request."""
         params = message.params or {}
         name = params.get("name")
 
         if not name or name not in self.prompts:
             return MCPMessage(
                 id=message.id,
-                error={
-                    "code": -32602,
-                    "message": f"Prompt '{name}' not found"},
+                error={"code": -32602, "message": f"Prompt '{name}' not found"},
             )
 
         prompt = self.prompts[name]
 
         return MCPMessage(
@@ -490,13 +456,11 @@
                     }
                 ],
             },
         )
 
-    async def _handle_get_context(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_get_context(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle get context request."""
         params = message.params or {}
         context_id = params.get("id")
 
         if context_id and context_id in self.contexts:
@@ -512,48 +476,35 @@
                         "updated_at": context.updated_at.isoformat(),
                     }
                 },
             )
         else:
-            return MCPMessage(
-                id=message.id, result={"contexts": list(self.contexts.keys())}
-            )
-
-    async def _handle_set_context(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+            return MCPMessage(id=message.id, result={"contexts": list(self.contexts.keys())})
+
+    async def _handle_set_context(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle set context request."""
         params = message.params or {}
         context_id = params.get("id", str(uuid.uuid4()))
         name = params.get("name", f"context_{context_id}")
         data = params.get("data", {})
 
         now = datetime.now()
-        context = MCPContext(
-            id=context_id, name=name, data=data, created_at=now, updated_at=now
-        )
+        context = MCPContext(id=context_id, name=name, data=data, created_at=now, updated_at=now)
 
         self.contexts[context_id] = context
 
-        return MCPMessage(
-            id=message.id, result={"success": True, "context_id": context_id}
-        )
-
-    async def _handle_update_context(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+        return MCPMessage(id=message.id, result={"success": True, "context_id": context_id})
+
+    async def _handle_update_context(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle update context request."""
         params = message.params or {}
         context_id = params.get("id")
 
         if not context_id or context_id not in self.contexts:
             return MCPMessage(
                 id=message.id,
-                error={
-                    "code": -
-                    32602,
-                    "message": f"Context '{context_id}' not found"},
+                error={"code": -32602, "message": f"Context '{context_id}' not found"},
             )
 
         context = self.contexts[context_id]
 
         if "name" in params:
@@ -563,13 +514,11 @@
 
         context.updated_at = datetime.now()
 
         return MCPMessage(id=message.id, result={"success": True})
 
-    async def _handle_clear_context(
-        self, client_id: str, message: MCPMessage
-    ) -> MCPMessage:
+    async def _handle_clear_context(self, client_id: str, message: MCPMessage) -> MCPMessage:
         """Handle clear context request."""
         params = message.params or {}
         context_id = params.get("id")
 
         if context_id:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/integrations/mcp_protocol.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/routers/health.py	2025-09-21 01:31:22.951876+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/routers/health.py	2025-09-21 05:52:11.333154+00:00
@@ -150,12 +150,12 @@
             },
         }
     except Exception as readiness_error:
         logger.error("Readiness check failed: %s", readiness_error)
         raise HTTPException(
-            status_code=Status.HTTP_503_SERVICE_UNAVAILABLE,
-            detail="Service not ready") from readiness_error
+            status_code=Status.HTTP_503_SERVICE_UNAVAILABLE, detail="Service not ready"
+        ) from readiness_error
 
 
 @router.get("/live")
 def liveness_check():
     """Liveness check for container orchestrators."""
@@ -167,7 +167,7 @@
             "pid": os.getpid(),
         }
     except Exception as liveness_error:
         logger.error("Liveness check failed: %s", liveness_error)
         raise HTTPException(
-            status_code=Status.HTTP_503_SERVICE_UNAVAILABLE,
-            detail="Service not alive") from liveness_error
+            status_code=Status.HTTP_503_SERVICE_UNAVAILABLE, detail="Service not alive"
+        ) from liveness_error
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/routers/chat.py	2025-09-21 01:31:23.021143+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/routers/chat.py	2025-09-21 05:52:11.386173+00:00
@@ -138,14 +138,11 @@
                 "updated_at": session.updated_at,
             }
 
             messages_store[session_id] = []
 
-            logger.info(
-                "Created chat session %s for user %s",
-                session_id,
-                user_id)
+            logger.info("Created chat session %s for user %s", session_id, user_id)
             return session
 
         except Exception as exc:
             logger.error("Failed to create chat session: %s", exc)
             raise HTTPException(
@@ -160,20 +157,14 @@
             user_sessions = []
             for session_data in chat_sessions.values():
                 if session_data["user_id"] == user_id:
                     user_sessions.append(ChatSession(**session_data))
 
-            return sorted(
-                user_sessions,
-                key=lambda x: x.updated_at,
-                reverse=True)
+            return sorted(user_sessions, key=lambda x: x.updated_at, reverse=True)
 
         except Exception as exc:
-            logger.error(
-                "Failed to get sessions for user %s: %s",
-                user_id,
-                exc)
+            logger.error("Failed to get sessions for user %s: %s", user_id, exc)
             return []
 
     @staticmethod
     def send_message(message: ChatMessage) -> ChatResponse:
         """Send a message and get AI response."""
@@ -197,12 +188,11 @@
             }
 
             messages_store[message.session_id].append(user_message)
 
             # Generate AI response (simplified)
-            ai_response_content = ChatService._generate_ai_response(
-                message.content)
+            ai_response_content = ChatService._generate_ai_response(message.content)
 
             # Store AI response
             ai_msg_id = str(uuid.uuid4())
             ai_message = {
                 "id": ai_msg_id,
@@ -261,14 +251,11 @@
             ]
 
         except HTTPException:
             raise
         except Exception as exc:
-            logger.error(
-                "Failed to get messages for session %s: %s",
-                session_id,
-                exc)
+            logger.error("Failed to get messages for session %s: %s", session_id, exc)
             return []
 
     @staticmethod
     def _generate_ai_response(user_message: str) -> str:
         """Generate AI response (simplified implementation)."""
@@ -313,12 +300,11 @@
 def send_message(message: ChatMessage):
     """Send a message and get AI response."""
     return ChatService.send_message(message)
 
 
-@router.get("/sessions/{session_id}/messages",
-            response_model=list[ChatResponse])
+@router.get("/sessions/{session_id}/messages", response_model=list[ChatResponse])
 def get_messages(session_id: str, user_id: str):
     """Get all messages in a chat session."""
     return ChatService.get_messages(session_id, user_id)
 
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/routers/chat.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/routers/health.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/secret_store.py	2025-09-21 01:31:21.700799+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/secret_store.py	2025-09-21 05:52:14.887455+00:00
@@ -33,14 +33,11 @@
         if "secrets" in self.config:
             self.secrets.update(self.config["secrets"])
 
         self.logger.info(f"Loaded {len(self.secrets)} secrets")
 
-    def get_secret(
-            self,
-            key: str,
-            default: Optional[str] = None) -> Optional[str]:
+    def get_secret(self, key: str, default: Optional[str] = None) -> Optional[str]:
         """Get a secret by key"""
         secret = self.secrets.get(key, default)
         if secret is None:
             self.logger.warning(f"Secret '{key}' not found")
         return secret
@@ -70,13 +67,11 @@
         }
 
     def get_jwt_config(self) -> dict[str, Any]:
         """Get JWT configuration"""
         return {
-            "secret": self.get_secret(
-                "jwt_secret", "default-jwt-secret-change-in-production"
-            ),
+            "secret": self.get_secret("jwt_secret", "default-jwt-secret-change-in-production"),
             "algorithm": "HS256",
             "expire_minutes": 30,
         }
 
     def get_api_keys(self) -> dict[str, str]:
@@ -85,12 +80,11 @@
         for key, value in self.secrets.items():
             if "api_key" in key.lower() and value:
                 api_keys[key] = value
         return api_keys
 
-    def validate_required_secrets(
-            self, required_keys: list[str]) -> dict[str, bool]:
+    def validate_required_secrets(self, required_keys: list[str]) -> dict[str, bool]:
         """Validate that required secrets are present"""
         validation_result = {}
         for key in required_keys:
             validation_result[key] = self.has_secret(key)
             if not validation_result[key]:
@@ -98,13 +92,11 @@
         return validation_result
 
     def get_encryption_key(self) -> str:
         """Get encryption key for sensitive data"""
         return (
-            self.get_secret(
-                "encryption_key", "default-encryption-key-change-in-production"
-            )
+            self.get_secret("encryption_key", "default-encryption-key-change-in-production")
             or "default-encryption-key-change-in-production"
         )
 
     def mask_secret(self, secret: str) -> str:
         """Mask a secret for logging purposes"""
@@ -113,14 +105,10 @@
         return secret[:4] + "*" * (len(secret) - 8) + secret[-4:]
 
     def get_status(self) -> dict[str, Any]:
         """Get secret store status"""
         return {
-            "total_secrets": len(
-                self.secrets),
-            "available_secrets": list(
-                self.secrets.keys()),
-            "masked_values": {
-                k: self.mask_secret(v) for k,
-                v in self.secrets.items()},
+            "total_secrets": len(self.secrets),
+            "available_secrets": list(self.secrets.keys()),
+            "masked_values": {k: self.mask_secret(v) for k, v in self.secrets.items()},
             "timestamp": datetime.now().isoformat(),
         }
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/secret_store.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/task_queue_manager.py	2025-09-21 01:31:22.083878+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/task_queue_manager.py	2025-09-21 05:52:15.297639+00:00
@@ -19,12 +19,11 @@
 
 
 class Task:
     """Task representation"""
 
-    def __init__(self, task_id: str, task_type: str,
-                 data: dict[str, Any], priority: int = 0):
+    def __init__(self, task_id: str, task_type: str, data: dict[str, Any], priority: int = 0):
         self.task_id = task_id
         self.task_type = task_type
         self.data = data
         self.priority = priority
         self.status = TaskStatus.PENDING
@@ -58,11 +57,12 @@
             return
 
         self.is_running = True
         self.logger.info(
             f"Starting TaskQueueManager with {
-                self.max_workers} workers")
+                self.max_workers} workers"
+        )
 
         # Start worker tasks
         for i in range(self.max_workers):
             worker = asyncio.create_task(self._worker(f"worker-{i}"))
             self.workers.append(worker)
@@ -81,20 +81,16 @@
 
         # Wait for workers to finish
         await asyncio.gather(*self.workers, return_exceptions=True)
         self.workers.clear()
 
-    def register_handler(
-        self, task_type: str, handler: Callable[[dict[str, Any]], Any]
-    ):
+    def register_handler(self, task_type: str, handler: Callable[[dict[str, Any]], Any]):
         """Register a task handler for a specific task type"""
         self.task_handlers[task_type] = handler
         self.logger.info(f"Registered handler for task type: {task_type}")
 
-    async def add_task(
-        self, task_type: str, data: dict[str, Any], priority: int = 0
-    ) -> str:
+    async def add_task(self, task_type: str, data: dict[str, Any], priority: int = 0) -> str:
         """Add a task to the queue"""
         task_id = str(uuid.uuid4())
         task = Task(task_id, task_type, data, priority)
 
         await self.task_queue.put(task)
@@ -135,11 +131,12 @@
                 task.status = TaskStatus.RUNNING
                 task.started_at = datetime.now()
 
                 self.logger.info(
                     f"Worker {worker_name} processing task {
-                        task.task_id}")
+                        task.task_id}"
+                )
 
                 try:
                     # Execute task
                     result = await self._execute_task(task)
 
@@ -152,11 +149,12 @@
                     self.completed_tasks.append(task)
                     del self.active_tasks[task.task_id]
 
                     self.logger.info(
                         f"Task {
-                            task.task_id} completed successfully")
+                            task.task_id} completed successfully"
+                    )
 
                 except Exception as e:
                     # Handle task failure
                     task.error = str(e)
                     task.retry_count += 1
@@ -176,13 +174,11 @@
 
                         # Move to failed tasks
                         self.failed_tasks.append(task)
                         del self.active_tasks[task.task_id]
 
-                        self.logger.error(
-                            f"Task {task.task_id} failed permanently: {str(e)}"
-                        )
+                        self.logger.error(f"Task {task.task_id} failed permanently: {str(e)}")
 
                 # Mark task as done in queue
                 self.task_queue.task_done()
 
             except asyncio.TimeoutError:
@@ -218,12 +214,11 @@
             "task_type": task.task_type,
             "status": task.status.value,
             "priority": task.priority,
             "created_at": task.created_at.isoformat(),
             "started_at": task.started_at.isoformat() if task.started_at else None,
-            "completed_at": (
-                task.completed_at.isoformat() if task.completed_at else None),
+            "completed_at": (task.completed_at.isoformat() if task.completed_at else None),
             "result": task.result,
             "error": task.error,
             "retry_count": task.retry_count,
             "max_retries": task.max_retries,
         }
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backend/task_queue_manager.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backup_20250916_010932/fastapi_m1_config.py	2025-09-19 08:32:01+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backup_20250916_010932/fastapi_m1_config.py	2025-09-21 05:54:42.727425+00:00
@@ -36,8 +36,6 @@
 
 # Logging
 accesslog = "-"
 errorlog = "-"
 loglevel = "info"
-access_log_format = (
-    '%%(h)s %%(l)s %%(u)s %%(t)s "%%(r)s" %%(s)s %%(b)s "%%(f)s" "%%(a)s" %%(D)s'
-)
+access_log_format = '%%(h)s %%(l)s %%(u)s %%(t)s "%%(r)s" %%(s)s %%(b)s "%%(f)s" "%%(a)s" %%(D)s'
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backup_20250916_010932/fastapi_m1_config.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backups/base44_sync/20250918_045100/backend/app.py	2025-09-19 08:32:01+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backups/base44_sync/20250918_045100/backend/app.py	2025-09-21 05:55:02.224671+00:00
@@ -58,16 +58,12 @@
         # Fetch data from main production API
         async with httpx.AsyncClient() as client:
             main_api_response = await client.get("http://localhost:8000/health")
             channels_response = await client.get("http://localhost:8000/channels")
 
-        main_api_data = (
-            main_api_response.json() if main_api_response.status_code == 200 else {}
-        )
-        channels_data = (
-            channels_response.json() if channels_response.status_code == 200 else []
-        )
+        main_api_data = main_api_response.json() if main_api_response.status_code == 200 else {}
+        channels_data = channels_response.json() if channels_response.status_code == 200 else []
 
         # Combine with Base44 status
         return {
             "base44_status": "operational",
             "main_api_status": main_api_data.get("status", "unknown"),
@@ -77,13 +73,11 @@
             "integrated": True,
             "timestamp": main_api_data.get("timestamp", "unknown"),
             "services": {
                 "base44": "✅ Online",
                 "main_api": (
-                    "✅ Connected"
-                    if main_api_response.status_code == 200
-                    else "❌ Disconnected"
+                    "✅ Connected" if main_api_response.status_code == 200 else "❌ Disconnected"
                 ),
                 "database": "✅ Passing",
                 "monitoring": "Online",
             },
         }
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/backups/base44_sync/20250918_045100/backend/app.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/base44_installer_v6/fastapi_app/main.py	2025-09-19 08:32:01+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/base44_installer_v6/fastapi_app/main.py	2025-09-21 05:55:02.351801+00:00
@@ -72,14 +72,11 @@
 
 @app.get("/channels")
 def ls_ch():
     con = sqlite3.connect(DB)
     con.row_factory = sqlite3.Row
-    return [
-        dict(r)
-        for r in con.execute("SELECT id,name,notes FROM channels ORDER BY id DESC")
-    ]
+    return [dict(r) for r in con.execute("SELECT id,name,notes FROM channels ORDER BY id DESC")]
 
 
 class EpIn(BaseModel):
     title: str
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/base44_installer_v6/fastapi_app/main.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/backend/utils/loop_guard.py	2025-09-21 05:37:34.222267+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/backend/utils/loop_guard.py	2025-09-21 05:55:02.497209+00:00
@@ -1,16 +1,17 @@
-
 import sqlite3
 import json
 import time
 import hashlib
 import os
 import threading
 from dataclasses import dataclass
 from typing import Any, Dict, Optional
 
-DEFAULT_DB = os.environ.get("ANTI_LOOP_DB", os.path.expanduser("~/ONLINPRDUCTION/var/runtime/agent_state.db"))
+DEFAULT_DB = os.environ.get(
+    "ANTI_LOOP_DB", os.path.expanduser("~/ONLINPRDUCTION/var/runtime/agent_state.db")
+)
 os.makedirs(os.path.dirname(DEFAULT_DB), exist_ok=True)
 
 _INIT_SQL = """
 PRAGMA journal_mode=WAL;
 CREATE TABLE IF NOT EXISTS actions(
@@ -28,49 +29,57 @@
   max_steps INTEGER,
   max_seconds INTEGER
 );
 """
 
+
 def _conn():
     db = sqlite3.connect(DEFAULT_DB, timeout=30)
     db.execute("PRAGMA busy_timeout=30000;")
     return db
+
 
 def _init():
     with _conn() as c:
         for stmt in _INIT_SQL.strip().split(";"):
             s = stmt.strip()
             if s:
                 c.execute(s)
+
+
 _init_lock = threading.Lock()
 with _init_lock:
     _init()
 
+
 def _sig(obj: Any) -> str:
     try:
-        s = json.dumps(obj, sort_keys=True, ensure_ascii=False, separators=(",",":"))
+        s = json.dumps(obj, sort_keys=True, ensure_ascii=False, separators=(",", ":"))
     except Exception:
         s = str(obj)
     return hashlib.sha256(s.encode("utf-8")).hexdigest()
+
 
 @dataclass
 class GuardDecision:
     allow: bool
     reason: str = ""
     cool_down: float = 0.0
     step: int = 0
 
+
 class LoopGuard:
-    def __init__(self,
-                 job_id: str,
-                 max_steps: int = int(os.environ.get("ANTI_LOOP_MAX_STEPS", "40")),
-                 max_seconds: int = int(os.environ.get("ANTI_LOOP_MAX_SECONDS", "900")),
-                 dup_window: int = int(os.environ.get("ANTI_LOOP_DUP_WINDOW", "6")),
-                 dup_threshold: int = int(os.environ.get("ANTI_LOOP_DUP_THRESHOLD", "3")),
-                 tool_rate_limit: int = int(os.environ.get("ANTI_LOOP_TOOL_RATE", "8")),
-                 tool_window_sec: int = int(os.environ.get("ANTI_LOOP_TOOL_WINDOW", "60"))
-                 ):
+    def __init__(
+        self,
+        job_id: str,
+        max_steps: int = int(os.environ.get("ANTI_LOOP_MAX_STEPS", "40")),
+        max_seconds: int = int(os.environ.get("ANTI_LOOP_MAX_SECONDS", "900")),
+        dup_window: int = int(os.environ.get("ANTI_LOOP_DUP_WINDOW", "6")),
+        dup_threshold: int = int(os.environ.get("ANTI_LOOP_DUP_THRESHOLD", "3")),
+        tool_rate_limit: int = int(os.environ.get("ANTI_LOOP_TOOL_RATE", "8")),
+        tool_window_sec: int = int(os.environ.get("ANTI_LOOP_TOOL_WINDOW", "60")),
+    ):
         self.job_id = job_id
         self.max_steps = max_steps
         self.max_seconds = max_seconds
         self.dup_window = dup_window
         self.dup_threshold = dup_threshold
@@ -79,57 +88,79 @@
         self._start = time.time()
         self._ensure_budget_row()
 
     def _ensure_budget_row(self):
         with _conn() as c:
-            c.execute("INSERT OR IGNORE INTO budgets(job_id, started_at, max_steps, max_seconds) VALUES(?,?,?,?)",
-                      (self.job_id, self._start, self.max_steps, self.max_seconds))
+            c.execute(
+                "INSERT OR IGNORE INTO budgets(job_id, started_at, max_steps, max_seconds) VALUES(?,?,?,?)",
+                (self.job_id, self._start, self.max_steps, self.max_seconds),
+            )
 
     def _now(self) -> float:
         return time.time()
 
     def _current_step(self) -> int:
         with _conn() as c:
-            cur = c.execute("SELECT COALESCE(MAX(step),0) FROM actions WHERE job_id=?", (self.job_id,))
+            cur = c.execute(
+                "SELECT COALESCE(MAX(step),0) FROM actions WHERE job_id=?", (self.job_id,)
+            )
             row = cur.fetchone()
             return int(row[0] or 0)
 
     def _recent_actions(self, limit: int = None):
         limit = limit or self.dup_window
         with _conn() as c:
             cur = c.execute(
                 "SELECT step, action_sig, tool_name, at FROM actions WHERE job_id=? ORDER BY step DESC LIMIT ?",
-                (self.job_id, limit)
+                (self.job_id, limit),
             )
             return cur.fetchall()
 
     def _tool_count_in_window(self, tool_name: str) -> int:
         since = self._now() - self.tool_window_sec
         with _conn() as c:
             cur = c.execute(
                 "SELECT COUNT(1) FROM actions WHERE job_id=? AND tool_name=? AND at>=?",
-                (self.job_id, tool_name, since)
+                (self.job_id, tool_name, since),
             )
             return int(cur.fetchone()[0])
 
-    def check(self, action: Dict[str,Any], tool_name: str, result: Optional[Any]=None) -> GuardDecision:
+    def check(
+        self, action: Dict[str, Any], tool_name: str, result: Optional[Any] = None
+    ) -> GuardDecision:
         step = self._current_step() + 1
         elapsed = self._now() - self._start
         if step > self.max_steps:
-            return GuardDecision(False, reason=f"step_budget_exceeded({step}>{self.max_steps})", step=step)
+            return GuardDecision(
+                False, reason=f"step_budget_exceeded({step}>{self.max_steps})", step=step
+            )
         if elapsed > self.max_seconds:
-            return GuardDecision(False, reason=f"time_budget_exceeded({int(elapsed)}s>{self.max_seconds}s)", step=step)
+            return GuardDecision(
+                False,
+                reason=f"time_budget_exceeded({int(elapsed)}s>{self.max_seconds}s)",
+                step=step,
+            )
 
         action_sig = _sig({"tool": tool_name, "action": action})
         recent = self._recent_actions(self.dup_window)
         dup_hits = sum(1 for _, a_sig, _, _ in recent if a_sig == action_sig)
         if dup_hits >= self.dup_threshold:
-            return GuardDecision(False, reason=f"duplicate_action_loop(sig={action_sig[:8]}*, hits={dup_hits})", cool_down=10.0, step=step)
+            return GuardDecision(
+                False,
+                reason=f"duplicate_action_loop(sig={action_sig[:8]}*, hits={dup_hits})",
+                cool_down=10.0,
+                step=step,
+            )
 
         used = self._tool_count_in_window(tool_name)
         if used >= self.tool_rate_limit:
-            return GuardDecision(False, reason=f"tool_rate_limited({tool_name}, {used}/{self.tool_rate_limit}@{self.tool_window_sec}s)", cool_down=5.0, step=step)
+            return GuardDecision(
+                False,
+                reason=f"tool_rate_limited({tool_name}, {used}/{self.tool_rate_limit}@{self.tool_window_sec}s)",
+                cool_down=5.0,
+                step=step,
+            )
 
         result_sig = ""
         if result is not None:
             try:
                 result_sig = _sig(result)
@@ -137,11 +168,12 @@
                 result_sig = ""
 
         with _conn() as c:
             c.execute(
                 "INSERT INTO actions(job_id, step, at, action_sig, tool_name, result_sig) VALUES(?,?,?,?,?,?)",
-                (self.job_id, step, self._now(), action_sig, tool_name, result_sig)
+                (self.job_id, step, self._now(), action_sig, tool_name, result_sig),
             )
         return GuardDecision(True, reason="ok", step=step)
 
-def idempotency_key(user_id: str, job_payload: Dict[str,Any]) -> str:
+
+def idempotency_key(user_id: str, job_payload: Dict[str, Any]) -> str:
     return _sig({"u": user_id, "p": job_payload})
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/backend/utils/loop_guard.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/scripts/ingest_sources.py	2025-09-21 05:36:34.673307+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/scripts/ingest_sources.py	2025-09-21 05:55:02.576879+00:00
@@ -8,13 +8,25 @@
 import datetime
 from typing import List, Dict, Any
 
 DEFAULT_DB = os.path.expanduser("~/ONLINE_PRODUCTION/var/research/sources.db")
 
-COLUMNS = ["title","domain","url","publisher","content_type","first_seen_utc",
-           "last_modified","accessed_utc","why_consulted","relevance",
-           "credibility_notes","redirect_of","status"]
+COLUMNS = [
+    "title",
+    "domain",
+    "url",
+    "publisher",
+    "content_type",
+    "first_seen_utc",
+    "last_modified",
+    "accessed_utc",
+    "why_consulted",
+    "relevance",
+    "credibility_notes",
+    "redirect_of",
+    "status",
+]
 
 FALLBACK_SCHEMA = """
 PRAGMA journal_mode=WAL;
 CREATE TABLE IF NOT EXISTS runs (
   id INTEGER PRIMARY KEY AUTOINCREMENT,
@@ -36,19 +48,20 @@
 CREATE INDEX IF NOT EXISTS idx_sources_domain ON sources(domain);
 CREATE INDEX IF NOT EXISTS idx_sources_url ON sources(url);
 CREATE INDEX IF NOT EXISTS idx_runs_topic ON runs(topic);
 """
 
-def load_markdown_table(path: str) -> List[Dict[str,Any]]:
+
+def load_markdown_table(path: str) -> List[Dict[str, Any]]:
     text = open(path, "r", encoding="utf-8", errors="ignore").read()
     lines = [l for l in text.splitlines() if l.strip()]
     header_idx = None
-    for i,l in enumerate(lines):
+    for i, l in enumerate(lines):
         if "|" in l and ("Page Title" in l or "Full URL" in l or "Canonical Domain" in l):
             header_idx = i
             break
-    if header_idx is None or header_idx+1 >= len(lines):
+    if header_idx is None or header_idx + 1 >= len(lines):
         raise RuntimeError("Markdown table not detected")
     header = [h.strip().lower() for h in lines[header_idx].strip("|").split("|")]
     i = header_idx + 1
     if re.search(r"^\s*\|?\s*-{3,}", lines[i]):
         i += 1
@@ -56,64 +69,91 @@
     for l in lines[i:]:
         if "|" not in l:
             continue
         cells = [c.strip() for c in l.strip("|").split("|")]
         if len(cells) < len(header):
-            cells += [""] * (len(header)-len(cells))
+            cells += [""] * (len(header) - len(cells))
         row = dict(zip(header, cells))
         m = {
             "title": row.get("page title") or row.get("title") or "",
             "domain": row.get("canonical domain") or row.get("domain") or "",
             "url": row.get("full url") or row.get("url") or "",
-            "publisher": row.get("publisher/author") or row.get("publisher") or row.get("author") or "",
+            "publisher": row.get("publisher/author")
+            or row.get("publisher")
+            or row.get("author")
+            or "",
             "content_type": row.get("content type") or row.get("type") or "",
             "first_seen_utc": row.get("first seen (utc)") or row.get("first seen") or "",
-            "last_modified": row.get("last modified (header/on-page/unknown)") or row.get("last modified") or "",
+            "last_modified": row.get("last modified (header/on-page/unknown)")
+            or row.get("last modified")
+            or "",
             "accessed_utc": row.get("date accessed (utc)") or row.get("accessed (utc)") or "",
             "why_consulted": row.get("why consulted") or "",
-            "relevance": row.get("relevance (0–5)") or row.get("relevance (0-5)") or row.get("relevance") or "",
-            "credibility_notes": row.get("credibility notes (≤2 sentences)") or row.get("credibility notes") or "",
-            "redirect_of": row.get("redirect/duplicate of") or row.get("duplicate/redirect of") or "",
+            "relevance": row.get("relevance (0–5)")
+            or row.get("relevance (0-5)")
+            or row.get("relevance")
+            or "",
+            "credibility_notes": row.get("credibility notes (≤2 sentences)")
+            or row.get("credibility notes")
+            or "",
+            "redirect_of": row.get("redirect/duplicate of")
+            or row.get("duplicate/redirect of")
+            or "",
             "status": row.get("status (ok/failed + code)") or row.get("status") or "ok",
         }
         try:
             m["relevance"] = int(str(m["relevance"]).strip() or "0")
         except Exception:
             m["relevance"] = 0
         rows.append(m)
     return rows
 
+
 def ensure_db(db_path: str):
     os.makedirs(os.path.dirname(db_path), exist_ok=True)
     with sqlite3.connect(db_path) as con:
-        sql_path = os.path.expanduser("~/ONLINE_PRODUCTION/var/research/research_sources_schema.sql")
+        sql_path = os.path.expanduser(
+            "~/ONLINE_PRODUCTION/var/research/research_sources_schema.sql"
+        )
         if os.path.exists(sql_path):
             con.executescript(open(sql_path, "r", encoding="utf-8").read())
         else:
             con.executescript(FALLBACK_SCHEMA)
 
-def insert_run(con, topic: str, source_count: int, notes: str="") -> int:
+
+def insert_run(con, topic: str, source_count: int, notes: str = "") -> int:
     now = datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
     cur = con.cursor()
-    cur.execute("INSERT INTO runs(topic, started_at_utc, ended_at_utc, source_count, notes) VALUES(?,?,?,?,?)",
-                (topic, now, now, source_count, notes))
+    cur.execute(
+        "INSERT INTO runs(topic, started_at_utc, ended_at_utc, source_count, notes) VALUES(?,?,?,?,?)",
+        (topic, now, now, source_count, notes),
+    )
     return cur.lastrowid
 
-def insert_sources(con, run_id: int, sources: List[Dict[str,Any]]):
+
+def insert_sources(con, run_id: int, sources: List[Dict[str, Any]]):
     cur = con.cursor()
     for s in sources:
         vals = [s.get(k) for k in COLUMNS]
-        cur.execute(f"""
+        cur.execute(
+            f"""
             INSERT OR IGNORE INTO sources(run_id, {",".join(COLUMNS)})
             VALUES(?, {",".join(["?"]*len(COLUMNS))})
-        """, [run_id] + vals)
+        """,
+            [run_id] + vals,
+        )
+
 
 def main():
-    ap = argparse.ArgumentParser(description="Ingest Gemini Deep Search sources into ONLINE PRODUCTION DB")
+    ap = argparse.ArgumentParser(
+        description="Ingest Gemini Deep Search sources into ONLINE PRODUCTION DB"
+    )
     ap.add_argument("--db", default=DEFAULT_DB)
     ap.add_argument("--topic", required=True, help="Research topic label for this run")
-    ap.add_argument("--input-json", help="Path to JSON array of sources (keys should align with schema)")
+    ap.add_argument(
+        "--input-json", help="Path to JSON array of sources (keys should align with schema)"
+    )
     ap.add_argument("--input-md", help="Path to Markdown table of sources to parse")
     args = ap.parse_args()
 
     if not args.input_json and not args.input_md:
         data = sys.stdin.read()
@@ -132,7 +172,8 @@
         run_id = insert_run(con, args.topic, len(sources))
         insert_sources(con, run_id, sources)
         con.commit()
         print(f"[ingest] run_id={run_id} topic={args.topic!r} sources={len(sources)} db={args.db}")
 
+
 if __name__ == "__main__":
     main()
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/scripts/ingest_sources.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/scripts/query_sources.py	2025-09-21 05:36:31.217904+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/scripts/query_sources.py	2025-09-21 05:55:02.614213+00:00
@@ -3,10 +3,11 @@
 import sqlite3
 import argparse
 import json
 
 DEFAULT_DB = os.path.expanduser("~/ONLINE_PRODUCTION/var/research/sources.db")
+
 
 def main():
     ap = argparse.ArgumentParser(description="Query ONLINE PRODUCTION research DB")
     ap.add_argument("--db", default=DEFAULT_DB)
     ap.add_argument("--topic", help="Filter by topic (LIKE)")
@@ -19,37 +20,57 @@
     con = sqlite3.connect(args.db)
     cur = con.cursor()
 
     result = {}
     if args.last_runs:
-        cur.execute("SELECT id, topic, started_at_utc, ended_at_utc, source_count FROM runs ORDER BY id DESC LIMIT ?", (args.last_runs,))
-        result["runs"] = [{"id":r[0],"topic":r[1],"started_at":r[2],"ended_at":r[3],"sources":r[4]} for r in cur.fetchall()]
+        cur.execute(
+            "SELECT id, topic, started_at_utc, ended_at_utc, source_count FROM runs ORDER BY id DESC LIMIT ?",
+            (args.last_runs,),
+        )
+        result["runs"] = [
+            {"id": r[0], "topic": r[1], "started_at": r[2], "ended_at": r[3], "sources": r[4]}
+            for r in cur.fetchall()
+        ]
 
     where = []
     params = []
     if args.topic:
-        where.append("topic LIKE ?"); params.append(f"%{args.topic}%")
+        where.append("topic LIKE ?")
+        params.append(f"%{args.topic}%")
     if args.domain:
-        where.append("domain LIKE ?"); params.append(f"%{args.domain}%")
+        where.append("domain LIKE ?")
+        params.append(f"%{args.domain}%")
     q = "SELECT title,domain,url,publisher,content_type,accessed_utc,relevance FROM sources"
     if where:
         q += " WHERE " + " AND ".join(where)
     q += " ORDER BY id DESC LIMIT 200"
     cur.execute(q, params)
-    result["sources"] = [{
-        "title": r[0], "domain": r[1], "url": r[2], "publisher": r[3], "type": r[4],
-        "accessed_utc": r[5], "relevance": r[6]
-    } for r in cur.fetchall()]
+    result["sources"] = [
+        {
+            "title": r[0],
+            "domain": r[1],
+            "url": r[2],
+            "publisher": r[3],
+            "type": r[4],
+            "accessed_utc": r[5],
+            "relevance": r[6],
+        }
+        for r in cur.fetchall()
+    ]
 
     if args.top_domains:
-        cur.execute("SELECT domain, COUNT(1) c FROM sources GROUP BY domain ORDER BY c DESC LIMIT ?", (args.top_domains,))
+        cur.execute(
+            "SELECT domain, COUNT(1) c FROM sources GROUP BY domain ORDER BY c DESC LIMIT ?",
+            (args.top_domains,),
+        )
         result["top_domains"] = [{"domain": r[0], "count": r[1]} for r in cur.fetchall()]
 
     out = json.dumps(result, indent=2)
     if args.export_json:
         open(args.export_json, "w", encoding="utf-8").write(out)
         print(f"[export] {args.export_json}")
     else:
         print(out)
 
+
 if __name__ == "__main__":
     main()
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/bundle/scripts/query_sources.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/annotated_types/__init__.py	2025-09-21 04:55:30.965694+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/annotated_types/__init__.py	2025-09-21 05:57:33.091314+00:00
@@ -1,11 +1,21 @@
 import math
 import sys
 import types
 from dataclasses import dataclass
 from datetime import tzinfo
-from typing import TYPE_CHECKING, Any, Callable, Iterator, Optional, SupportsFloat, SupportsIndex, TypeVar, Union
+from typing import (
+    TYPE_CHECKING,
+    Any,
+    Callable,
+    Iterator,
+    Optional,
+    SupportsFloat,
+    SupportsIndex,
+    TypeVar,
+    Union,
+)
 
 if sys.version_info < (3, 8):
     from typing_extensions import Protocol, runtime_checkable
 else:
     from typing import Protocol, runtime_checkable
@@ -25,76 +35,70 @@
     KW_ONLY = {"kw_only": True}
     SLOTS = {"slots": True}
 
 
 __all__ = (
-    'BaseMetadata',
-    'GroupedMetadata',
-    'Gt',
-    'Ge',
-    'Lt',
-    'Le',
-    'Interval',
-    'MultipleOf',
-    'MinLen',
-    'MaxLen',
-    'Len',
-    'Timezone',
-    'Predicate',
-    'LowerCase',
-    'UpperCase',
-    'IsDigits',
-    'IsFinite',
-    'IsNotFinite',
-    'IsNan',
-    'IsNotNan',
-    'IsInfinite',
-    'IsNotInfinite',
-    'doc',
-    'DocInfo',
-    '__version__',
+    "BaseMetadata",
+    "GroupedMetadata",
+    "Gt",
+    "Ge",
+    "Lt",
+    "Le",
+    "Interval",
+    "MultipleOf",
+    "MinLen",
+    "MaxLen",
+    "Len",
+    "Timezone",
+    "Predicate",
+    "LowerCase",
+    "UpperCase",
+    "IsDigits",
+    "IsFinite",
+    "IsNotFinite",
+    "IsNan",
+    "IsNotNan",
+    "IsInfinite",
+    "IsNotInfinite",
+    "doc",
+    "DocInfo",
+    "__version__",
 )
 
-__version__ = '0.7.0'
-
-
-T = TypeVar('T')
+__version__ = "0.7.0"
+
+
+T = TypeVar("T")
 
 
 # arguments that start with __ are considered
 # positional only
 # see https://peps.python.org/pep-0484/#positional-only-arguments
 
 
 class SupportsGt(Protocol):
-    def __gt__(self: T, __other: T) -> bool:
-        ...
+    def __gt__(self: T, __other: T) -> bool: ...
 
 
 class SupportsGe(Protocol):
-    def __ge__(self: T, __other: T) -> bool:
-        ...
+    def __ge__(self: T, __other: T) -> bool: ...
 
 
 class SupportsLt(Protocol):
-    def __lt__(self: T, __other: T) -> bool:
-        ...
+    def __lt__(self: T, __other: T) -> bool: ...
 
 
 class SupportsLe(Protocol):
-    def __le__(self: T, __other: T) -> bool:
-        ...
+    def __le__(self: T, __other: T) -> bool: ...
 
 
 class SupportsMod(Protocol):
-    def __mod__(self: T, __other: T) -> T:
-        ...
+    def __mod__(self: T, __other: T) -> T: ...
 
 
 class SupportsDiv(Protocol):
-    def __div__(self: T, __other: T) -> T:
-        ...
+    def __div__(self: T, __other: T) -> T: ...
 
 
 class BaseMetadata:
     """Base class for all metadata.
 
@@ -183,12 +187,11 @@
 
     @property
     def __is_annotated_types_grouped_metadata__(self) -> Literal[True]:
         return True
 
-    def __iter__(self) -> Iterator[object]:
-        ...
+    def __iter__(self) -> Iterator[object]: ...
 
     if not TYPE_CHECKING:
         __slots__ = ()  # allow subclasses to use slots
 
         def __init_subclass__(cls, *args: Any, **kwargs: Any) -> None:
@@ -389,11 +392,11 @@
 Return True if all characters in the string are ASCII, False otherwise.
 
 ASCII characters have code points in the range U+0000-U+007F. Empty string is ASCII too.
 """
 
-_NumericType = TypeVar('_NumericType', bound=Union[SupportsFloat, SupportsIndex])
+_NumericType = TypeVar("_NumericType", bound=Union[SupportsFloat, SupportsIndex])
 IsFinite = Annotated[_NumericType, Predicate(math.isfinite)]
 """Return True if x is neither an infinity nor a NaN, and False otherwise."""
 IsNotFinite = Annotated[_NumericType, Predicate(Not(math.isfinite))]
 """Return True if x is one of infinity or NaN, and False otherwise"""
 IsNan = Annotated[_NumericType, Predicate(math.isnan)]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/annotated_types/__init__.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/annotated_types/test_cases.py	2025-09-21 04:55:30.965976+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/annotated_types/test_cases.py	2025-09-21 05:57:33.112918+00:00
@@ -35,13 +35,13 @@
         Annotated[datetime, at.Gt(date(2000, 1, 1))],
         [date(2000, 1, 2), date(2000, 1, 3)],
         [date(2000, 1, 1), date(1999, 12, 31)],
     )
     yield Case(
-        Annotated[datetime, at.Gt(Decimal('1.123'))],
-        [Decimal('1.1231'), Decimal('123')],
-        [Decimal('1.123'), Decimal('0')],
+        Annotated[datetime, at.Gt(Decimal("1.123"))],
+        [Decimal("1.1231"), Decimal("123")],
+        [Decimal("1.123"), Decimal("0")],
     )
 
     yield Case(Annotated[int, at.Ge(4)], (4, 5, 6, 1000, 4), (0, -1))
     yield Case(Annotated[float, at.Ge(0.5)], (0.5, 0.6, 0.7, 0.8, 0.9), (0.4, 0.0, -0.1))
     yield Case(
@@ -79,56 +79,78 @@
     yield Case(Annotated[int, at.MultipleOf(multiple_of=3)], (0, 3, 9), (1, 2, 4))
     yield Case(Annotated[float, at.MultipleOf(multiple_of=0.5)], (0, 0.5, 1, 1.5), (0.4, 1.1))
 
     # lengths
 
-    yield Case(Annotated[str, at.MinLen(3)], ('123', '1234', 'x' * 10), ('', '1', '12'))
-    yield Case(Annotated[str, at.Len(3)], ('123', '1234', 'x' * 10), ('', '1', '12'))
-    yield Case(Annotated[List[int], at.MinLen(3)], ([1, 2, 3], [1, 2, 3, 4], [1] * 10), ([], [1], [1, 2]))
-    yield Case(Annotated[List[int], at.Len(3)], ([1, 2, 3], [1, 2, 3, 4], [1] * 10), ([], [1], [1, 2]))
+    yield Case(Annotated[str, at.MinLen(3)], ("123", "1234", "x" * 10), ("", "1", "12"))
+    yield Case(Annotated[str, at.Len(3)], ("123", "1234", "x" * 10), ("", "1", "12"))
+    yield Case(
+        Annotated[List[int], at.MinLen(3)], ([1, 2, 3], [1, 2, 3, 4], [1] * 10), ([], [1], [1, 2])
+    )
+    yield Case(
+        Annotated[List[int], at.Len(3)], ([1, 2, 3], [1, 2, 3, 4], [1] * 10), ([], [1], [1, 2])
+    )
 
-    yield Case(Annotated[str, at.MaxLen(4)], ('', '1234'), ('12345', 'x' * 10))
-    yield Case(Annotated[str, at.Len(0, 4)], ('', '1234'), ('12345', 'x' * 10))
-    yield Case(Annotated[List[str], at.MaxLen(4)], ([], ['a', 'bcdef'], ['a', 'b', 'c']), (['a'] * 5, ['b'] * 10))
-    yield Case(Annotated[List[str], at.Len(0, 4)], ([], ['a', 'bcdef'], ['a', 'b', 'c']), (['a'] * 5, ['b'] * 10))
+    yield Case(Annotated[str, at.MaxLen(4)], ("", "1234"), ("12345", "x" * 10))
+    yield Case(Annotated[str, at.Len(0, 4)], ("", "1234"), ("12345", "x" * 10))
+    yield Case(
+        Annotated[List[str], at.MaxLen(4)],
+        ([], ["a", "bcdef"], ["a", "b", "c"]),
+        (["a"] * 5, ["b"] * 10),
+    )
+    yield Case(
+        Annotated[List[str], at.Len(0, 4)],
+        ([], ["a", "bcdef"], ["a", "b", "c"]),
+        (["a"] * 5, ["b"] * 10),
+    )
 
-    yield Case(Annotated[str, at.Len(3, 5)], ('123', '12345'), ('', '1', '12', '123456', 'x' * 10))
-    yield Case(Annotated[str, at.Len(3, 3)], ('123',), ('12', '1234'))
+    yield Case(Annotated[str, at.Len(3, 5)], ("123", "12345"), ("", "1", "12", "123456", "x" * 10))
+    yield Case(Annotated[str, at.Len(3, 3)], ("123",), ("12", "1234"))
 
-    yield Case(Annotated[Dict[int, int], at.Len(2, 3)], [{1: 1, 2: 2}], [{}, {1: 1}, {1: 1, 2: 2, 3: 3, 4: 4}])
+    yield Case(
+        Annotated[Dict[int, int], at.Len(2, 3)],
+        [{1: 1, 2: 2}],
+        [{}, {1: 1}, {1: 1, 2: 2, 3: 3, 4: 4}],
+    )
     yield Case(Annotated[Set[int], at.Len(2, 3)], ({1, 2}, {1, 2, 3}), (set(), {1}, {1, 2, 3, 4}))
-    yield Case(Annotated[Tuple[int, ...], at.Len(2, 3)], ((1, 2), (1, 2, 3)), ((), (1,), (1, 2, 3, 4)))
+    yield Case(
+        Annotated[Tuple[int, ...], at.Len(2, 3)], ((1, 2), (1, 2, 3)), ((), (1,), (1, 2, 3, 4))
+    )
 
     # Timezone
 
     yield Case(
-        Annotated[datetime, at.Timezone(None)], [datetime(2000, 1, 1)], [datetime(2000, 1, 1, tzinfo=timezone.utc)]
+        Annotated[datetime, at.Timezone(None)],
+        [datetime(2000, 1, 1)],
+        [datetime(2000, 1, 1, tzinfo=timezone.utc)],
     )
     yield Case(
-        Annotated[datetime, at.Timezone(...)], [datetime(2000, 1, 1, tzinfo=timezone.utc)], [datetime(2000, 1, 1)]
+        Annotated[datetime, at.Timezone(...)],
+        [datetime(2000, 1, 1, tzinfo=timezone.utc)],
+        [datetime(2000, 1, 1)],
     )
     yield Case(
         Annotated[datetime, at.Timezone(timezone.utc)],
         [datetime(2000, 1, 1, tzinfo=timezone.utc)],
         [datetime(2000, 1, 1), datetime(2000, 1, 1, tzinfo=timezone(timedelta(hours=6)))],
     )
     yield Case(
-        Annotated[datetime, at.Timezone('Europe/London')],
-        [datetime(2000, 1, 1, tzinfo=timezone(timedelta(0), name='Europe/London'))],
+        Annotated[datetime, at.Timezone("Europe/London")],
+        [datetime(2000, 1, 1, tzinfo=timezone(timedelta(0), name="Europe/London"))],
         [datetime(2000, 1, 1), datetime(2000, 1, 1, tzinfo=timezone(timedelta(hours=6)))],
     )
 
     # Quantity
 
-    yield Case(Annotated[float, at.Unit(unit='m')], (5, 4.2), ('5m', '4.2m'))
+    yield Case(Annotated[float, at.Unit(unit="m")], (5, 4.2), ("5m", "4.2m"))
 
     # predicate types
 
-    yield Case(at.LowerCase[str], ['abc', 'foobar'], ['', 'A', 'Boom'])
-    yield Case(at.UpperCase[str], ['ABC', 'DEFO'], ['', 'a', 'abc', 'AbC'])
-    yield Case(at.IsDigit[str], ['123'], ['', 'ab', 'a1b2'])
-    yield Case(at.IsAscii[str], ['123', 'foo bar'], ['£100', '😊', 'whatever 👀'])
+    yield Case(at.LowerCase[str], ["abc", "foobar"], ["", "A", "Boom"])
+    yield Case(at.UpperCase[str], ["ABC", "DEFO"], ["", "a", "abc", "AbC"])
+    yield Case(at.IsDigit[str], ["123"], ["", "ab", "a1b2"])
+    yield Case(at.IsAscii[str], ["123", "foo bar"], ["£100", "😊", "whatever 👀"])
 
     yield Case(Annotated[int, at.Predicate(lambda x: x % 2 == 0)], [0, 2, 4], [1, 3, 5])
 
     yield Case(at.IsFinite[float], [1.23], [math.nan, math.inf, -math.inf])
     yield Case(at.IsNotFinite[float], [math.nan, math.inf], [1.23])
@@ -136,11 +158,15 @@
     yield Case(at.IsNotNan[float], [1.23, math.inf], [math.nan])
     yield Case(at.IsInfinite[float], [math.inf], [math.nan, 1.23])
     yield Case(at.IsNotInfinite[float], [math.nan, 1.23], [math.inf])
 
     # check stacked predicates
-    yield Case(at.IsInfinite[Annotated[float, at.Predicate(lambda x: x > 0)]], [math.inf], [-math.inf, 1.23, math.nan])
+    yield Case(
+        at.IsInfinite[Annotated[float, at.Predicate(lambda x: x > 0)]],
+        [math.inf],
+        [-math.inf, 1.23, math.nan],
+    )
 
     # doc
     yield Case(Annotated[int, at.doc("A number")], [1, 2], [])
 
     # custom GroupedMetadata
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/annotated_types/test_cases.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_backends/_trio.py	2025-09-21 04:55:32.148700+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_backends/_trio.py	2025-09-21 05:57:33.420226+00:00
@@ -114,13 +114,11 @@
 # Timeouts and cancellation
 #
 
 
 class CancelScope(BaseCancelScope):
-    def __new__(
-        cls, original: trio.CancelScope | None = None, **kwargs: object
-    ) -> CancelScope:
+    def __new__(cls, original: trio.CancelScope | None = None, **kwargs: object) -> CancelScope:
         return object.__new__(cls)
 
     def __init__(self, original: trio.CancelScope | None = None, **kwargs: Any) -> None:
         self.__original = original or trio.CancelScope(**kwargs)
 
@@ -204,23 +202,19 @@
         func: Callable[[Unpack[PosArgsT]], Awaitable[Any]],
         *args: Unpack[PosArgsT],
         name: object = None,
     ) -> None:
         if not self._active:
-            raise RuntimeError(
-                "This task group is not active; no new tasks can be started."
-            )
+            raise RuntimeError("This task group is not active; no new tasks can be started.")
 
         self._nursery.start_soon(func, *args, name=name)
 
     async def start(
         self, func: Callable[..., Awaitable[Any]], *args: object, name: object = None
     ) -> Any:
         if not self._active:
-            raise RuntimeError(
-                "This task group is not active; no new tasks can be started."
-            )
+            raise RuntimeError("This task group is not active; no new tasks can be started.")
 
         return await self._nursery.start(func, *args, name=name)
 
 
 #
@@ -607,13 +601,11 @@
                 await self._trio_socket.sendto(*item)
             except BaseException as exc:
                 self._convert_socket_error(exc)
 
 
-class ConnectedUNIXDatagramSocket(
-    _TrioSocketMixin[str], abc.ConnectedUNIXDatagramSocket
-):
+class ConnectedUNIXDatagramSocket(_TrioSocketMixin[str], abc.ConnectedUNIXDatagramSocket):
     def __init__(self, trio_socket: TrioSocketType) -> None:
         super().__init__(trio_socket)
         self._receive_guard = ResourceGuard("reading from")
         self._send_guard = ResourceGuard("writing to")
 
@@ -707,13 +699,11 @@
         self.__original.release()
 
     def statistics(self) -> LockStatistics:
         orig_statistics = self.__original.statistics()
         owner = TrioTaskInfo(orig_statistics.owner) if orig_statistics.owner else None
-        return LockStatistics(
-            orig_statistics.locked, owner, orig_statistics.tasks_waiting
-        )
+        return LockStatistics(orig_statistics.locked, owner, orig_statistics.tasks_waiting)
 
 
 class Semaphore(BaseSemaphore):
     def __new__(
         cls,
@@ -1257,13 +1247,11 @@
         ]
     ]:
         return await trio.socket.getaddrinfo(host, port, family, type, proto, flags)
 
     @classmethod
-    async def getnameinfo(
-        cls, sockaddr: IPSockAddrType, flags: int = 0
-    ) -> tuple[str, str]:
+    async def getnameinfo(cls, sockaddr: IPSockAddrType, flags: int = 0) -> tuple[str, str]:
         return await trio.socket.getnameinfo(sockaddr, flags)
 
     @classmethod
     async def wait_readable(cls, obj: FileDescriptorLike) -> None:
         try:
@@ -1325,13 +1313,11 @@
     @classmethod
     def current_default_thread_limiter(cls) -> CapacityLimiter:
         try:
             return _capacity_limiter_wrapper.get()
         except LookupError:
-            limiter = CapacityLimiter(
-                original=trio.to_thread.current_default_thread_limiter()
-            )
+            limiter = CapacityLimiter(original=trio.to_thread.current_default_thread_limiter())
             _capacity_limiter_wrapper.set(limiter)
             return limiter
 
     @classmethod
     def open_signal_receiver(
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_backends/_trio.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_asyncio_selector_thread.py	2025-09-21 04:55:32.148958+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_asyncio_selector_thread.py	2025-09-21 05:57:33.457448+00:00
@@ -53,13 +53,13 @@
         self._thread.join()
         self._selector.unregister(self._receive)
         self._receive.close()
         self._selector.close()
         _selector = None
-        assert not self._selector.get_map(), (
-            "selector still has registered file descriptors after shutdown"
-        )
+        assert (
+            not self._selector.get_map()
+        ), "selector still has registered file descriptors after shutdown"
 
     def _notify_self(self) -> None:
         try:
             self._send.send(b"\x00")
         except BlockingIOError:
@@ -71,13 +71,11 @@
             key = self._selector.get_key(fd)
         except KeyError:
             self._selector.register(fd, EVENT_READ, {EVENT_READ: (loop, callback)})
         else:
             if EVENT_READ in key.data:
-                raise ValueError(
-                    "this file descriptor is already registered for reading"
-                )
+                raise ValueError("this file descriptor is already registered for reading")
 
             key.data[EVENT_READ] = loop, callback
             self._selector.modify(fd, key.events | EVENT_READ, key.data)
 
         self._notify_self()
@@ -88,13 +86,11 @@
             key = self._selector.get_key(fd)
         except KeyError:
             self._selector.register(fd, EVENT_WRITE, {EVENT_WRITE: (loop, callback)})
         else:
             if EVENT_WRITE in key.data:
-                raise ValueError(
-                    "this file descriptor is already registered for writing"
-                )
+                raise ValueError("this file descriptor is already registered for writing")
 
             key.data[EVENT_WRITE] = loop, callback
             self._selector.modify(fd, key.events | EVENT_WRITE, key.data)
 
         self._notify_self()
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_asyncio_selector_thread.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_backends/_asyncio.py	2025-09-21 04:55:32.148548+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_backends/_asyncio.py	2025-09-21 05:57:33.962026+00:00
@@ -185,13 +185,11 @@
             if not coroutines.iscoroutine(coro):
                 raise ValueError(f"a coroutine was expected, got {coro!r}")
 
             if events._get_running_loop() is not None:
                 # fail fast with short traceback
-                raise RuntimeError(
-                    "Runner.run() cannot be called from a running event loop"
-                )
+                raise RuntimeError("Runner.run() cannot be called from a running event loop")
 
             self._lazy_init()
 
             if context is None:
                 context = self._context
@@ -220,14 +218,11 @@
                     uncancel = getattr(task, "uncancel", None)
                     if uncancel is not None and uncancel() == 0:
                         raise KeyboardInterrupt  # noqa: B904
                 raise  # CancelledError
             finally:
-                if (
-                    sigint_handler is not None
-                    and signal.getsignal(signal.SIGINT) is sigint_handler
-                ):
+                if sigint_handler is not None and signal.getsignal(signal.SIGINT) is sigint_handler:
                     signal.signal(signal.SIGINT, signal.default_int_handler)
 
         def _lazy_init(self) -> None:
             if self._state is _State.CLOSED:
                 raise RuntimeError("Runner is closed")
@@ -316,14 +311,11 @@
     # Look for a task that has been started via run_until_complete()
     for task in all_tasks():
         if task._callbacks and not task.done():
             callbacks = [cb for cb, context in task._callbacks]
             for cb in callbacks:
-                if (
-                    cb is _run_until_complete_cb
-                    or getattr(cb, "__module__", None) == "uvloop.loop"
-                ):
+                if cb is _run_until_complete_cb or getattr(cb, "__module__", None) == "uvloop.loop":
                     _root_task.set(task)
                     return task
 
     # Look up the topmost task in the AnyIO task tree, if possible
     task = cast(asyncio.Task, current_task())
@@ -388,13 +380,11 @@
 
         return False
 
 
 class CancelScope(BaseCancelScope):
-    def __new__(
-        cls, *, deadline: float = math.inf, shield: bool = False
-    ) -> CancelScope:
+    def __new__(cls, *, deadline: float = math.inf, shield: bool = False) -> CancelScope:
         return object.__new__(cls)
 
     def __init__(self, deadline: float = math.inf, shield: bool = False):
         self._deadline = deadline
         self._shield = shield
@@ -412,13 +402,11 @@
         else:
             self._pending_uncancellations = None
 
     def __enter__(self) -> CancelScope:
         if self._active:
-            raise RuntimeError(
-                "Each CancelScope may only be used for a single 'with' block"
-            )
+            raise RuntimeError("Each CancelScope may only be used for a single 'with' block")
 
         self._host_task = host_task = cast(asyncio.Task, current_task())
         self._tasks.add(host_task)
         try:
             task_state = _task_states[host_task]
@@ -453,12 +441,11 @@
 
         if not self._active:
             raise RuntimeError("This cancel scope is not active")
         if current_task() is not self._host_task:
             raise RuntimeError(
-                "Attempted to exit cancel scope in a different task than it was "
-                "entered in"
+                "Attempted to exit cancel scope in a different task than it was " "entered in"
             )
 
         assert self._host_task is not None
         host_task_state = _task_states.get(self._host_task)
         if host_task_state is None or host_task_state.cancel_scope is not self:
@@ -495,25 +482,21 @@
 
                 # Update cancelled_caught and check for exceptions we must not swallow
                 cannot_swallow_exc_val = False
                 if exc_val is not None:
                     for exc in iterate_exceptions(exc_val):
-                        if isinstance(exc, CancelledError) and is_anyio_cancellation(
-                            exc
-                        ):
+                        if isinstance(exc, CancelledError) and is_anyio_cancellation(exc):
                             self._cancelled_caught = True
                         else:
                             cannot_swallow_exc_val = True
 
                 return self._cancelled_caught and not cannot_swallow_exc_val
             else:
                 if self._pending_uncancellations:
                     assert self._parent_scope is not None
                     assert self._parent_scope._pending_uncancellations is not None
-                    self._parent_scope._pending_uncancellations += (
-                        self._pending_uncancellations
-                    )
+                    self._parent_scope._pending_uncancellations += self._pending_uncancellations
                     self._pending_uncancellations = 0
 
                 return False
         finally:
             self._host_task = None
@@ -570,14 +553,11 @@
             # The task is eligible for cancellation if it has started
             if task is not current and (task is self._host_task or _task_started(task)):
                 waiter = task._fut_waiter  # type: ignore[attr-defined]
                 if not isinstance(waiter, asyncio.Future) or not waiter.done():
                     task.cancel(f"Cancelled by cancel scope {id(origin):x}")
-                    if (
-                        task is origin._host_task
-                        and origin._pending_uncancellations is not None
-                    ):
+                    if task is origin._host_task and origin._pending_uncancellations is not None:
                         origin._pending_uncancellations += 1
 
         # Deliver cancellation to child scopes that aren't shielded or running their own
         # cancellation callbacks
         for scope in self._child_scopes:
@@ -692,13 +672,11 @@
     def started(self, value: T_contra | None = None) -> None:
         try:
             self._future.set_result(value)
         except asyncio.InvalidStateError:
             if not self._future.cancelled():
-                raise RuntimeError(
-                    "called 'started' twice on the same task status"
-                ) from None
+                raise RuntimeError("called 'started' twice on the same task status") from None
 
         task = cast(asyncio.Task, current_task())
         _task_states[task].parent_id = self._parent_id
 
 
@@ -832,13 +810,11 @@
                 task_status_future.set_exception(
                     RuntimeError("Child exited without calling task_status.started()")
                 )
 
         if not self._active:
-            raise RuntimeError(
-                "This task group is not active; no new tasks can be started."
-            )
+            raise RuntimeError("This task group is not active; no new tasks can be started.")
 
         kwargs = {}
         if task_status_future:
             parent_id = id(current_task())
             kwargs["task_status"] = _AsyncioTaskStatus(
@@ -866,13 +842,11 @@
             task = custom_task_constructor(coro, loop=loop, name=name)
         else:
             task = create_task(coro, name=name)
 
         # Make the spawned task inherit the task group's cancel scope
-        _task_states[task] = TaskState(
-            parent_id=parent_id, cancel_scope=self.cancel_scope
-        )
+        _task_states[task] = TaskState(parent_id=parent_id, cancel_scope=self.cancel_scope)
         self.cancel_scope._tasks.add(task)
         self._tasks.add(task)
         task.add_done_callback(task_done)
         return task
 
@@ -924,13 +898,13 @@
         super().__init__(name="AnyIO worker thread")
         self.root_task = root_task
         self.workers = workers
         self.idle_workers = idle_workers
         self.loop = root_task._loop
-        self.queue: Queue[
-            tuple[Context, Callable, tuple, asyncio.Future, CancelScope] | None
-        ] = Queue(2)
+        self.queue: Queue[tuple[Context, Callable, tuple, asyncio.Future, CancelScope] | None] = (
+            Queue(2)
+        )
         self.idle_since = AsyncIOBackend.current_time()
         self.stopping = False
 
     def _report_result(
         self, future: asyncio.Future, result: Any, exc: BaseException | None
@@ -988,13 +962,11 @@
             self.idle_workers.remove(self)
         except ValueError:
             pass
 
 
-_threadpool_idle_workers: RunVar[deque[WorkerThread]] = RunVar(
-    "_threadpool_idle_workers"
-)
+_threadpool_idle_workers: RunVar[deque[WorkerThread]] = RunVar("_threadpool_idle_workers")
 _threadpool_workers: RunVar[set[WorkerThread]] = RunVar("_threadpool_workers")
 
 
 class BlockingPortal(abc.BlockingPortal):
     def __new__(cls) -> BlockingPortal:
@@ -1109,13 +1081,11 @@
     @property
     def stderr(self) -> abc.ByteReceiveStream | None:
         return self._stderr
 
 
-def _forcibly_shutdown_process_pool_on_exit(
-    workers: set[Process], _task: object
-) -> None:
+def _forcibly_shutdown_process_pool_on_exit(workers: set[Process], _task: object) -> None:
     """
     Forcibly shuts down worker processes belonging to this event loop."""
     child_watcher: asyncio.AbstractChildWatcher | None = None
     if sys.version_info < (3, 12):
         try:
@@ -1513,13 +1483,11 @@
                     raise
                 finally:
                     self._accept_scope = None
 
         client_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
-        transport, protocol = await self._loop.connect_accepted_socket(
-            StreamProtocol, client_sock
-        )
+        transport, protocol = await self._loop.connect_accepted_socket(StreamProtocol, client_sock)
         return SocketStream(transport, protocol)
 
     async def aclose(self) -> None:
         if self._closed:
             return
@@ -1554,13 +1522,11 @@
                     client_sock.setblocking(False)
                     return UNIXSocketStream(client_sock)
                 except BlockingIOError:
                     f: asyncio.Future = asyncio.Future()
                     self._loop.add_reader(self.__raw_socket, f.set_result, None)
-                    f.add_done_callback(
-                        lambda _: self._loop.remove_reader(self.__raw_socket)
-                    )
+                    f.add_done_callback(lambda _: self._loop.remove_reader(self.__raw_socket))
                     await f
                 except OSError as exc:
                     if self._closed:
                         raise ClosedResourceError from None
                     else:
@@ -1574,13 +1540,11 @@
     def _raw_socket(self) -> socket.socket:
         return self.__raw_socket
 
 
 class UDPSocket(abc.UDPSocket):
-    def __init__(
-        self, transport: asyncio.DatagramTransport, protocol: DatagramProtocol
-    ):
+    def __init__(self, transport: asyncio.DatagramTransport, protocol: DatagramProtocol):
         self._transport = transport
         self._protocol = protocol
         self._receive_guard = ResourceGuard("reading from")
         self._send_guard = ResourceGuard("writing to")
         self._closed = False
@@ -1622,13 +1586,11 @@
             else:
                 self._transport.sendto(*item)
 
 
 class ConnectedUDPSocket(abc.ConnectedUDPSocket):
-    def __init__(
-        self, transport: asyncio.DatagramTransport, protocol: DatagramProtocol
-    ):
+    def __init__(self, transport: asyncio.DatagramTransport, protocol: DatagramProtocol):
         self._transport = transport
         self._protocol = protocol
         self._receive_guard = ResourceGuard("reading from")
         self._send_guard = ResourceGuard("writing to")
         self._closed = False
@@ -2171,13 +2133,11 @@
         self._runner.__exit__(exc_type, exc_val, exc_tb)
 
     def get_loop(self) -> AbstractEventLoop:
         return self._runner.get_loop()
 
-    def _exception_handler(
-        self, loop: asyncio.AbstractEventLoop, context: dict[str, Any]
-    ) -> None:
+    def _exception_handler(self, loop: asyncio.AbstractEventLoop, context: dict[str, Any]) -> None:
         if isinstance(context.get("exception"), Exception):
             self._exceptions.append(context["exception"])
         else:
             loop.default_exception_handler(context)
 
@@ -2250,13 +2210,11 @@
         self._raise_async_exceptions()
 
         yield fixturevalue
 
         try:
-            self.get_loop().run_until_complete(
-                self._call_in_runner_task(asyncgen.asend, None)
-            )
+            self.get_loop().run_until_complete(self._call_in_runner_task(asyncgen.asend, None))
         except StopAsyncIteration:
             self._raise_async_exceptions()
         else:
             self.get_loop().run_until_complete(asyncgen.aclose())
             raise RuntimeError("Async generator fixture did not stop")
@@ -2274,13 +2232,11 @@
 
     def run_test(
         self, test_func: Callable[..., Coroutine[Any, Any, Any]], kwargs: dict[str, Any]
     ) -> None:
         try:
-            self.get_loop().run_until_complete(
-                self._call_in_runner_task(test_func, **kwargs)
-            )
+            self.get_loop().run_until_complete(self._call_in_runner_task(test_func, **kwargs))
         except Exception as exc:
             self._exceptions.append(exc)
 
         self._raise_async_exceptions()
 
@@ -2441,30 +2397,23 @@
                 root_task = find_root_task()
                 if not idle_workers:
                     worker = WorkerThread(root_task, workers, idle_workers)
                     worker.start()
                     workers.add(worker)
-                    root_task.add_done_callback(
-                        worker.stop, context=contextvars.Context()
-                    )
+                    root_task.add_done_callback(worker.stop, context=contextvars.Context())
                 else:
                     worker = idle_workers.pop()
 
                     # Prune any other workers that have been idle for MAX_IDLE_TIME
                     # seconds or longer
                     now = cls.current_time()
                     while idle_workers:
-                        if (
-                            now - idle_workers[0].idle_since
-                            < WorkerThread.MAX_IDLE_TIME
-                        ):
+                        if now - idle_workers[0].idle_since < WorkerThread.MAX_IDLE_TIME:
                             break
 
                         expired_worker = idle_workers.popleft()
-                        expired_worker.root_task.remove_done_callback(
-                            expired_worker.stop
-                        )
+                        expired_worker.root_task.remove_done_callback(expired_worker.stop)
                         expired_worker.stop()
 
                 context = copy_context()
                 context.run(sniffio.current_async_library_cvar.set, None)
                 if abandon_on_cancel or scope._parent_scope is None:
@@ -2698,13 +2647,11 @@
         return await get_running_loop().getaddrinfo(
             host, port, family=family, type=type, proto=proto, flags=flags
         )
 
     @classmethod
-    async def getnameinfo(
-        cls, sockaddr: IPSockAddrType, flags: int = 0
-    ) -> tuple[str, str]:
+    async def getnameinfo(cls, sockaddr: IPSockAddrType, flags: int = 0) -> tuple[str, str]:
         return await get_running_loop().getnameinfo(sockaddr, flags)
 
     @classmethod
     async def wait_readable(cls, obj: FileDescriptorLike) -> None:
         try:
@@ -2864,13 +2811,11 @@
     async def wrap_listener_socket(cls, sock: socket.socket) -> SocketListener:
         return TCPSocketListener(sock)
 
     @classmethod
     async def wrap_stream_socket(cls, sock: socket.socket) -> SocketStream:
-        transport, protocol = await get_running_loop().create_connection(
-            StreamProtocol, sock=sock
-        )
+        transport, protocol = await get_running_loop().create_connection(StreamProtocol, sock=sock)
         return SocketStream(transport, protocol)
 
     @classmethod
     async def wrap_unix_stream_socket(cls, sock: socket.socket) -> UNIXSocketStream:
         return UNIXSocketStream(sock)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_backends/_asyncio.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_sockets.py	2025-09-21 04:55:32.149918+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_sockets.py	2025-09-21 05:58:18.767542+00:00
@@ -51,13 +51,11 @@
 else:
     from warnings import deprecated
 
 IPPROTO_IPV6 = getattr(socket, "IPPROTO_IPV6", 41)  # https://bugs.python.org/issue29515
 
-AnyIPAddressFamily = Literal[
-    AddressFamily.AF_UNSPEC, AddressFamily.AF_INET, AddressFamily.AF_INET6
-]
+AnyIPAddressFamily = Literal[AddressFamily.AF_UNSPEC, AddressFamily.AF_INET, AddressFamily.AF_INET6]
 IPAddressFamily = Literal[AddressFamily.AF_INET, AddressFamily.AF_INET6]
 
 
 # tls_hostname given
 @overload
@@ -430,13 +428,11 @@
     elif family is AddressFamily.AF_INET6:
         local_address = ("::", 0)
     else:
         local_address = ("0.0.0.0", 0)
 
-    sock = await get_async_backend().create_udp_socket(
-        family, local_address, None, reuse_port
-    )
+    sock = await get_async_backend().create_udp_socket(family, local_address, None, reuse_port)
     return cast(UDPSocket, sock)
 
 
 async def create_connected_udp_socket(
     remote_host: IPAddressType,
@@ -508,13 +504,11 @@
     :param local_path: the path on which to bind to
     :param local_mode: permissions to set on the local socket
     :return: a UNIX datagram socket
 
     """
-    raw_socket = await setup_unix_local_socket(
-        local_path, local_mode, socket.SOCK_DGRAM
-    )
+    raw_socket = await setup_unix_local_socket(local_path, local_mode, socket.SOCK_DGRAM)
     return await get_async_backend().create_unix_datagram_socket(raw_socket, None)
 
 
 async def create_connected_unix_datagram_socket(
     remote_path: str | bytes | PathLike[Any],
@@ -539,16 +533,12 @@
     :param local_mode: permissions to set on the local socket
     :return: a connected UNIX datagram socket
 
     """
     remote_path = os.fspath(remote_path)
-    raw_socket = await setup_unix_local_socket(
-        local_path, local_mode, socket.SOCK_DGRAM
-    )
-    return await get_async_backend().create_unix_datagram_socket(
-        raw_socket, remote_path
-    )
+    raw_socket = await setup_unix_local_socket(local_path, local_mode, socket.SOCK_DGRAM)
+    return await get_async_backend().create_unix_datagram_socket(raw_socket, remote_path)
 
 
 async def getaddrinfo(
     host: bytes | str | None,
     port: str | int | None,
@@ -849,13 +839,11 @@
     @override
     async def connect(self) -> SocketStream:
         try:
             return await connect_tcp(self.host, self.port)
         except OSError as exc:
-            raise ConnectionFailed(
-                f"error connecting to {self.host}:{self.port}: {exc}"
-            ) from exc
+            raise ConnectionFailed(f"error connecting to {self.host}:{self.port}: {exc}") from exc
 
 
 @dataclass
 class UNIXConnectable(ByteStreamConnectable):
     """
@@ -873,15 +861,17 @@
         except OSError as exc:
             raise ConnectionFailed(f"error connecting to {self.path!r}: {exc}") from exc
 
 
 def as_connectable(
-    remote: ByteStreamConnectable
-    | tuple[str | IPv4Address | IPv6Address, int]
-    | str
-    | bytes
-    | PathLike[str],
+    remote: (
+        ByteStreamConnectable
+        | tuple[str | IPv4Address | IPv6Address, int]
+        | str
+        | bytes
+        | PathLike[str]
+    ),
     /,
     *,
     tls: bool = False,
     ssl_context: ssl.SSLContext | None = None,
     tls_hostname: str | None = None,
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_sockets.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_exceptions.py	2025-09-21 04:55:32.149357+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_exceptions.py	2025-09-21 05:58:18.839422+00:00
@@ -96,13 +96,11 @@
     :meth:`~anyio.streams.buffered.BufferedByteReceiveStream.receive_until` if the
     maximum number of bytes has been read without the delimiter being found.
     """
 
     def __init__(self, max_bytes: int) -> None:
-        super().__init__(
-            f"The delimiter was not found among the first {max_bytes} bytes"
-        )
+        super().__init__(f"The delimiter was not found among the first {max_bytes} bytes")
 
 
 class EndOfStream(Exception):
     """
     Raised when trying to read from a stream that has been closed from the other end.
@@ -116,13 +114,11 @@
     :meth:`~anyio.streams.buffered.BufferedByteReceiveStream.receive_until` if the
     connection is closed before the requested amount of bytes has been read.
     """
 
     def __init__(self) -> None:
-        super().__init__(
-            "The stream was closed before the read operation could be completed"
-        )
+        super().__init__("The stream was closed before the read operation could be completed")
 
 
 class TypedAttributeLookupError(LookupError):
     """
     Raised by :meth:`~anyio.TypedAttributeProvider.extra` when the given typed attribute
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_exceptions.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_contextmanagers.py	2025-09-21 04:55:32.149093+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_contextmanagers.py	2025-09-21 05:58:18.914673+00:00
@@ -40,13 +40,11 @@
     @final
     def __enter__(self: _SupportsCtxMgr[_T_co, bool | None]) -> _T_co:
         # Needed for mypy to assume self still has the __cm member
         assert isinstance(self, ContextManagerMixin)
         if self.__cm is not None:
-            raise RuntimeError(
-                f"this {self.__class__.__qualname__} has already been entered"
-            )
+            raise RuntimeError(f"this {self.__class__.__qualname__} has already been entered")
 
         cm = self.__contextmanager__()
         if not isinstance(cm, AbstractContextManager):
             if isgenerator(cm):
                 raise TypeError(
@@ -79,13 +77,11 @@
         exc_tb: TracebackType | None,
     ) -> _ExitT_co:
         # Needed for mypy to assume self still has the __cm member
         assert isinstance(self, ContextManagerMixin)
         if self.__cm is None:
-            raise RuntimeError(
-                f"this {self.__class__.__qualname__} has not been entered yet"
-            )
+            raise RuntimeError(f"this {self.__class__.__qualname__} has not been entered yet")
 
         # Prevent circular references
         cm = self.__cm
         del self.__cm
 
@@ -126,13 +122,11 @@
     @final
     async def __aenter__(self: _SupportsAsyncCtxMgr[_T_co, bool | None]) -> _T_co:
         # Needed for mypy to assume self still has the __cm member
         assert isinstance(self, AsyncContextManagerMixin)
         if self.__cm is not None:
-            raise RuntimeError(
-                f"this {self.__class__.__qualname__} has already been entered"
-            )
+            raise RuntimeError(f"this {self.__class__.__qualname__} has already been entered")
 
         cm = self.__asynccontextmanager__()
         if not isinstance(cm, AbstractAsyncContextManager):
             if isasyncgen(cm):
                 raise TypeError(
@@ -171,13 +165,11 @@
         exc_val: BaseException | None,
         exc_tb: TracebackType | None,
     ) -> _ExitT_co:
         assert isinstance(self, AsyncContextManagerMixin)
         if self.__cm is None:
-            raise RuntimeError(
-                f"this {self.__class__.__qualname__} has not been entered yet"
-            )
+            raise RuntimeError(f"this {self.__class__.__qualname__} has not been entered yet")
 
         # Prevent circular references
         cm = self.__cm
         del self.__cm
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_contextmanagers.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_fileio.py	2025-09-21 04:55:32.149500+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_fileio.py	2025-09-21 05:58:19.067737+00:00
@@ -115,13 +115,11 @@
 
     async def write(self, b: ReadableBuffer | str) -> int:
         return await to_thread.run_sync(self._fp.write, b)
 
     @overload
-    async def writelines(
-        self: AsyncFile[bytes], lines: Iterable[ReadableBuffer]
-    ) -> None: ...
+    async def writelines(self: AsyncFile[bytes], lines: Iterable[ReadableBuffer]) -> None: ...
 
     @overload
     async def writelines(self: AsyncFile[str], lines: Iterable[str]) -> None: ...
 
     async def writelines(self, lines: Iterable[ReadableBuffer] | Iterable[str]) -> None:
@@ -204,13 +202,11 @@
 @dataclass(eq=False)
 class _PathIterator(AsyncIterator["Path"]):
     iterator: Iterator[PathLike[str]]
 
     async def __anext__(self) -> Path:
-        nextval = await to_thread.run_sync(
-            next, self.iterator, None, abandon_on_cancel=True
-        )
+        nextval = await to_thread.run_sync(next, self.iterator, None, abandon_on_cancel=True)
         if nextval is None:
             raise StopAsyncIteration from None
 
         return Path(nextval)
 
@@ -394,19 +390,16 @@
 
         @classmethod
         def from_uri(cls, uri: str) -> Path:
             return Path(pathlib.Path.from_uri(uri))
 
-        def full_match(
-            self, path_pattern: str, *, case_sensitive: bool | None = None
-        ) -> bool:
+        def full_match(self, path_pattern: str, *, case_sensitive: bool | None = None) -> bool:
             return self._path.full_match(path_pattern, case_sensitive=case_sensitive)
 
-        def match(
-            self, path_pattern: str, *, case_sensitive: bool | None = None
-        ) -> bool:
+        def match(self, path_pattern: str, *, case_sensitive: bool | None = None) -> bool:
             return self._path.match(path_pattern, case_sensitive=case_sensitive)
+
     else:
 
         def match(self, path_pattern: str) -> bool:
             return self._path.match(path_pattern)
 
@@ -473,24 +466,20 @@
 
     async def exists(self) -> bool:
         return await to_thread.run_sync(self._path.exists, abandon_on_cancel=True)
 
     async def expanduser(self) -> Path:
-        return Path(
-            await to_thread.run_sync(self._path.expanduser, abandon_on_cancel=True)
-        )
+        return Path(await to_thread.run_sync(self._path.expanduser, abandon_on_cancel=True))
 
     def glob(self, pattern: str) -> AsyncIterator[Path]:
         gen = self._path.glob(pattern)
         return _PathIterator(gen)
 
     async def group(self) -> str:
         return await to_thread.run_sync(self._path.group, abandon_on_cancel=True)
 
-    async def hardlink_to(
-        self, target: str | bytes | PathLike[str] | PathLike[bytes]
-    ) -> None:
+    async def hardlink_to(self, target: str | bytes | PathLike[str] | PathLike[bytes]) -> None:
         if isinstance(target, Path):
             target = target._path
 
         await to_thread.run_sync(os.link, target, self)
 
@@ -501,18 +490,14 @@
 
     def is_absolute(self) -> bool:
         return self._path.is_absolute()
 
     async def is_block_device(self) -> bool:
-        return await to_thread.run_sync(
-            self._path.is_block_device, abandon_on_cancel=True
-        )
+        return await to_thread.run_sync(self._path.is_block_device, abandon_on_cancel=True)
 
     async def is_char_device(self) -> bool:
-        return await to_thread.run_sync(
-            self._path.is_char_device, abandon_on_cancel=True
-        )
+        return await to_thread.run_sync(self._path.is_char_device, abandon_on_cancel=True)
 
     async def is_dir(self) -> bool:
         return await to_thread.run_sync(self._path.is_dir, abandon_on_cancel=True)
 
     async def is_fifo(self) -> bool:
@@ -525,13 +510,11 @@
 
         async def is_junction(self) -> bool:
             return await to_thread.run_sync(self._path.is_junction)
 
     async def is_mount(self) -> bool:
-        return await to_thread.run_sync(
-            os.path.ismount, self._path, abandon_on_cancel=True
-        )
+        return await to_thread.run_sync(os.path.ismount, self._path, abandon_on_cancel=True)
 
     def is_reserved(self) -> bool:
         return self._path.is_reserved()
 
     async def is_socket(self) -> bool:
@@ -556,13 +539,11 @@
         await to_thread.run_sync(self._path.lchmod, mode)
 
     async def lstat(self) -> os.stat_result:
         return await to_thread.run_sync(self._path.lstat, abandon_on_cancel=True)
 
-    async def mkdir(
-        self, mode: int = 0o777, parents: bool = False, exist_ok: bool = False
-    ) -> None:
+    async def mkdir(self, mode: int = 0o777, parents: bool = False, exist_ok: bool = False) -> None:
         await to_thread.run_sync(self._path.mkdir, mode, parents, exist_ok)
 
     @overload
     async def open(
         self,
@@ -589,31 +570,25 @@
         buffering: int = -1,
         encoding: str | None = None,
         errors: str | None = None,
         newline: str | None = None,
     ) -> AsyncFile[Any]:
-        fp = await to_thread.run_sync(
-            self._path.open, mode, buffering, encoding, errors, newline
-        )
+        fp = await to_thread.run_sync(self._path.open, mode, buffering, encoding, errors, newline)
         return AsyncFile(fp)
 
     async def owner(self) -> str:
         return await to_thread.run_sync(self._path.owner, abandon_on_cancel=True)
 
     async def read_bytes(self) -> bytes:
         return await to_thread.run_sync(self._path.read_bytes)
 
-    async def read_text(
-        self, encoding: str | None = None, errors: str | None = None
-    ) -> str:
+    async def read_text(self, encoding: str | None = None, errors: str | None = None) -> str:
         return await to_thread.run_sync(self._path.read_text, encoding, errors)
 
     if sys.version_info >= (3, 12):
 
-        def relative_to(
-            self, *other: str | PathLike[str], walk_up: bool = False
-        ) -> Path:
+        def relative_to(self, *other: str | PathLike[str], walk_up: bool = False) -> Path:
             # relative_to() should work with any PathLike but it doesn't
             others = [pathlib.Path(other) for other in other]
             return Path(self._path.relative_to(*others, walk_up=walk_up))
 
     else:
@@ -652,13 +627,11 @@
 
     async def samefile(self, other_path: str | PathLike[str]) -> bool:
         if isinstance(other_path, Path):
             other_path = other_path._path
 
-        return await to_thread.run_sync(
-            self._path.samefile, other_path, abandon_on_cancel=True
-        )
+        return await to_thread.run_sync(self._path.samefile, other_path, abandon_on_cancel=True)
 
     async def stat(self, *, follow_symlinks: bool = True) -> os.stat_result:
         func = partial(os.stat, follow_symlinks=follow_symlinks)
         return await to_thread.run_sync(func, self._path, abandon_on_cancel=True)
 
@@ -727,13 +700,11 @@
         errors: str | None = None,
         newline: str | None = None,
     ) -> int:
         # Path.write_text() does not support the "newline" parameter before Python 3.10
         def sync_write_text() -> int:
-            with self._path.open(
-                "w", encoding=encoding, errors=errors, newline=newline
-            ) as fp:
+            with self._path.open("w", encoding=encoding, errors=errors, newline=newline) as fp:
                 return fp.write(data)
 
         return await to_thread.run_sync(sync_write_text)
 
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_fileio.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_tasks.py	2025-09-21 04:55:32.150457+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_tasks.py	2025-09-21 05:58:40.947848+00:00
@@ -23,13 +23,11 @@
 
     :param deadline: The time (clock value) when this scope is cancelled automatically
     :param shield: ``True`` to shield the cancel scope from external cancellation
     """
 
-    def __new__(
-        cls, *, deadline: float = math.inf, shield: bool = False
-    ) -> CancelScope:
+    def __new__(cls, *, deadline: float = math.inf, shield: bool = False) -> CancelScope:
         return get_async_backend().create_cancel_scope(shield=shield, deadline=deadline)
 
     def cancel(self) -> None:
         """Cancel this scope immediately."""
         raise NotImplementedError
@@ -91,13 +89,11 @@
     ) -> bool:
         raise NotImplementedError
 
 
 @contextmanager
-def fail_after(
-    delay: float | None, shield: bool = False
-) -> Generator[CancelScope, None, None]:
+def fail_after(delay: float | None, shield: bool = False) -> Generator[CancelScope, None, None]:
     """
     Create a context manager which raises a :class:`TimeoutError` if does not finish in
     time.
 
     :param delay: maximum allowed time (in seconds) before raising the exception, or
@@ -107,13 +103,11 @@
     :rtype: :class:`~typing.ContextManager`\\[:class:`~anyio.CancelScope`\\]
 
     """
     current_time = get_async_backend().current_time
     deadline = (current_time() + delay) if delay is not None else math.inf
-    with get_async_backend().create_cancel_scope(
-        deadline=deadline, shield=shield
-    ) as cancel_scope:
+    with get_async_backend().create_cancel_scope(deadline=deadline, shield=shield) as cancel_scope:
         yield cancel_scope
 
     if cancel_scope.cancelled_caught and current_time() >= cancel_scope.deadline:
         raise TimeoutError
 
@@ -126,13 +120,11 @@
         ``None`` to disable the timeout
     :param shield: ``True`` to shield the cancel scope from external cancellation
     :return: a cancel scope
 
     """
-    deadline = (
-        (get_async_backend().current_time() + delay) if delay is not None else math.inf
-    )
+    deadline = (get_async_backend().current_time() + delay) if delay is not None else math.inf
     return get_async_backend().create_cancel_scope(deadline=deadline, shield=shield)
 
 
 def current_effective_deadline() -> float:
     """
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_tasks.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_tempfile.py	2025-09-21 04:55:32.150592+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_tempfile.py	2025-09-21 05:58:41.163041+00:00
@@ -200,13 +200,11 @@
         }
         if sys.version_info >= (3, 12):
             self._params["delete_on_close"] = delete_on_close
 
     async def __aenter__(self) -> AsyncFile[AnyStr]:
-        fp = await to_thread.run_sync(
-            lambda: tempfile.NamedTemporaryFile(**self._params)
-        )
+        fp = await to_thread.run_sync(lambda: tempfile.NamedTemporaryFile(**self._params))
         self._async_file = AsyncFile(fp)
         return self._async_file
 
     async def __aexit__(
         self,
@@ -322,13 +320,11 @@
             return
 
         self._rolled = True
         buffer = self._fp
         buffer.seek(0)
-        self._fp = await to_thread.run_sync(
-            lambda: tempfile.TemporaryFile(**self._tempfile_params)
-        )
+        self._fp = await to_thread.run_sync(lambda: tempfile.TemporaryFile(**self._tempfile_params))
         await self.write(buffer.read())
         buffer.close()
 
     @property
     def closed(self) -> bool:
@@ -425,13 +421,11 @@
     @overload
     async def writelines(
         self: SpooledTemporaryFile[bytes], lines: Iterable[ReadableBuffer]
     ) -> None: ...
     @overload
-    async def writelines(
-        self: SpooledTemporaryFile[str], lines: Iterable[str]
-    ) -> None: ...
+    async def writelines(self: SpooledTemporaryFile[str], lines: Iterable[str]) -> None: ...
 
     async def writelines(self, lines: Iterable[str] | Iterable[ReadableBuffer]) -> None:
         """
         Asynchronously write a list of lines to the spooled temporary file.
 
@@ -494,25 +488,21 @@
             params["ignore_cleanup_errors"] = self.ignore_cleanup_errors
 
         if sys.version_info >= (3, 12):
             params["delete"] = self.delete
 
-        self._tempdir = await to_thread.run_sync(
-            lambda: tempfile.TemporaryDirectory(**params)
-        )
+        self._tempdir = await to_thread.run_sync(lambda: tempfile.TemporaryDirectory(**params))
         return await to_thread.run_sync(self._tempdir.__enter__)
 
     async def __aexit__(
         self,
         exc_type: type[BaseException] | None,
         exc_value: BaseException | None,
         traceback: TracebackType | None,
     ) -> None:
         if self._tempdir is not None:
-            await to_thread.run_sync(
-                self._tempdir.__exit__, exc_type, exc_value, traceback
-            )
+            await to_thread.run_sync(self._tempdir.__exit__, exc_type, exc_value, traceback)
 
     async def cleanup(self) -> None:
         if self._tempdir is not None:
             await to_thread.run_sync(self._tempdir.cleanup)
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_tempfile.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_streams.py	2025-09-21 04:55:32.151886+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_streams.py	2025-09-21 05:58:51.417724+00:00
@@ -18,13 +18,11 @@
 T_Item = TypeVar("T_Item")
 T_co = TypeVar("T_co", covariant=True)
 T_contra = TypeVar("T_contra", contravariant=True)
 
 
-class UnreliableObjectReceiveStream(
-    Generic[T_co], AsyncResource, TypedAttributeProvider
-):
+class UnreliableObjectReceiveStream(Generic[T_co], AsyncResource, TypedAttributeProvider):
     """
     An interface for receiving objects.
 
     This interface makes no guarantees that the received messages arrive in the order in
     which they were sent, or that no messages are missed.
@@ -53,13 +51,11 @@
         :raises ~anyio.BrokenResourceError: if this stream has been rendered unusable
             due to external causes
         """
 
 
-class UnreliableObjectSendStream(
-    Generic[T_contra], AsyncResource, TypedAttributeProvider
-):
+class UnreliableObjectSendStream(Generic[T_contra], AsyncResource, TypedAttributeProvider):
     """
     An interface for sending objects.
 
     This interface makes no guarantees that the messages sent will reach the
     recipient(s) in the same order in which they were sent, or at all.
@@ -180,13 +176,11 @@
 #: Type alias for all unreliable bytes-oriented receive streams.
 AnyUnreliableByteReceiveStream: TypeAlias = Union[
     UnreliableObjectReceiveStream[bytes], ByteReceiveStream
 ]
 #: Type alias for all unreliable bytes-oriented send streams.
-AnyUnreliableByteSendStream: TypeAlias = Union[
-    UnreliableObjectSendStream[bytes], ByteSendStream
-]
+AnyUnreliableByteSendStream: TypeAlias = Union[UnreliableObjectSendStream[bytes], ByteSendStream]
 #: Type alias for all unreliable bytes-oriented streams.
 AnyUnreliableByteStream: TypeAlias = Union[UnreliableObjectStream[bytes], ByteStream]
 #: Type alias for all bytes-oriented receive streams.
 AnyByteReceiveStream: TypeAlias = Union[ObjectReceiveStream[bytes], ByteReceiveStream]
 #: Type alias for all bytes-oriented send streams.
@@ -232,8 +226,6 @@
         :raises ConnectionFailed: if the connection fails
         """
 
 
 #: Type alias for all connectables returning bytestreams or bytes-oriented object streams
-AnyByteStreamConnectable: TypeAlias = Union[
-    ObjectStreamConnectable[bytes], ByteStreamConnectable
-]
+AnyByteStreamConnectable: TypeAlias = Union[ObjectStreamConnectable[bytes], ByteStreamConnectable]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_streams.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_sockets.py	2025-09-21 04:55:32.151744+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_sockets.py	2025-09-21 05:58:51.529891+00:00
@@ -44,25 +44,21 @@
     if isinstance(sock_or_fd, int):
         try:
             sock = socket.socket(fileno=sock_or_fd)
         except OSError as exc:
             if exc.errno == errno.ENOTSOCK:
-                raise ValueError(
-                    "the file descriptor does not refer to a socket"
-                ) from exc
+                raise ValueError("the file descriptor does not refer to a socket") from exc
             elif require_connected:
                 raise ValueError("the socket must be connected") from exc
             elif require_bound:
                 raise ValueError("the socket must be bound to a local address") from exc
             else:
                 raise
     elif isinstance(sock_or_fd, socket.socket):
         sock = sock_or_fd
     else:
-        raise TypeError(
-            f"expected an int or socket, got {type(sock_or_fd).__qualname__} instead"
-        )
+        raise TypeError(f"expected an int or socket, got {type(sock_or_fd).__qualname__} instead")
 
     try:
         if require_connected:
             try:
                 sock.getpeername()
@@ -81,12 +77,11 @@
             if not bound_addr:
                 raise ValueError("the socket must be bound to a local address")
 
         if addr_family != socket.AF_UNSPEC and sock.family != addr_family:
             raise ValueError(
-                f"address family mismatch: expected {addr_family.name}, got "
-                f"{sock.family.name}"
+                f"address family mismatch: expected {addr_family.name}, got " f"{sock.family.name}"
             )
 
         if sock.type != sock_type:
             raise ValueError(
                 f"socket type mismatch: expected {sock_type.name}, got {sock.type.name}"
@@ -148,13 +143,11 @@
     def extra_attributes(self) -> Mapping[Any, Callable[[], Any]]:
         from .._core._sockets import convert_ipv6_sockaddr as convert
 
         attributes: dict[Any, Callable[[], Any]] = {
             SocketAttribute.family: lambda: self._raw_socket.family,
-            SocketAttribute.local_address: lambda: convert(
-                self._raw_socket.getsockname()
-            ),
+            SocketAttribute.local_address: lambda: convert(self._raw_socket.getsockname()),
             SocketAttribute.raw_socket: lambda: self._raw_socket,
         }
         try:
             peername: tuple[str, int] | None = convert(self._raw_socket.getpeername())
         except OSError:
@@ -164,13 +157,11 @@
         if peername is not None:
             attributes[SocketAttribute.remote_address] = lambda: peername
 
         # Provide local and remote ports for IP based sockets
         if self._raw_socket.family in (AddressFamily.AF_INET, AddressFamily.AF_INET6):
-            attributes[SocketAttribute.local_port] = (
-                lambda: self._raw_socket.getsockname()[1]
-            )
+            attributes[SocketAttribute.local_port] = lambda: self._raw_socket.getsockname()[1]
             if peername is not None:
                 remote_port = peername[1]
                 attributes[SocketAttribute.remote_port] = lambda: remote_port
 
         return attributes
@@ -342,13 +333,11 @@
             require_connected=True,
         )
         return await get_async_backend().wrap_connected_udp_socket(sock)
 
 
-class UNIXDatagramSocket(
-    UnreliableObjectStream[UNIXDatagramPacketType], _SocketProvider
-):
+class UNIXDatagramSocket(UnreliableObjectStream[UNIXDatagramPacketType], _SocketProvider):
     """
     Represents an unconnected Unix datagram socket.
 
     Supports all relevant extra attributes from :class:`~SocketAttribute`.
     """
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_sockets.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_eventloop.py	2025-09-21 04:55:32.151387+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_eventloop.py	2025-09-21 05:58:52.003310+00:00
@@ -326,13 +326,11 @@
     ]:
         pass
 
     @classmethod
     @abstractmethod
-    async def getnameinfo(
-        cls, sockaddr: IPSockAddrType, flags: int = 0
-    ) -> tuple[str, str]:
+    async def getnameinfo(cls, sockaddr: IPSockAddrType, flags: int = 0) -> tuple[str, str]:
         pass
 
     @classmethod
     @abstractmethod
     async def wait_readable(cls, obj: FileDescriptorLike) -> None:
@@ -378,13 +376,11 @@
     async def wrap_unix_datagram_socket(cls, sock: socket) -> UNIXDatagramSocket:
         pass
 
     @classmethod
     @abstractmethod
-    async def wrap_connected_unix_datagram_socket(
-        cls, sock: socket
-    ) -> ConnectedUNIXDatagramSocket:
+    async def wrap_connected_unix_datagram_socket(cls, sock: socket) -> ConnectedUNIXDatagramSocket:
         pass
 
     @classmethod
     @abstractmethod
     def current_default_thread_limiter(cls) -> CapacityLimiter:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/abc/_eventloop.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_typedattr.py	2025-09-21 04:55:32.150985+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_typedattr.py	2025-09-21 05:58:52.036664+00:00
@@ -24,13 +24,11 @@
 
     def __init_subclass__(cls) -> None:
         annotations: dict[str, Any] = getattr(cls, "__annotations__", {})
         for attrname in dir(cls):
             if not attrname.startswith("_") and attrname not in annotations:
-                raise TypeError(
-                    f"Attribute {attrname!r} is missing its type annotation"
-                )
+                raise TypeError(f"Attribute {attrname!r} is missing its type annotation")
 
         super().__init_subclass__()
 
 
 class TypedAttributeProvider:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_typedattr.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_synchronization.py	2025-09-21 04:55:32.150326+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_synchronization.py	2025-09-21 05:58:52.299964+00:00
@@ -203,13 +203,11 @@
         self._fast_acquire = fast_acquire
 
     @property
     def _lock(self) -> Lock:
         if self._internal_lock is None:
-            self._internal_lock = get_async_backend().create_lock(
-                fast_acquire=self._fast_acquire
-            )
+            self._internal_lock = get_async_backend().create_lock(fast_acquire=self._fast_acquire)
 
         return self._internal_lock
 
     async def __aenter__(self) -> None:
         await self._lock.acquire()
@@ -375,13 +373,11 @@
             raise ValueError("initial_value must be >= 0")
         if max_value is not None:
             if not isinstance(max_value, int):
                 raise TypeError("max_value must be an integer or None")
             if max_value < initial_value:
-                raise ValueError(
-                    "max_value must be equal to or higher than initial_value"
-                )
+                raise ValueError("max_value must be equal to or higher than initial_value")
 
         self._fast_acquire = fast_acquire
 
     async def __aenter__(self) -> Semaphore:
         await self.acquire()
@@ -614,13 +610,11 @@
         self.total_tokens = total_tokens
 
     @property
     def _limiter(self) -> CapacityLimiter:
         if self._internal_limiter is None:
-            self._internal_limiter = get_async_backend().create_capacity_limiter(
-                self._total_tokens
-            )
+            self._internal_limiter = get_async_backend().create_capacity_limiter(self._total_tokens)
 
         return self._internal_limiter
 
     async def __aenter__(self) -> None:
         await self._limiter.__aenter__()
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/_core/_synchronization.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/file.py	2025-09-21 04:55:32.152724+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/file.py	2025-09-21 05:59:00.557478+00:00
@@ -122,13 +122,11 @@
 
     .. versionadded:: 3.0
     """
 
     @classmethod
-    async def from_path(
-        cls, path: str | PathLike[str], append: bool = False
-    ) -> FileWriteStream:
+    async def from_path(cls, path: str | PathLike[str], append: bool = False) -> FileWriteStream:
         """
         Create a file write stream by opening the given file for writing.
 
         :param path: path of the file to write to
         :param append: if ``True``, open the file for appending; if ``False``, any
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/file.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/lowlevel.py	2025-09-21 04:55:32.147418+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/lowlevel.py	2025-09-21 05:59:00.727288+00:00
@@ -96,13 +96,11 @@
 
     NO_VALUE_SET: Literal[_NoValueSet.NO_VALUE_SET] = _NoValueSet.NO_VALUE_SET
 
     _token_wrappers: set[_TokenWrapper] = set()
 
-    def __init__(
-        self, name: str, default: T | Literal[_NoValueSet.NO_VALUE_SET] = NO_VALUE_SET
-    ):
+    def __init__(self, name: str, default: T | Literal[_NoValueSet.NO_VALUE_SET] = NO_VALUE_SET):
         self._name = name
         self._default = default
 
     @property
     def _current_vars(self) -> dict[RunVar[T], T]:
@@ -117,24 +115,20 @@
     def get(self, default: D) -> T | D: ...
 
     @overload
     def get(self) -> T: ...
 
-    def get(
-        self, default: D | Literal[_NoValueSet.NO_VALUE_SET] = NO_VALUE_SET
-    ) -> T | D:
+    def get(self, default: D | Literal[_NoValueSet.NO_VALUE_SET] = NO_VALUE_SET) -> T | D:
         try:
             return self._current_vars[self]
         except KeyError:
             if default is not RunVar.NO_VALUE_SET:
                 return default
             elif self._default is not RunVar.NO_VALUE_SET:
                 return self._default
 
-        raise LookupError(
-            f'Run variable "{self._name}" has no value and no default set'
-        )
+        raise LookupError(f'Run variable "{self._name}" has no value and no default set')
 
     def set(self, value: T) -> RunvarToken[T]:
         current_vars = self._current_vars
         token = RunvarToken(self, current_vars.get(self, RunVar.NO_VALUE_SET))
         current_vars[self] = value
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/pytest_plugin.py	2025-09-21 04:55:32.147689+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/pytest_plugin.py	2025-09-21 05:59:00.729008+00:00
@@ -33,13 +33,11 @@
 
     raise TypeError("anyio_backend must be either a string or tuple of (string, dict)")
 
 
 @contextmanager
-def get_runner(
-    backend_name: str, backend_options: dict[str, Any]
-) -> Iterator[TestRunner]:
+def get_runner(backend_name: str, backend_options: dict[str, Any]) -> Iterator[TestRunner]:
     global _current_runner, _runner_leases, _runner_stack
     if _current_runner is None:
         asynclib = get_async_backend(backend_name)
         _runner_stack = ExitStack()
         if sniffio.current_async_library_cvar.get(None) is None:
@@ -47,13 +45,11 @@
             # async library
             token = sniffio.current_async_library_cvar.set(backend_name)
             _runner_stack.callback(sniffio.current_async_library_cvar.reset, token)
 
         backend_options = backend_options or {}
-        _current_runner = _runner_stack.enter_context(
-            asynclib.create_test_runner(backend_options)
-        )
+        _current_runner = _runner_stack.enter_context(asynclib.create_test_runner(backend_options))
 
     _runner_leases += 1
     try:
         yield _current_runner
     finally:
@@ -71,19 +67,13 @@
     )
 
 
 @pytest.hookimpl(hookwrapper=True)
 def pytest_fixture_setup(fixturedef: Any, request: Any) -> Generator[Any]:
-    def wrapper(
-        *args: Any, anyio_backend: Any, request: SubRequest, **kwargs: Any
-    ) -> Any:
+    def wrapper(*args: Any, anyio_backend: Any, request: SubRequest, **kwargs: Any) -> Any:
         # Rebind any fixture methods to the request instance
-        if (
-            request.instance
-            and ismethod(func)
-            and type(func.__self__) is type(request.instance)
-        ):
+        if request.instance and ismethod(func) and type(func.__self__) is type(request.instance):
             local_func = func.__func__.__get__(request.instance)
         else:
             local_func = func
 
         backend_name, backend_options = extract_backend_and_options(anyio_backend)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/lowlevel.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/pytest_plugin.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/from_thread.py	2025-09-21 04:55:32.147287+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/from_thread.py	2025-09-21 05:59:00.833736+00:00
@@ -50,20 +50,16 @@
     """
     try:
         async_backend = threadlocals.current_async_backend
         token = threadlocals.current_token
     except AttributeError:
-        raise RuntimeError(
-            "This function can only be run from an AnyIO worker thread"
-        ) from None
+        raise RuntimeError("This function can only be run from an AnyIO worker thread") from None
 
     return async_backend.run_async_from_thread(func, args, token=token)
 
 
-def run_sync(
-    func: Callable[[Unpack[PosArgsT]], T_Retval], *args: Unpack[PosArgsT]
-) -> T_Retval:
+def run_sync(func: Callable[[Unpack[PosArgsT]], T_Retval], *args: Unpack[PosArgsT]) -> T_Retval:
     """
     Call a function in the event loop thread from a worker thread.
 
     :param func: a callable
     :param args: positional arguments for the callable
@@ -72,13 +68,11 @@
     """
     try:
         async_backend = threadlocals.current_async_backend
         token = threadlocals.current_token
     except AttributeError:
-        raise RuntimeError(
-            "This function can only be run from an AnyIO worker thread"
-        ) from None
+        raise RuntimeError("This function can only be run from an AnyIO worker thread") from None
 
     return async_backend.run_sync_from_thread(func, args, token=token)
 
 
 class _BlockingAsyncContextManager(Generic[T_co], AbstractContextManager):
@@ -87,13 +81,11 @@
     _exit_event: Event
     _exit_exc_info: tuple[
         type[BaseException] | None, BaseException | None, TracebackType | None
     ] = (None, None, None)
 
-    def __init__(
-        self, async_cm: AbstractAsyncContextManager[T_co], portal: BlockingPortal
-    ):
+    def __init__(self, async_cm: AbstractAsyncContextManager[T_co], portal: BlockingPortal):
         self._async_cm = async_cm
         self._portal = portal
 
     async def run_async_cm(self) -> bool | None:
         try:
@@ -170,13 +162,11 @@
 
     def _check_running(self) -> None:
         if self._event_loop_thread_id is None:
             raise RuntimeError("This portal is not running")
         if self._event_loop_thread_id == get_ident():
-            raise RuntimeError(
-                "This method cannot be called from the event loop thread"
-            )
+            raise RuntimeError("This method cannot be called from the event loop thread")
 
     async def sleep_until_stopped(self) -> None:
         """Sleep until :meth:`stop` is called."""
         await self._stop_event.wait()
 
@@ -363,13 +353,11 @@
                 if future.cancelled():
                     task_status_future.cancel()
                 elif future.exception():
                     task_status_future.set_exception(future.exception())
                 else:
-                    exc = RuntimeError(
-                        "Task exited without calling task_status.started()"
-                    )
+                    exc = RuntimeError("Task exited without calling task_status.started()")
                     task_status_future.set_exception(exc)
 
         self._check_running()
         task_status_future: Future = Future()
         task_status = _BlockingPortalTaskStatus(task_status_future)
@@ -416,20 +404,16 @@
     backend: str = "asyncio"
     backend_options: dict[str, Any] | None = None
     _lock: Lock = field(init=False, default_factory=Lock)
     _leases: int = field(init=False, default=0)
     _portal: BlockingPortal = field(init=False)
-    _portal_cm: AbstractContextManager[BlockingPortal] | None = field(
-        init=False, default=None
-    )
+    _portal_cm: AbstractContextManager[BlockingPortal] | None = field(init=False, default=None)
 
     def __enter__(self) -> BlockingPortal:
         with self._lock:
             if self._portal_cm is None:
-                self._portal_cm = start_blocking_portal(
-                    self.backend, self.backend_options
-                )
+                self._portal_cm = start_blocking_portal(self.backend, self.backend_options)
                 self._portal = self._portal_cm.__enter__()
 
             self._leases += 1
             return self._portal
 
@@ -484,13 +468,11 @@
             await portal_.sleep_until_stopped()
 
     def run_blocking_portal() -> None:
         if future.set_running_or_notify_cancel():
             try:
-                _eventloop.run(
-                    run_portal, backend=backend, backend_options=backend_options
-                )
+                _eventloop.run(run_portal, backend=backend, backend_options=backend_options)
             except BaseException as exc:
                 if not future.done():
                     future.set_exception(exc)
 
     future: Future[BlockingPortal] = Future()
@@ -526,10 +508,8 @@
 
     """
     try:
         async_backend: AsyncBackend = threadlocals.current_async_backend
     except AttributeError:
-        raise RuntimeError(
-            "This function can only be run from an AnyIO worker thread"
-        ) from None
+        raise RuntimeError("This function can only be run from an AnyIO worker thread") from None
 
     async_backend.check_cancelled()
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/from_thread.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/text.py	2025-09-21 04:55:32.153144+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/text.py	2025-09-21 05:59:01.078755+00:00
@@ -128,13 +128,11 @@
 
     def __post_init__(self, encoding: str, errors: str) -> None:
         self._receive_stream = TextReceiveStream(
             self.transport_stream, encoding=encoding, errors=errors
         )
-        self._send_stream = TextSendStream(
-            self.transport_stream, encoding=encoding, errors=errors
-        )
+        self._send_stream = TextSendStream(self.transport_stream, encoding=encoding, errors=errors)
 
     async def receive(self) -> str:
         return await self._receive_stream.receive()
 
     async def send(self, item: str) -> None:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/text.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/memory.py	2025-09-21 04:55:32.152873+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/memory.py	2025-09-21 05:59:01.275410+00:00
@@ -52,13 +52,11 @@
     open_send_channels: int = field(init=False, default=0)
     open_receive_channels: int = field(init=False, default=0)
     waiting_receivers: OrderedDict[Event, MemoryObjectItemReceiver[T_Item]] = field(
         init=False, default_factory=OrderedDict
     )
-    waiting_senders: OrderedDict[Event, T_Item] = field(
-        init=False, default_factory=OrderedDict
-    )
+    waiting_senders: OrderedDict[Event, T_Item] = field(init=False, default_factory=OrderedDict)
 
     def statistics(self) -> MemoryObjectStreamStatistics:
         return MemoryObjectStreamStatistics(
             len(self.buffer),
             self.max_buffer_size,
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/memory.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_decorator.py	2025-09-21 04:55:30.955177+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_decorator.py	2025-09-21 05:59:05.056385+00:00
@@ -2,16 +2,11 @@
 import asyncio
 import logging
 import operator
 from typing import Any, Callable, Iterable, Optional, Type, Union
 
-from backoff._common import (
-    _prepare_logger,
-    _config_handlers,
-    _log_backoff,
-    _log_giveup
-)
+from backoff._common import _prepare_logger, _config_handlers, _log_backoff, _log_giveup
 from backoff._jitter import full_jitter
 from backoff import _async, _sync
 from backoff._typing import (
     _CallableT,
     _Handler,
@@ -22,23 +17,25 @@
     _Predicate,
     _WaitGenerator,
 )
 
 
-def on_predicate(wait_gen: _WaitGenerator,
-                 predicate: _Predicate[Any] = operator.not_,
-                 *,
-                 max_tries: Optional[_MaybeCallable[int]] = None,
-                 max_time: Optional[_MaybeCallable[float]] = None,
-                 jitter: Union[_Jitterer, None] = full_jitter,
-                 on_success: Union[_Handler, Iterable[_Handler], None] = None,
-                 on_backoff: Union[_Handler, Iterable[_Handler], None] = None,
-                 on_giveup: Union[_Handler, Iterable[_Handler], None] = None,
-                 logger: _MaybeLogger = 'backoff',
-                 backoff_log_level: int = logging.INFO,
-                 giveup_log_level: int = logging.ERROR,
-                 **wait_gen_kwargs: Any) -> Callable[[_CallableT], _CallableT]:
+def on_predicate(
+    wait_gen: _WaitGenerator,
+    predicate: _Predicate[Any] = operator.not_,
+    *,
+    max_tries: Optional[_MaybeCallable[int]] = None,
+    max_time: Optional[_MaybeCallable[float]] = None,
+    jitter: Union[_Jitterer, None] = full_jitter,
+    on_success: Union[_Handler, Iterable[_Handler], None] = None,
+    on_backoff: Union[_Handler, Iterable[_Handler], None] = None,
+    on_giveup: Union[_Handler, Iterable[_Handler], None] = None,
+    logger: _MaybeLogger = "backoff",
+    backoff_log_level: int = logging.INFO,
+    giveup_log_level: int = logging.ERROR,
+    **wait_gen_kwargs: Any
+) -> Callable[[_CallableT], _CallableT]:
     """Returns decorator for backoff and retry triggered by predicate.
 
     Args:
         wait_gen: A generator yielding successive wait times in
             seconds.
@@ -78,26 +75,21 @@
         **wait_gen_kwargs: Any additional keyword args specified will be
             passed to wait_gen when it is initialized.  Any callable
             args will first be evaluated and their return values passed.
             This is useful for runtime configuration.
     """
+
     def decorate(target):
         nonlocal logger, on_success, on_backoff, on_giveup
 
         logger = _prepare_logger(logger)
         on_success = _config_handlers(on_success)
         on_backoff = _config_handlers(
-            on_backoff,
-            default_handler=_log_backoff,
-            logger=logger,
-            log_level=backoff_log_level
+            on_backoff, default_handler=_log_backoff, logger=logger, log_level=backoff_log_level
         )
         on_giveup = _config_handlers(
-            on_giveup,
-            default_handler=_log_giveup,
-            logger=logger,
-            log_level=giveup_log_level
+            on_giveup, default_handler=_log_giveup, logger=logger, log_level=giveup_log_level
         )
 
         if asyncio.iscoroutinefunction(target):
             retry = _async.retry_predicate
         else:
@@ -111,32 +103,34 @@
             max_time=max_time,
             jitter=jitter,
             on_success=on_success,
             on_backoff=on_backoff,
             on_giveup=on_giveup,
-            wait_gen_kwargs=wait_gen_kwargs
+            wait_gen_kwargs=wait_gen_kwargs,
         )
 
     # Return a function which decorates a target with a retry loop.
     return decorate
 
 
-def on_exception(wait_gen: _WaitGenerator,
-                 exception: _MaybeSequence[Type[Exception]],
-                 *,
-                 max_tries: Optional[_MaybeCallable[int]] = None,
-                 max_time: Optional[_MaybeCallable[float]] = None,
-                 jitter: Union[_Jitterer, None] = full_jitter,
-                 giveup: _Predicate[Exception] = lambda e: False,
-                 on_success: Union[_Handler, Iterable[_Handler], None] = None,
-                 on_backoff: Union[_Handler, Iterable[_Handler], None] = None,
-                 on_giveup: Union[_Handler, Iterable[_Handler], None] = None,
-                 raise_on_giveup: bool = True,
-                 logger: _MaybeLogger = 'backoff',
-                 backoff_log_level: int = logging.INFO,
-                 giveup_log_level: int = logging.ERROR,
-                 **wait_gen_kwargs: Any) -> Callable[[_CallableT], _CallableT]:
+def on_exception(
+    wait_gen: _WaitGenerator,
+    exception: _MaybeSequence[Type[Exception]],
+    *,
+    max_tries: Optional[_MaybeCallable[int]] = None,
+    max_time: Optional[_MaybeCallable[float]] = None,
+    jitter: Union[_Jitterer, None] = full_jitter,
+    giveup: _Predicate[Exception] = lambda e: False,
+    on_success: Union[_Handler, Iterable[_Handler], None] = None,
+    on_backoff: Union[_Handler, Iterable[_Handler], None] = None,
+    on_giveup: Union[_Handler, Iterable[_Handler], None] = None,
+    raise_on_giveup: bool = True,
+    logger: _MaybeLogger = "backoff",
+    backoff_log_level: int = logging.INFO,
+    giveup_log_level: int = logging.ERROR,
+    **wait_gen_kwargs: Any
+) -> Callable[[_CallableT], _CallableT]:
     """Returns decorator for backoff and retry triggered by exception.
 
     Args:
         wait_gen: A generator yielding successive wait times in
             seconds.
@@ -178,10 +172,11 @@
         **wait_gen_kwargs: Any additional keyword args specified will be
             passed to wait_gen when it is initialized.  Any callable
             args will first be evaluated and their return values passed.
             This is useful for runtime configuration.
     """
+
     def decorate(target):
         nonlocal logger, on_success, on_backoff, on_giveup
 
         logger = _prepare_logger(logger)
         on_success = _config_handlers(on_success)
@@ -213,10 +208,10 @@
             giveup=giveup,
             on_success=on_success,
             on_backoff=on_backoff,
             on_giveup=on_giveup,
             raise_on_giveup=raise_on_giveup,
-            wait_gen_kwargs=wait_gen_kwargs
+            wait_gen_kwargs=wait_gen_kwargs,
         )
 
     # Return a function which decorates a target with a retry loop.
     return decorate
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_decorator.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_common.py	2025-09-21 04:55:30.955013+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_common.py	2025-09-21 05:59:05.140549+00:00
@@ -6,11 +6,11 @@
 import traceback
 import warnings
 
 
 # Use module-specific logger with a default null handler.
-_logger = logging.getLogger('backoff')
+_logger = logging.getLogger("backoff")
 _logger.addHandler(logging.NullHandler())  # pragma: no cover
 _logger.setLevel(logging.INFO)
 
 
 # Evaluate arg that can be either a fixed value or a callable.
@@ -62,28 +62,24 @@
     return logger
 
 
 # Configure handler list with user specified handler and optionally
 # with a default handler bound to the specified logger.
-def _config_handlers(
-    user_handlers, *, default_handler=None, logger=None, log_level=None
-):
+def _config_handlers(user_handlers, *, default_handler=None, logger=None, log_level=None):
     handlers = []
     if logger is not None:
         assert log_level is not None, "Log level is not specified"
         # bind the specified logger to the default log handler
-        log_handler = functools.partial(
-            default_handler, logger=logger, log_level=log_level
-        )
+        log_handler = functools.partial(default_handler, logger=logger, log_level=log_level)
         handlers.append(log_handler)
 
     if user_handlers is None:
         return handlers
 
     # user specified handlers can either be an iterable of handlers
     # or a single handler. either way append them to the list.
-    if hasattr(user_handlers, '__iter__'):
+    if hasattr(user_handlers, "__iter__"):
         # add all handlers in the iterable
         handlers += list(user_handlers)
     else:
         # append a single handler
         handlers.append(user_handlers)
@@ -92,29 +88,29 @@
 
 
 # Default backoff handler
 def _log_backoff(details, logger, log_level):
     msg = "Backing off %s(...) for %.1fs (%s)"
-    log_args = [details['target'].__name__, details['wait']]
+    log_args = [details["target"].__name__, details["wait"]]
 
     exc_typ, exc, _ = sys.exc_info()
     if exc is not None:
         exc_fmt = traceback.format_exception_only(exc_typ, exc)[-1]
         log_args.append(exc_fmt.rstrip("\n"))
     else:
-        log_args.append(details['value'])
+        log_args.append(details["value"])
     logger.log(log_level, msg, *log_args)
 
 
 # Default giveup handler
 def _log_giveup(details, logger, log_level):
     msg = "Giving up %s(...) after %d tries (%s)"
-    log_args = [details['target'].__name__, details['tries']]
+    log_args = [details["target"].__name__, details["tries"]]
 
     exc_typ, exc, _ = sys.exc_info()
     if exc is not None:
         exc_fmt = traceback.format_exception_only(exc_typ, exc)[-1]
         log_args.append(exc_fmt.rstrip("\n"))
     else:
-        log_args.append(details['value'])
+        log_args.append(details["value"])
 
     logger.log(log_level, msg, *log_args)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_common.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_async.py	2025-09-21 04:55:30.954826+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_async.py	2025-09-21 05:59:05.236329+00:00
@@ -2,48 +2,55 @@
 import datetime
 import functools
 import asyncio
 from datetime import timedelta
 
-from backoff._common import (_init_wait_gen, _maybe_call, _next_wait)
+from backoff._common import _init_wait_gen, _maybe_call, _next_wait
 
 
 def _ensure_coroutine(coro_or_func):
     if asyncio.iscoroutinefunction(coro_or_func):
         return coro_or_func
     else:
+
         @functools.wraps(coro_or_func)
         async def f(*args, **kwargs):
             return coro_or_func(*args, **kwargs)
+
         return f
 
 
 def _ensure_coroutines(coros_or_funcs):
     return [_ensure_coroutine(f) for f in coros_or_funcs]
 
 
-async def _call_handlers(handlers,
-                         *,
-                         target, args, kwargs, tries, elapsed,
-                         **extra):
+async def _call_handlers(handlers, *, target, args, kwargs, tries, elapsed, **extra):
     details = {
-        'target': target,
-        'args': args,
-        'kwargs': kwargs,
-        'tries': tries,
-        'elapsed': elapsed,
+        "target": target,
+        "args": args,
+        "kwargs": kwargs,
+        "tries": tries,
+        "elapsed": elapsed,
     }
     details.update(extra)
     for handler in handlers:
         await handler(details)
 
 
-def retry_predicate(target, wait_gen, predicate,
-                    *,
-                    max_tries, max_time, jitter,
-                    on_success, on_backoff, on_giveup,
-                    wait_gen_kwargs):
+def retry_predicate(
+    target,
+    wait_gen,
+    predicate,
+    *,
+    max_tries,
+    max_time,
+    jitter,
+    on_success,
+    on_backoff,
+    on_giveup,
+    wait_gen_kwargs
+):
     on_success = _ensure_coroutines(on_success)
     on_backoff = _ensure_coroutines(on_backoff)
     on_giveup = _ensure_coroutines(on_giveup)
 
     # Easy to implement, please report if you need this.
@@ -73,27 +80,24 @@
                 "elapsed": elapsed,
             }
 
             ret = await target(*args, **kwargs)
             if predicate(ret):
-                max_tries_exceeded = (tries == max_tries_value)
-                max_time_exceeded = (max_time_value is not None and
-                                     elapsed >= max_time_value)
+                max_tries_exceeded = tries == max_tries_value
+                max_time_exceeded = max_time_value is not None and elapsed >= max_time_value
 
                 if max_tries_exceeded or max_time_exceeded:
                     await _call_handlers(on_giveup, **details, value=ret)
                     break
 
                 try:
-                    seconds = _next_wait(wait, ret, jitter, elapsed,
-                                         max_time_value)
+                    seconds = _next_wait(wait, ret, jitter, elapsed, max_time_value)
                 except StopIteration:
                     await _call_handlers(on_giveup, **details, value=ret)
                     break
 
-                await _call_handlers(on_backoff, **details, value=ret,
-                                     wait=seconds)
+                await _call_handlers(on_backoff, **details, value=ret, wait=seconds)
 
                 # Note: there is no convenient way to pass explicit event
                 # loop to decorator, so here we assume that either default
                 # thread event loop is set and correct (it mostly is
                 # by default), or Python >= 3.5.3 or Python >= 3.6 is used
@@ -111,15 +115,25 @@
         return ret
 
     return retry
 
 
-def retry_exception(target, wait_gen, exception,
-                    *,
-                    max_tries, max_time, jitter, giveup,
-                    on_success, on_backoff, on_giveup, raise_on_giveup,
-                    wait_gen_kwargs):
+def retry_exception(
+    target,
+    wait_gen,
+    exception,
+    *,
+    max_tries,
+    max_time,
+    jitter,
+    giveup,
+    on_success,
+    on_backoff,
+    on_giveup,
+    raise_on_giveup,
+    wait_gen_kwargs
+):
     on_success = _ensure_coroutines(on_success)
     on_backoff = _ensure_coroutines(on_backoff)
     on_giveup = _ensure_coroutines(on_giveup)
     giveup = _ensure_coroutine(giveup)
 
@@ -149,29 +163,26 @@
 
             try:
                 ret = await target(*args, **kwargs)
             except exception as e:
                 giveup_result = await giveup(e)
-                max_tries_exceeded = (tries == max_tries_value)
-                max_time_exceeded = (max_time_value is not None and
-                                     elapsed >= max_time_value)
+                max_tries_exceeded = tries == max_tries_value
+                max_time_exceeded = max_time_value is not None and elapsed >= max_time_value
 
                 if giveup_result or max_tries_exceeded or max_time_exceeded:
                     await _call_handlers(on_giveup, **details, exception=e)
                     if raise_on_giveup:
                         raise
                     return None
 
                 try:
-                    seconds = _next_wait(wait, e, jitter, elapsed,
-                                         max_time_value)
+                    seconds = _next_wait(wait, e, jitter, elapsed, max_time_value)
                 except StopIteration:
                     await _call_handlers(on_giveup, **details, exception=e)
                     raise e
 
-                await _call_handlers(on_backoff, **details, wait=seconds,
-                                     exception=e)
+                await _call_handlers(on_backoff, **details, wait=seconds, exception=e)
 
                 # Note: there is no convenient way to pass explicit event
                 # loop to decorator, so here we assume that either default
                 # thread event loop is set and correct (it mostly is
                 # by default), or Python >= 3.5.3 or Python >= 3.6 is used
@@ -183,6 +194,7 @@
                 await asyncio.sleep(seconds)
             else:
                 await _call_handlers(on_success, **details)
 
                 return ret
+
     return retry
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/__init__.py	2025-09-21 04:55:30.954682+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/__init__.py	2025-09-21 05:59:05.238727+00:00
@@ -15,16 +15,16 @@
 from backoff._decorator import on_exception, on_predicate
 from backoff._jitter import full_jitter, random_jitter
 from backoff._wait_gen import constant, expo, fibo, runtime
 
 __all__ = [
-    'on_predicate',
-    'on_exception',
-    'constant',
-    'expo',
-    'fibo',
-    'runtime',
-    'full_jitter',
-    'random_jitter',
+    "on_predicate",
+    "on_exception",
+    "constant",
+    "expo",
+    "fibo",
+    "runtime",
+    "full_jitter",
+    "random_jitter",
 ]
 
 __version__ = "2.2.1"
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_async.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/__init__.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/to_process.py	2025-09-21 04:55:32.147990+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/to_process.py	2025-09-21 05:59:05.371470+00:00
@@ -62,13 +62,11 @@
         try:
             await stdin.send(pickled_cmd)
             response = await buffered.receive_until(b"\n", 50)
             status, length = response.split(b" ")
             if status not in (b"RETURN", b"EXCEPTION"):
-                raise RuntimeError(
-                    f"Worker process returned unexpected response: {response!r}"
-                )
+                raise RuntimeError(f"Worker process returned unexpected response: {response!r}")
 
             pickled_response = await buffered.receive_exactly(int(length))
         except BaseException as exc:
             workers.discard(process)
             try:
@@ -111,13 +109,11 @@
         process: Process
         while idle_workers:
             process, idle_since = idle_workers.pop()
             if process.returncode is None:
                 stdin = cast(ByteSendStream, process.stdin)
-                buffered = BufferedByteReceiveStream(
-                    cast(ByteReceiveStream, process.stdout)
-                )
+                buffered = BufferedByteReceiveStream(cast(ByteReceiveStream, process.stdout))
 
                 # Prune any other workers that have been idle for WORKER_MAX_IDLE_TIME
                 # seconds or longer
                 now = current_time()
                 killed_processes: list[Process] = []
@@ -137,18 +133,14 @@
                 break
 
             workers.remove(process)
         else:
             command = [sys.executable, "-u", "-m", __name__]
-            process = await open_process(
-                command, stdin=subprocess.PIPE, stdout=subprocess.PIPE
-            )
+            process = await open_process(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
             try:
                 stdin = cast(ByteSendStream, process.stdin)
-                buffered = BufferedByteReceiveStream(
-                    cast(ByteReceiveStream, process.stdout)
-                )
+                buffered = BufferedByteReceiveStream(cast(ByteReceiveStream, process.stdout))
                 with fail_after(20):
                     message = await buffered.receive(6)
 
                 if message != b"READY\n":
                     raise BrokenWorkerProcess(
@@ -163,13 +155,11 @@
                 await send_raw_command(pickled)
             except (BrokenWorkerProcess, get_cancelled_exc_class()):
                 raise
             except BaseException as exc:
                 process.kill()
-                raise BrokenWorkerProcess(
-                    "Error during worker process initialization"
-                ) from exc
+                raise BrokenWorkerProcess("Error during worker process initialization") from exc
 
             workers.add(process)
 
         with CancelScope(shield=not cancellable):
             try:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/to_process.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/to_interpreter.py	2025-09-21 04:55:32.147832+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/to_interpreter.py	2025-09-21 05:59:05.387465+00:00
@@ -49,10 +49,11 @@
 
             if is_exception:
                 raise res
 
             return res
+
 elif sys.version_info >= (3, 13):
     import _interpqueues
     import _interpreters
 
     UNBOUND: Final = 2  # I have no clue how this works, but it was used in the stdlib
@@ -94,13 +95,11 @@
         last_used: float = 0
 
         def __init__(self) -> None:
             self._interpreter_id = _interpreters.create()
             self._queue_id = _interpqueues.create(1, *QUEUE_UNPICKLE_ARGS)
-            _interpreters.set___main___attrs(
-                self._interpreter_id, {"queue_id": self._queue_id}
-            )
+            _interpreters.set___main___attrs(self._interpreter_id, {"queue_id": self._queue_id})
 
         def destroy(self) -> None:
             _interpqueues.destroy(self._queue_id)
             _interpreters.destroy(self._interpreter_id)
 
@@ -124,10 +123,11 @@
 
             if is_exception:
                 raise res
 
             return res
+
 else:
 
     class Worker:
         last_used: float = 0
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/to_interpreter.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/tls.py	2025-09-21 04:55:32.153353+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/tls.py	2025-09-21 05:59:05.469186+00:00
@@ -125,13 +125,11 @@
         """
         if server_side is None:
             server_side = not hostname
 
         if not ssl_context:
-            purpose = (
-                ssl.Purpose.CLIENT_AUTH if server_side else ssl.Purpose.SERVER_AUTH
-            )
+            purpose = ssl.Purpose.CLIENT_AUTH if server_side else ssl.Purpose.SERVER_AUTH
             ssl_context = ssl.create_default_context(purpose)
 
             # Re-enable detection of unexpected EOFs if it was disabled by Python
             if hasattr(ssl, "OP_IGNORE_UNEXPECTED_EOF"):
                 ssl_context.options &= ~ssl.OP_IGNORE_UNEXPECTED_EOF
@@ -248,35 +246,28 @@
         match = re.match(r"TLSv(\d+)(?:\.(\d+))?", tls_version)
         if match:
             major, minor = int(match.group(1)), int(match.group(2) or 0)
             if (major, minor) < (1, 3):
                 raise NotImplementedError(
-                    f"send_eof() requires at least TLSv1.3; current "
-                    f"session uses {tls_version}"
+                    f"send_eof() requires at least TLSv1.3; current " f"session uses {tls_version}"
                 )
 
-        raise NotImplementedError(
-            "send_eof() has not yet been implemented for TLS streams"
-        )
+        raise NotImplementedError("send_eof() has not yet been implemented for TLS streams")
 
     @property
     def extra_attributes(self) -> Mapping[Any, Callable[[], Any]]:
         return {
             **self.transport_stream.extra_attributes,
             TLSAttribute.alpn_protocol: self._ssl_object.selected_alpn_protocol,
-            TLSAttribute.channel_binding_tls_unique: (
-                self._ssl_object.get_channel_binding
-            ),
+            TLSAttribute.channel_binding_tls_unique: (self._ssl_object.get_channel_binding),
             TLSAttribute.cipher: self._ssl_object.cipher,
             TLSAttribute.peer_certificate: lambda: self._ssl_object.getpeercert(False),
-            TLSAttribute.peer_certificate_binary: lambda: self._ssl_object.getpeercert(
-                True
+            TLSAttribute.peer_certificate_binary: lambda: self._ssl_object.getpeercert(True),
+            TLSAttribute.server_side: lambda: self._ssl_object.server_side,
+            TLSAttribute.shared_ciphers: lambda: (
+                self._ssl_object.shared_ciphers() if self._ssl_object.server_side else None
             ),
-            TLSAttribute.server_side: lambda: self._ssl_object.server_side,
-            TLSAttribute.shared_ciphers: lambda: self._ssl_object.shared_ciphers()
-            if self._ssl_object.server_side
-            else None,
             TLSAttribute.standard_compatible: lambda: self.standard_compatible,
             TLSAttribute.ssl_object: lambda: self._ssl_object,
             TLSAttribute.tls_version: self._ssl_object.version,
         }
 
@@ -327,13 +318,11 @@
         if not isinstance(exc, get_cancelled_exc_class()):
             # CPython (as of 3.11.5) returns incorrect `sys.exc_info()` here when using
             # any asyncio implementation, so we explicitly pass the exception to log
             # (https://github.com/python/cpython/issues/108668). Trio does not have this
             # issue because it works around the CPython bug.
-            logging.getLogger(__name__).exception(
-                "Error during TLS handshake", exc_info=exc
-            )
+            logging.getLogger(__name__).exception("Error during TLS handshake", exc_info=exc)
 
         # Only reraise base exceptions and cancellation exceptions
         if not isinstance(exc, Exception) or isinstance(exc, get_cancelled_exc_class()):
             raise
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/anyio/streams/tls.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/certifi/core.py	2025-09-21 04:55:30.949864+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/certifi/core.py	2025-09-21 05:59:12.434285+00:00
@@ -2,12 +2,14 @@
 certifi.py
 ~~~~~~~~~~
 
 This module returns the installation location of cacert.pem or its contents.
 """
+
 import sys
 import atexit
+
 
 def exit_cacert_ctx() -> None:
     _CACERT_CTX.__exit__(None, None, None)  # type: ignore[union-attr]
 
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/certifi/core.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/types.py	2025-09-21 04:55:30.955899+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/types.py	2025-09-21 05:59:12.567722+00:00
@@ -1,6 +1,4 @@
 # coding:utf-8
 from ._typing import Details
 
-__all__ = [
-    'Details'
-]
+__all__ = ["Details"]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/types.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_wait_gen.py	2025-09-21 04:55:30.955686+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_wait_gen.py	2025-09-21 05:59:12.599365+00:00
@@ -3,15 +3,12 @@
 import itertools
 from typing import Any, Callable, Generator, Iterable, Optional, Union
 
 
 def expo(
-    base: float = 2,
-    factor: float = 1,
-    max_value: Optional[float] = None
+    base: float = 2, factor: float = 1, max_value: Optional[float] = None
 ) -> Generator[float, Any, None]:
-
     """Generator for exponential decay.
 
     Args:
         base: The mathematical base of the exponentiation operation
         factor: Factor to multiply the exponentiation by.
@@ -21,11 +18,11 @@
     """
     # Advance past initial .send() call
     yield  # type: ignore[misc]
     n = 0
     while True:
-        a = factor * base ** n
+        a = factor * base**n
         if max_value is None or a < max_value:
             yield a
             n += 1
         else:
             yield max_value
@@ -50,13 +47,11 @@
             a, b = b, a + b
         else:
             yield max_value
 
 
-def constant(
-    interval: Union[int, Iterable[float]] = 1
-) -> Generator[float, None, None]:
+def constant(interval: Union[int, Iterable[float]] = 1) -> Generator[float, None, None]:
     """Generator for constant intervals.
 
     Args:
         interval: A constant value to yield or an iterable of such values.
     """
@@ -70,14 +65,11 @@
 
     for val in itr:
         yield val
 
 
-def runtime(
-    *,
-    value: Callable[[Any], float]
-) -> Generator[float, None, None]:
+def runtime(*, value: Callable[[Any], float]) -> Generator[float, None, None]:
     """Generator that is based on parsing the return value or thrown
         exception of the decorated method
 
     Args:
         value: a callable which takes as input the decorated
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_typing.py	2025-09-21 04:55:30.955558+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_typing.py	2025-09-21 05:59:12.617973+00:00
@@ -1,18 +1,18 @@
 # coding:utf-8
 import logging
 import sys
-from typing import (Any, Callable, Coroutine, Dict, Generator, Sequence, Tuple,
-                    TypeVar, Union)
+from typing import Any, Callable, Coroutine, Dict, Generator, Sequence, Tuple, TypeVar, Union
 
 if sys.version_info >= (3, 8):  # pragma: no cover
     from typing import TypedDict
 else:  # pragma: no cover
     # use typing_extensions if installed but don't require it
     try:
         from typing_extensions import TypedDict
     except ImportError:
+
         class TypedDict(dict):
             def __init_subclass__(cls, **kwargs: Any) -> None:
                 return super().__init_subclass__()
 
 
@@ -29,11 +29,11 @@
     value: Any  # present in the on_predicate decorator case
 
 
 T = TypeVar("T")
 
-_CallableT = TypeVar('_CallableT', bound=Callable[..., Any])
+_CallableT = TypeVar("_CallableT", bound=Callable[..., Any])
 _Handler = Union[
     Callable[[Details], None],
     Callable[[Details], Coroutine[Any, Any, None]],
 ]
 _Jitterer = Callable[[float], float]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_typing.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_wait_gen.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_sync.py	2025-09-21 04:55:30.955431+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_sync.py	2025-09-21 05:59:12.717572+00:00
@@ -2,31 +2,39 @@
 import datetime
 import functools
 import time
 from datetime import timedelta
 
-from backoff._common import (_init_wait_gen, _maybe_call, _next_wait)
+from backoff._common import _init_wait_gen, _maybe_call, _next_wait
 
 
 def _call_handlers(hdlrs, target, args, kwargs, tries, elapsed, **extra):
     details = {
-        'target': target,
-        'args': args,
-        'kwargs': kwargs,
-        'tries': tries,
-        'elapsed': elapsed,
+        "target": target,
+        "args": args,
+        "kwargs": kwargs,
+        "tries": tries,
+        "elapsed": elapsed,
     }
     details.update(extra)
     for hdlr in hdlrs:
         hdlr(details)
 
 
-def retry_predicate(target, wait_gen, predicate,
-                    *,
-                    max_tries, max_time, jitter,
-                    on_success, on_backoff, on_giveup,
-                    wait_gen_kwargs):
+def retry_predicate(
+    target,
+    wait_gen,
+    predicate,
+    *,
+    max_tries,
+    max_time,
+    jitter,
+    on_success,
+    on_backoff,
+    on_giveup,
+    wait_gen_kwargs
+):
 
     @functools.wraps(target)
     def retry(*args, **kwargs):
         max_tries_value = _maybe_call(max_tries)
         max_time_value = _maybe_call(max_time)
@@ -45,27 +53,24 @@
                 "elapsed": elapsed,
             }
 
             ret = target(*args, **kwargs)
             if predicate(ret):
-                max_tries_exceeded = (tries == max_tries_value)
-                max_time_exceeded = (max_time_value is not None and
-                                     elapsed >= max_time_value)
+                max_tries_exceeded = tries == max_tries_value
+                max_time_exceeded = max_time_value is not None and elapsed >= max_time_value
 
                 if max_tries_exceeded or max_time_exceeded:
                     _call_handlers(on_giveup, **details, value=ret)
                     break
 
                 try:
-                    seconds = _next_wait(wait, ret, jitter, elapsed,
-                                         max_time_value)
+                    seconds = _next_wait(wait, ret, jitter, elapsed, max_time_value)
                 except StopIteration:
                     _call_handlers(on_giveup, **details)
                     break
 
-                _call_handlers(on_backoff, **details,
-                               value=ret, wait=seconds)
+                _call_handlers(on_backoff, **details, value=ret, wait=seconds)
 
                 time.sleep(seconds)
                 continue
             else:
                 _call_handlers(on_success, **details, value=ret)
@@ -74,15 +79,25 @@
         return ret
 
     return retry
 
 
-def retry_exception(target, wait_gen, exception,
-                    *,
-                    max_tries, max_time, jitter, giveup,
-                    on_success, on_backoff, on_giveup, raise_on_giveup,
-                    wait_gen_kwargs):
+def retry_exception(
+    target,
+    wait_gen,
+    exception,
+    *,
+    max_tries,
+    max_time,
+    jitter,
+    giveup,
+    on_success,
+    on_backoff,
+    on_giveup,
+    raise_on_giveup,
+    wait_gen_kwargs
+):
 
     @functools.wraps(target)
     def retry(*args, **kwargs):
         max_tries_value = _maybe_call(max_tries)
         max_time_value = _maybe_call(max_time)
@@ -102,31 +117,29 @@
             }
 
             try:
                 ret = target(*args, **kwargs)
             except exception as e:
-                max_tries_exceeded = (tries == max_tries_value)
-                max_time_exceeded = (max_time_value is not None and
-                                     elapsed >= max_time_value)
+                max_tries_exceeded = tries == max_tries_value
+                max_time_exceeded = max_time_value is not None and elapsed >= max_time_value
 
                 if giveup(e) or max_tries_exceeded or max_time_exceeded:
                     _call_handlers(on_giveup, **details, exception=e)
                     if raise_on_giveup:
                         raise
                     return None
 
                 try:
-                    seconds = _next_wait(wait, e, jitter, elapsed,
-                                         max_time_value)
+                    seconds = _next_wait(wait, e, jitter, elapsed, max_time_value)
                 except StopIteration:
                     _call_handlers(on_giveup, **details, exception=e)
                     raise e
 
-                _call_handlers(on_backoff, **details, wait=seconds,
-                               exception=e)
+                _call_handlers(on_backoff, **details, wait=seconds, exception=e)
 
                 time.sleep(seconds)
             else:
                 _call_handlers(on_success, **details)
 
                 return ret
+
     return retry
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/backoff/_sync.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/legacy.py	2025-09-21 04:55:30.926001+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/legacy.py	2025-09-21 05:59:17.944191+00:00
@@ -14,13 +14,11 @@
         encoding: str | None
         language: str
         confidence: float | None
 
 
-def detect(
-    byte_str: bytes, should_rename_legacy: bool = False, **kwargs: Any
-) -> ResultDict:
+def detect(byte_str: bytes, should_rename_legacy: bool = False, **kwargs: Any) -> ResultDict:
     """
     chardet legacy method
     Detect the encoding of the given byte string. It should be mostly backward-compatible.
     Encoding name will match Chardet own writing whenever possible. (Not on encoding name unsupported by it)
     This function is deprecated and should be used to migrate your project easily, consult the documentation for
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/legacy.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/cli/__main__.py	2025-09-21 04:55:30.928850+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/cli/__main__.py	2025-09-21 05:59:18.197986+00:00
@@ -116,13 +116,11 @@
         description="The Real First Universal Charset Detector. "
         "Discover originating encoding used on text file. "
         "Normalize text to unicode."
     )
 
-    parser.add_argument(
-        "files", type=FileType("rb"), nargs="+", help="File(s) to be analysed"
-    )
+    parser.add_argument("files", type=FileType("rb"), nargs="+", help="File(s) to be analysed")
     parser.add_argument(
         "-v",
         "--verbose",
         action="store_true",
         default=False,
@@ -265,15 +263,11 @@
             x_.append(
                 CliDetectionResult(
                     abspath(my_file.name),
                     best_guess.encoding,
                     best_guess.encoding_aliases,
-                    [
-                        cp
-                        for cp in best_guess.could_be_from_charset
-                        if cp != best_guess.encoding
-                    ],
+                    [cp for cp in best_guess.could_be_from_charset if cp != best_guess.encoding],
                     best_guess.language,
                     best_guess.alphabets,
                     best_guess.bom,
                     best_guess.percent_chaos,
                     best_guess.percent_coherence,
@@ -288,15 +282,11 @@
                         x_.append(
                             CliDetectionResult(
                                 abspath(my_file.name),
                                 el.encoding,
                                 el.encoding_aliases,
-                                [
-                                    cp
-                                    for cp in el.could_be_from_charset
-                                    if cp != el.encoding
-                                ],
+                                [cp for cp in el.could_be_from_charset if cp != el.encoding],
                                 el.language,
                                 el.alphabets,
                                 el.bom,
                                 el.percent_chaos,
                                 el.percent_coherence,
@@ -327,13 +317,11 @@
                     if my_file.closed is False:
                         my_file.close()
                 elif (
                     args.force is False
                     and query_yes_no(
-                        'Are you sure to normalize "{}" by replacing it ?'.format(
-                            my_file.name
-                        ),
+                        'Are you sure to normalize "{}" by replacing it ?'.format(my_file.name),
                         "no",
                     )
                     is False
                 ):
                     if my_file.closed is False:
@@ -364,15 +352,11 @@
         )
     else:
         for my_file in args.files:
             print(
                 ", ".join(
-                    [
-                        el.encoding or "undefined"
-                        for el in x_
-                        if el.path == abspath(my_file.name)
-                    ]
+                    [el.encoding or "undefined" for el in x_ if el.path == abspath(my_file.name)]
                 )
             )
 
     return 0
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/cli/__main__.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/cd.py	2025-09-21 04:55:30.928420+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/cd.py	2025-09-21 05:59:18.268830+00:00
@@ -132,13 +132,11 @@
             target_pure_latin = False
 
     return target_have_accents, target_pure_latin
 
 
-def alphabet_languages(
-    characters: list[str], ignore_non_latin: bool = False
-) -> list[str]:
+def alphabet_languages(characters: list[str], ignore_non_latin: bool = False) -> list[str]:
     """
     Return associated languages associated to given characters.
     """
     languages: list[tuple[str, float]] = []
 
@@ -153,13 +151,11 @@
         if target_have_accents is False and source_have_accents:
             continue
 
         character_count: int = len(language_characters)
 
-        character_match_count: int = len(
-            [c for c in language_characters if c in characters]
-        )
+        character_match_count: int = len([c for c in language_characters if c in characters])
 
         ratio: float = character_match_count / character_count
 
         if ratio >= 0.2:
             languages.append((language, ratio))
@@ -167,13 +163,11 @@
     languages = sorted(languages, key=lambda x: x[1], reverse=True)
 
     return [compatible_language[0] for compatible_language in languages]
 
 
-def characters_popularity_compare(
-    language: str, ordered_characters: list[str]
-) -> float:
+def characters_popularity_compare(language: str, ordered_characters: list[str]) -> float:
     """
     Determine if a ordered characters list (by occurrence from most appearance to rarest) match a particular language.
     The result is a ratio between 0. (absolutely no correspondence) and 1. (near perfect fit).
     Beware that is function is not strict on the match in order to ease the detection. (Meaning close match is 1.)
     """
@@ -186,13 +180,11 @@
     ordered_characters_count: int = len(ordered_characters)
     target_language_characters_count: int = len(FREQUENCIES[language])
 
     large_alphabet: bool = target_language_characters_count > 26
 
-    for character, character_rank in zip(
-        ordered_characters, range(0, ordered_characters_count)
-    ):
+    for character, character_rank in zip(ordered_characters, range(0, ordered_characters_count)):
         if character not in FREQUENCIES_language_set:
             continue
 
         character_rank_in_language: int = FREQUENCIES[language].index(character)
         expected_projection_ratio: float = (
@@ -212,26 +204,18 @@
             < target_language_characters_count / 3
         ):
             character_approved_count += 1
             continue
 
-        characters_before_source: list[str] = FREQUENCIES[language][
-            0:character_rank_in_language
-        ]
-        characters_after_source: list[str] = FREQUENCIES[language][
-            character_rank_in_language:
-        ]
+        characters_before_source: list[str] = FREQUENCIES[language][0:character_rank_in_language]
+        characters_after_source: list[str] = FREQUENCIES[language][character_rank_in_language:]
         characters_before: list[str] = ordered_characters[0:character_rank]
         characters_after: list[str] = ordered_characters[character_rank:]
 
-        before_match_count: int = len(
-            set(characters_before) & set(characters_before_source)
-        )
-
-        after_match_count: int = len(
-            set(characters_after) & set(characters_after_source)
-        )
+        before_match_count: int = len(set(characters_before) & set(characters_before_source))
+
+        after_match_count: int = len(set(characters_after) & set(characters_after_source))
 
         if len(characters_before_source) == 0 and before_match_count <= 4:
             character_approved_count += 1
             continue
 
@@ -267,14 +251,11 @@
             continue
 
         layer_target_range: str | None = None
 
         for discovered_range in layers:
-            if (
-                is_suspiciously_successive_range(discovered_range, character_range)
-                is False
-            ):
+            if is_suspiciously_successive_range(discovered_range, character_range) is False:
                 layer_target_range = discovered_range
                 break
 
         if layer_target_range is None:
             layer_target_range = character_range
@@ -374,13 +355,11 @@
         popular_character_ordered: list[str] = [c for c, o in most_common]
 
         for language in lg_inclusion_list or alphabet_languages(
             popular_character_ordered, ignore_non_latin
         ):
-            ratio: float = characters_popularity_compare(
-                language, popular_character_ordered
-            )
+            ratio: float = characters_popularity_compare(language, popular_character_ordered)
 
             if ratio < threshold:
                 continue
             elif ratio >= 0.8:
                 sufficient_match_count += 1
@@ -388,8 +367,6 @@
             results.append((language, round(ratio, 4)))
 
             if sufficient_match_count >= 3:
                 break
 
-    return sorted(
-        filter_alt_coherence_matches(results), key=lambda x: x[1], reverse=True
-    )
+    return sorted(filter_alt_coherence_matches(results), key=lambda x: x[1], reverse=True)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/cd.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/api.py	2025-09-21 04:55:30.926489+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/api.py	2025-09-21 05:59:18.517138+00:00
@@ -23,13 +23,11 @@
     should_strip_sig_or_bom,
 )
 
 logger = logging.getLogger("charset_normalizer")
 explain_handler = logging.StreamHandler()
-explain_handler.setFormatter(
-    logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
-)
+explain_handler.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
 
 
 def from_bytes(
     sequences: bytes | bytearray,
     steps: int = 5,
@@ -60,13 +58,11 @@
     Custom logging format and handler can be set manually.
     """
 
     if not isinstance(sequences, (bytearray, bytes)):
         raise TypeError(
-            "Expected object of type bytes or bytearray, got: {}".format(
-                type(sequences)
-            )
+            "Expected object of type bytes or bytearray, got: {}".format(type(sequences))
         )
 
     if explain:
         previous_logger_level: int = logger.level
         logger.addHandler(explain_handler)
@@ -121,13 +117,11 @@
     is_too_large_sequence: bool = len(sequences) >= TOO_BIG_SEQUENCE
 
     if is_too_small_sequence:
         logger.log(
             TRACE,
-            "Trying to detect encoding from a tiny portion of ({}) byte(s).".format(
-                length
-            ),
+            "Trying to detect encoding from a tiny portion of ({}) byte(s).".format(length),
         )
     elif is_too_large_sequence:
         logger.log(
             TRACE,
             "Using lazy str decoding because the payload is quite large, ({}) byte(s).".format(
@@ -189,13 +183,11 @@
 
         tested.add(encoding_iana)
 
         decoded_payload: str | None = None
         bom_or_sig_available: bool = sig_encoding == encoding_iana
-        strip_sig_or_bom: bool = bom_or_sig_available and should_strip_sig_or_bom(
-            encoding_iana
-        )
+        strip_sig_or_bom: bool = bom_or_sig_available and should_strip_sig_or_bom(encoding_iana)
 
         if encoding_iana in {"utf_16", "utf_32"} and not bom_or_sig_available:
             logger.log(
                 TRACE,
                 "Encoding %s won't be tested as-is because it require a BOM. Will try some sub-encoder LE/BE.",
@@ -230,15 +222,11 @@
                     ),
                     encoding=encoding_iana,
                 )
             else:
                 decoded_payload = str(
-                    (
-                        sequences
-                        if strip_sig_or_bom is False
-                        else sequences[len(sig_payload) :]
-                    ),
+                    (sequences if strip_sig_or_bom is False else sequences[len(sig_payload) :]),
                     encoding=encoding_iana,
                 )
         except (UnicodeDecodeError, LookupError) as e:
             if not isinstance(e, LookupError):
                 logger.log(
@@ -271,13 +259,11 @@
             length,
             int(length / steps),
         )
 
         multi_byte_bonus: bool = (
-            is_multi_byte_decoder
-            and decoded_payload is not None
-            and len(decoded_payload) < length
+            is_multi_byte_decoder and decoded_payload is not None and len(decoded_payload) < length
         )
 
         if multi_byte_bonus:
             logger.log(
                 TRACE,
@@ -322,13 +308,11 @@
 
                 if (early_stop_count >= max_chunk_gave_up) or (
                     bom_or_sig_available and strip_sig_or_bom is False
                 ):
                     break
-        except (
-            UnicodeDecodeError
-        ) as e:  # Lazy str loading may have missed something there
+        except UnicodeDecodeError as e:  # Lazy str loading may have missed something there
             logger.log(
                 TRACE,
                 "LazyStr Loading: After MD chunk decode, code page %s does not fit given bytes sequence at ALL. %s",
                 encoding_iana,
                 str(e),
@@ -336,15 +320,11 @@
             early_stop_count = max_chunk_gave_up
             lazy_str_hard_failure = True
 
         # We might want to check the sequence again with the whole content
         # Only if initial MD tests passes
-        if (
-            not lazy_str_hard_failure
-            and is_too_large_sequence
-            and not is_multi_byte_decoder
-        ):
+        if not lazy_str_hard_failure and is_too_large_sequence and not is_multi_byte_decoder:
             try:
                 sequences[int(50e3) :].decode(encoding_iana, errors="strict")
             except UnicodeDecodeError as e:
                 logger.log(
                     TRACE,
@@ -367,12 +347,11 @@
                 round(mean_mess_ratio * 100, ndigits=3),
             )
             # Preparing those fallbacks in case we got nothing.
             if (
                 enable_fallback
-                and encoding_iana
-                in ["ascii", "utf_8", specified_encoding, "utf_16", "utf_32"]
+                and encoding_iana in ["ascii", "utf_8", specified_encoding, "utf_16", "utf_32"]
                 and not lazy_str_hard_failure
             ):
                 fallback_entry = CharsetMatch(
                     sequences,
                     encoding_iana,
@@ -427,13 +406,11 @@
         cd_ratios_merged = merge_coherence_ratios(cd_ratios)
 
         if cd_ratios_merged:
             logger.log(
                 TRACE,
-                "We detected language {} using {}".format(
-                    cd_ratios_merged, encoding_iana
-                ),
+                "We detected language {} using {}".format(cd_ratios_merged, encoding_iana),
             )
 
         current_match = CharsetMatch(
             sequences,
             encoding_iana,
@@ -451,14 +428,11 @@
             preemptive_declaration=specified_encoding,
         )
 
         results.append(current_match)
 
-        if (
-            encoding_iana in [specified_encoding, "ascii", "utf_8"]
-            and mean_mess_ratio < 0.1
-        ):
+        if encoding_iana in [specified_encoding, "ascii", "utf_8"] and mean_mess_ratio < 0.1:
             # If md says nothing to worry about, then... stop immediately!
             if mean_mess_ratio == 0.0:
                 logger.debug(
                     "Encoding detection: %s is most likely the one.",
                     current_match.encoding,
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/api.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/constant.py	2025-09-21 04:55:30.927850+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/constant.py	2025-09-21 05:59:18.556136+00:00
@@ -393,12 +393,11 @@
     "koi8_u",
 ]
 
 IANA_SUPPORTED: list[str] = sorted(
     filter(
-        lambda x: x.endswith("_codec") is False
-        and x not in {"rot_13", "tactis", "mbcs"},
+        lambda x: x.endswith("_codec") is False and x not in {"rot_13", "tactis", "mbcs"},
         list(set(aliases.values())) + IANA_NO_ALIASES,
     )
 )
 
 IANA_SUPPORTED_COUNT: int = len(IANA_SUPPORTED)
@@ -552,11 +551,13 @@
 # Sample character sets — replace with full lists if needed
 COMMON_CHINESE_CHARACTERS = "的一是在不了有和人这中大为上个国我以要他时来用们生到作地于出就分对成会可主发年动同工也能下过子说产种面而方后多定行学法所民得经十三之进着等部度家电力里如水化高自二理起小物现实加量都两体制机当使点从业本去把性好应开它合还因由其些然前外天政四日那社义事平形相全表间样与关各重新线内数正心反你明看原又么利比或但质气第向道命此变条只没结解问意建月公无系军很情者最立代想已通并提直题党程展五果料象员革位入常文总次品式活设及管特件长求老头基资边流路级少图山统接知较将组见计别她手角期根论运农指几九区强放决西被干做必战先回则任取据处队南给色光门即保治北造百规热领七海口东导器压志世金增争济阶油思术极交受联什认六共权收证改清己美再采转更单风切打白教速花带安场身车例真务具万每目至达走积示议声报斗完类八离华名确才科张信马节话米整空元况今集温传土许步群广石记需段研界拉林律叫且究观越织装影算低持音众书布复容儿须际商非验连断深难近矿千周委素技备半办青省列习响约支般史感劳便团往酸历市克何除消构府太准精值号率族维划选标写存候毛亲快效斯院查江型眼王按格养易置派层片始却专状育厂京识适属圆包火住调满县局照参红细引听该铁价严龙飞"
 
 COMMON_JAPANESE_CHARACTERS = "日一国年大十二本中長出三時行見月分後前生五間上東四今金九入学高円子外八六下来気小七山話女北午百書先名川千水半男西電校語土木聞食車何南万毎白天母火右読友左休父雨"
 
-COMMON_KOREAN_CHARACTERS = "一二三四五六七八九十百千萬上下左右中人女子大小山川日月火水木金土父母天地國名年時文校學生"
+COMMON_KOREAN_CHARACTERS = (
+    "一二三四五六七八九十百千萬上下左右中人女子大小山川日月火水木金土父母天地國名年時文校學生"
+)
 
 # Combine all into a set
 COMMON_CJK_CHARACTERS = set(
     "".join(
         [
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/constant.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/utils.py	2025-09-21 04:55:30.926648+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/utils.py	2025-09-21 05:59:28.761520+00:00
@@ -338,12 +338,11 @@
     """
     Determine if two code page are at least 80% similar. IANA_SUPPORTED_SIMILAR dict was generated using
     the function cp_similarity.
     """
     return (
-        iana_name_a in IANA_SUPPORTED_SIMILAR
-        and iana_name_b in IANA_SUPPORTED_SIMILAR[iana_name_a]
+        iana_name_a in IANA_SUPPORTED_SIMILAR and iana_name_b in IANA_SUPPORTED_SIMILAR[iana_name_a]
     )
 
 
 def set_logging_handler(
     name: str = "charset_normalizer",
@@ -394,14 +393,11 @@
             # multi-byte bad cutting detector and adjustment
             # not the cleanest way to perform that fix but clever enough for now.
             if is_multi_byte_decoder and i > 0:
                 chunk_partial_size_chk: int = min(chunk_size, 16)
 
-                if (
-                    decoded_payload
-                    and chunk[:chunk_partial_size_chk] not in decoded_payload
-                ):
+                if decoded_payload and chunk[:chunk_partial_size_chk] not in decoded_payload:
                     for j in range(i, i - 4, -1):
                         cut_sequence = sequences[j:chunk_end]
 
                         if bom_or_sig_available and strip_sig_or_bom is False:
                             cut_sequence = sig_payload + cut_sequence
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/utils.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/models.py	2025-09-21 04:55:30.926206+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/models.py	2025-09-21 05:59:28.808148+00:00
@@ -213,12 +213,11 @@
         if self._output_encoding is None or self._output_encoding != encoding:
             self._output_encoding = encoding
             decoded_string = str(self)
             if (
                 self._preemptive_declaration is not None
-                and self._preemptive_declaration.lower()
-                not in ["utf-8", "utf8", "utf_8"]
+                and self._preemptive_declaration.lower() not in ["utf-8", "utf8", "utf_8"]
             ):
                 patched_header = sub(
                     RE_POSSIBLE_ENCODING_INDICATION,
                     lambda m: m.string[m.span()[0] : m.span()[1]].replace(
                         m.groups()[0],
@@ -279,13 +278,11 @@
         Insert a single match. Will be inserted accordingly to preserve sort.
         Can be inserted as a submatch.
         """
         if not isinstance(item, CharsetMatch):
             raise ValueError(
-                "Cannot append instance '{}' to CharsetMatches".format(
-                    str(item.__class__)
-                )
+                "Cannot append instance '{}' to CharsetMatches".format(str(item.__class__))
             )
         # We should disable the submatch factoring when the input file is too heavy (conserve RAM usage)
         if len(item.raw) < TOO_BIG_SEQUENCE:
             for match in self._results:
                 if match.fingerprint == item.fingerprint and match.chaos == item.chaos:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/models.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/cloud/location/locations_pb2.py	2025-09-21 04:55:32.101156+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/cloud/location/locations_pb2.py	2025-09-21 05:59:29.267956+00:00
@@ -37,24 +37,22 @@
     b'\n%google/cloud/location/locations.proto\x12\x15google.cloud.location\x1a\x1cgoogle/api/annotations.proto\x1a\x19google/protobuf/any.proto\x1a\x17google/api/client.proto"[\n\x14ListLocationsRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0e\n\x06\x66ilter\x18\x02 \x01(\t\x12\x11\n\tpage_size\x18\x03 \x01(\x05\x12\x12\n\npage_token\x18\x04 \x01(\t"d\n\x15ListLocationsResponse\x12\x32\n\tlocations\x18\x01 \x03(\x0b\x32\x1f.google.cloud.location.Location\x12\x17\n\x0fnext_page_token\x18\x02 \x01(\t""\n\x12GetLocationRequest\x12\x0c\n\x04name\x18\x01 \x01(\t"\xd7\x01\n\x08Location\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x0blocation_id\x18\x04 \x01(\t\x12\x14\n\x0c\x64isplay_name\x18\x05 \x01(\t\x12;\n\x06labels\x18\x02 \x03(\x0b\x32+.google.cloud.location.Location.LabelsEntry\x12&\n\x08metadata\x18\x03 \x01(\x0b\x32\x14.google.protobuf.Any\x1a-\n\x0bLabelsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x32\xa4\x03\n\tLocations\x12\xab\x01\n\rListLocations\x12+.google.cloud.location.ListLocationsRequest\x1a,.google.cloud.location.ListLocationsResponse"?\x82\xd3\xe4\x93\x02\x39\x12\x14/v1/{name=locations}Z!\x12\x1f/v1/{name=projects/*}/locations\x12\x9e\x01\n\x0bGetLocation\x12).google.cloud.location.GetLocationRequest\x1a\x1f.google.cloud.location.Location"C\x82\xd3\xe4\x93\x02=\x12\x16/v1/{name=locations/*}Z#\x12!/v1/{name=projects/*/locations/*}\x1aH\xca\x41\x14\x63loud.googleapis.com\xd2\x41.https://www.googleapis.com/auth/cloud-platformBo\n\x19\x63om.google.cloud.locationB\x0eLocationsProtoP\x01Z=google.golang.org/genproto/googleapis/cloud/location;location\xf8\x01\x01\x62\x06proto3'
 )
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(
-    DESCRIPTOR, "google.cloud.location.locations_pb2", _globals
-)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.cloud.location.locations_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\031com.google.cloud.locationB\016LocationsProtoP\001Z=google.golang.org/genproto/googleapis/cloud/location;location\370\001\001"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\031com.google.cloud.locationB\016LocationsProtoP\001Z=google.golang.org/genproto/googleapis/cloud/location;location\370\001\001"
+    )
     _globals["_LOCATION_LABELSENTRY"]._options = None
     _globals["_LOCATION_LABELSENTRY"]._serialized_options = b"8\001"
     _globals["_LOCATIONS"]._options = None
-    _globals[
-        "_LOCATIONS"
-    ]._serialized_options = b"\312A\024cloud.googleapis.com\322A.https://www.googleapis.com/auth/cloud-platform"
+    _globals["_LOCATIONS"]._serialized_options = (
+        b"\312A\024cloud.googleapis.com\322A.https://www.googleapis.com/auth/cloud-platform"
+    )
     _globals["_LOCATIONS"].methods_by_name["ListLocations"]._options = None
     _globals["_LOCATIONS"].methods_by_name[
         "ListLocations"
     ]._serialized_options = b"\202\323\344\223\0029\022\024/v1/{name=locations}Z!\022\037/v1/{name=projects/*}/locations"
     _globals["_LOCATIONS"].methods_by_name["GetLocation"]._options = None
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/md.py	2025-09-21 04:55:30.925761+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/md.py	2025-09-21 05:59:29.266456+00:00
@@ -77,14 +77,11 @@
         return character.isprintable()
 
     def feed(self, character: str) -> None:
         self._character_count += 1
 
-        if (
-            character != self._last_printable_char
-            and character not in COMMON_SAFE_ASCII_CHARACTERS
-        ):
+        if character != self._last_printable_char and character not in COMMON_SAFE_ASCII_CHARACTERS:
             if is_punctuation(character):
                 self._punctuation_count += 1
             elif (
                 character.isdigit() is False
                 and is_symbol(character)
@@ -316,13 +313,11 @@
                 elif self._buffer_glyph_count == 1:
                     self._is_current_word_bad = True
                     self._foreign_long_count += 1
             if buffer_length >= 24 and self._foreign_long_watch:
                 camel_case_dst = [
-                    i
-                    for c, i in zip(self._buffer, range(0, buffer_length))
-                    if c.isupper()
+                    i for c, i in zip(self._buffer, range(0, buffer_length)) if c.isupper()
                 ]
                 probable_camel_cased: bool = False
 
                 if camel_case_dst and (len(camel_case_dst) / buffer_length <= 0.3):
                     probable_camel_cased = True
@@ -426,13 +421,11 @@
             if (
                 self._character_count_since_last_sep <= 64
                 and character.isdigit() is False
                 and self._current_ascii_only is False
             ):
-                self._successive_upper_lower_count_final += (
-                    self._successive_upper_lower_count
-                )
+                self._successive_upper_lower_count_final += self._successive_upper_lower_count
 
             self._successive_upper_lower_count = 0
             self._character_count_since_last_sep = 0
             self._last_alpha_seen = None
             self._buf = False
@@ -564,12 +557,11 @@
         if unicode_range_a == "Basic Latin" or unicode_range_b == "Basic Latin":
             return False
 
     # Chinese/Japanese use dedicated range for punctuation and/or separators.
     if ("CJK" in unicode_range_a or "CJK" in unicode_range_b) or (
-        unicode_range_a in ["Katakana", "Hiragana"]
-        and unicode_range_b in ["Katakana", "Hiragana"]
+        unicode_range_a in ["Katakana", "Hiragana"] and unicode_range_b in ["Katakana", "Hiragana"]
     ):
         if "Punctuation" in unicode_range_a or "Punctuation" in unicode_range_b:
             return False
         if "Forms" in unicode_range_a or "Forms" in unicode_range_b:
             return False
@@ -578,13 +570,11 @@
 
     return True
 
 
 @lru_cache(maxsize=2048)
-def mess_ratio(
-    decoded_sequence: str, maximum_threshold: float = 0.2, debug: bool = False
-) -> float:
+def mess_ratio(decoded_sequence: str, maximum_threshold: float = 0.2, debug: bool = False) -> float:
     """
     Compute a mess ratio given a decoded bytes sequence. The maximum threshold does stop the computation earlier.
     """
 
     detectors: list[MessDetectorPlugin] = [
@@ -605,13 +595,11 @@
     for character, index in zip(decoded_sequence + "\n", range(length)):
         for detector in detectors:
             if detector.eligible(character):
                 detector.feed(character)
 
-        if (
-            index > 0 and index % intermediary_mean_mess_ratio_calc == 0
-        ) or index == length - 1:
+        if (index > 0 and index % intermediary_mean_mess_ratio_calc == 0) or index == length - 1:
             mean_mess_ratio = sum(dt.ratio for dt in detectors)
 
             if mean_mess_ratio >= maximum_threshold:
                 break
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/cloud/location/locations_pb2.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/charset_normalizer/md.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/distro/distro.py	2025-09-21 04:55:30.918003+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/distro/distro.py	2025-09-21 05:59:29.529187+00:00
@@ -756,21 +756,17 @@
         * :py:exc:`UnicodeError`: A data source has unexpected characters or
           uses an unexpected encoding.
         """
         self.root_dir = root_dir
         self.etc_dir = os.path.join(root_dir, "etc") if root_dir else _UNIXCONFDIR
-        self.usr_lib_dir = (
-            os.path.join(root_dir, "usr/lib") if root_dir else _UNIXUSRLIBDIR
-        )
+        self.usr_lib_dir = os.path.join(root_dir, "usr/lib") if root_dir else _UNIXUSRLIBDIR
 
         if os_release_file:
             self.os_release_file = os_release_file
         else:
             etc_dir_os_release_file = os.path.join(self.etc_dir, _OS_RELEASE_BASENAME)
-            usr_lib_os_release_file = os.path.join(
-                self.usr_lib_dir, _OS_RELEASE_BASENAME
-            )
+            usr_lib_os_release_file = os.path.join(self.usr_lib_dir, _OS_RELEASE_BASENAME)
 
             # NOTE: The idea is to respect order **and** have it set
             #       at all times for API backwards compatibility.
             if os.path.isfile(etc_dir_os_release_file) or not os.path.isfile(
                 usr_lib_os_release_file
@@ -785,16 +781,12 @@
         if is_root_dir_defined and (include_lsb or include_uname or include_oslevel):
             raise ValueError(
                 "Including subprocess data sources from specific root_dir is disallowed"
                 " to prevent false information"
             )
-        self.include_lsb = (
-            include_lsb if include_lsb is not None else not is_root_dir_defined
-        )
-        self.include_uname = (
-            include_uname if include_uname is not None else not is_root_dir_defined
-        )
+        self.include_lsb = include_lsb if include_lsb is not None else not is_root_dir_defined
+        self.include_uname = include_uname if include_uname is not None else not is_root_dir_defined
         self.include_oslevel = (
             include_oslevel if include_oslevel is not None else not is_root_dir_defined
         )
 
     def __repr__(self) -> str:
@@ -812,13 +804,11 @@
             "_distro_release_info={self._distro_release_info!r}, "
             "_uname_info={self._uname_info!r}, "
             "_oslevel_info={self._oslevel_info!r})".format(self=self)
         )
 
-    def linux_distribution(
-        self, full_distribution_name: bool = True
-    ) -> Tuple[str, str, str]:
+    def linux_distribution(self, full_distribution_name: bool = True) -> Tuple[str, str, str]:
         """
         Return information about the OS distribution that is compatible
         with Python's :func:`platform.linux_distribution`, supporting a subset
         of its parameters.
 
@@ -869,13 +859,11 @@
             or self.lsb_release_attr("distributor_id")
             or self.distro_release_attr("name")
             or self.uname_attr("name")
         )
         if pretty:
-            name = self.os_release_attr("pretty_name") or self.lsb_release_attr(
-                "description"
-            )
+            name = self.os_release_attr("pretty_name") or self.lsb_release_attr("description")
             if not name:
                 name = self.distro_release_attr("name") or self.uname_attr("name")
                 version = self.version(pretty=True)
                 if version:
                     name = f"{name} {version}"
@@ -892,13 +880,13 @@
             self.lsb_release_attr("release"),
             self.distro_release_attr("version_id"),
             self._parse_distro_release_content(self.os_release_attr("pretty_name")).get(
                 "version_id", ""
             ),
-            self._parse_distro_release_content(
-                self.lsb_release_attr("description")
-            ).get("version_id", ""),
+            self._parse_distro_release_content(self.lsb_release_attr("description")).get(
+                "version_id", ""
+            ),
             self.uname_attr("release"),
         ]
         if self.uname_attr("id").startswith("aix"):
             # On AIX platforms, prefer oslevel command output.
             versions.insert(0, self.oslevel_info())
@@ -980,15 +968,11 @@
         try:
             # Handle os_release specially since distros might purposefully set
             # this to empty string to have no codename
             return self._os_release_info["codename"]
         except KeyError:
-            return (
-                self.lsb_release_attr("codename")
-                or self.distro_release_attr("codename")
-                or ""
-            )
+            return self.lsb_release_attr("codename") or self.distro_release_attr("codename") or ""
 
     def info(self, pretty: bool = False, best: bool = False) -> InfoDict:
         """
         Return certain machine-readable information about the OS
         distribution.
@@ -1216,13 +1200,11 @@
         return self._to_str(stdout).strip()
 
     @cached_property
     def _debian_version(self) -> str:
         try:
-            with open(
-                os.path.join(self.etc_dir, "debian_version"), encoding="ascii"
-            ) as fp:
+            with open(os.path.join(self.etc_dir, "debian_version"), encoding="ascii") as fp:
                 return fp.readline().rstrip()
         except FileNotFoundError:
             return ""
 
     @staticmethod
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/distro/distro.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/logging/type/http_request_pb2.py	2025-09-21 04:55:32.102030+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/logging/type/http_request_pb2.py	2025-09-21 05:59:58.946513+00:00
@@ -39,11 +39,11 @@
 _builder.BuildTopDescriptorsAndMessages(
     DESCRIPTOR, "google.logging.type.http_request_pb2", _globals
 )
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\027com.google.logging.typeB\020HttpRequestProtoP\001Z8google.golang.org/genproto/googleapis/logging/type;ltype\252\002\031Google.Cloud.Logging.Type\312\002\031Google\\Cloud\\Logging\\Type\352\002\034Google::Cloud::Logging::Type"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\027com.google.logging.typeB\020HttpRequestProtoP\001Z8google.golang.org/genproto/googleapis/logging/type;ltype\252\002\031Google.Cloud.Logging.Type\312\002\031Google\\Cloud\\Logging\\Type\352\002\034Google::Cloud::Logging::Type"
+    )
     _globals["_HTTPREQUEST"]._serialized_start = 96
     _globals["_HTTPREQUEST"]._serialized_end = 463
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/logging/type/http_request_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/gapic/metadata/gapic_metadata_pb2.pyi	2025-09-21 04:55:32.101713+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/gapic/metadata/gapic_metadata_pb2.pyi	2025-09-21 05:59:59.030847+00:00
@@ -58,10 +58,11 @@
             def __init__(
                 self,
                 key: _Optional[str] = ...,
                 value: _Optional[_Union[GapicMetadata.ServiceAsClient, _Mapping]] = ...,
             ) -> None: ...
+
         CLIENTS_FIELD_NUMBER: _ClassVar[int]
         clients: _containers.MessageMap[str, GapicMetadata.ServiceAsClient]
         def __init__(
             self, clients: _Optional[_Mapping[str, GapicMetadata.ServiceAsClient]] = ...
         ) -> None: ...
@@ -78,10 +79,11 @@
             def __init__(
                 self,
                 key: _Optional[str] = ...,
                 value: _Optional[_Union[GapicMetadata.MethodList, _Mapping]] = ...,
             ) -> None: ...
+
         LIBRARY_CLIENT_FIELD_NUMBER: _ClassVar[int]
         RPCS_FIELD_NUMBER: _ClassVar[int]
         library_client: str
         rpcs: _containers.MessageMap[str, GapicMetadata.MethodList]
         def __init__(
@@ -93,10 +95,11 @@
     class MethodList(_message.Message):
         __slots__ = ("methods",)
         METHODS_FIELD_NUMBER: _ClassVar[int]
         methods: _containers.RepeatedScalarFieldContainer[str]
         def __init__(self, methods: _Optional[_Iterable[str]] = ...) -> None: ...
+
     SCHEMA_FIELD_NUMBER: _ClassVar[int]
     COMMENT_FIELD_NUMBER: _ClassVar[int]
     LANGUAGE_FIELD_NUMBER: _ClassVar[int]
     PROTO_PACKAGE_FIELD_NUMBER: _ClassVar[int]
     LIBRARY_PACKAGE_FIELD_NUMBER: _ClassVar[int]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/gapic/metadata/gapic_metadata_pb2.pyi
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/gapic/metadata/gapic_metadata_pb2.py	2025-09-21 04:55:32.101584+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/gapic/metadata/gapic_metadata_pb2.py	2025-09-21 05:59:59.228115+00:00
@@ -32,24 +32,20 @@
     b'\n#gapic/metadata/gapic_metadata.proto\x12\x15google.gapic.metadata"\xf0\x05\n\rGapicMetadata\x12\x0e\n\x06schema\x18\x01 \x01(\t\x12\x0f\n\x07\x63omment\x18\x02 \x01(\t\x12\x10\n\x08language\x18\x03 \x01(\t\x12\x15\n\rproto_package\x18\x04 \x01(\t\x12\x17\n\x0flibrary_package\x18\x05 \x01(\t\x12\x44\n\x08services\x18\x06 \x03(\x0b\x32\x32.google.gapic.metadata.GapicMetadata.ServicesEntry\x1ai\n\rServicesEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12G\n\x05value\x18\x02 \x01(\x0b\x32\x38.google.gapic.metadata.GapicMetadata.ServiceForTransport:\x02\x38\x01\x1a\xd3\x01\n\x13ServiceForTransport\x12V\n\x07\x63lients\x18\x01 \x03(\x0b\x32\x45.google.gapic.metadata.GapicMetadata.ServiceForTransport.ClientsEntry\x1a\x64\n\x0c\x43lientsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\x43\n\x05value\x18\x02 \x01(\x0b\x32\x34.google.gapic.metadata.GapicMetadata.ServiceAsClient:\x02\x38\x01\x1a\xd5\x01\n\x0fServiceAsClient\x12\x16\n\x0elibrary_client\x18\x01 \x01(\t\x12L\n\x04rpcs\x18\x02 \x03(\x0b\x32>.google.gapic.metadata.GapicMetadata.ServiceAsClient.RpcsEntry\x1a\\\n\tRpcsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12>\n\x05value\x18\x02 \x01(\x0b\x32/.google.gapic.metadata.GapicMetadata.MethodList:\x02\x38\x01\x1a\x1d\n\nMethodList\x12\x0f\n\x07methods\x18\x01 \x03(\tB\xba\x01\n\x19\x63om.google.gapic.metadataB\x12GapicMetadataProtoP\x01Z=google.golang.org/genproto/googleapis/gapic/metadata;metadata\xaa\x02\x15Google.Gapic.Metadata\xca\x02\x15Google\\Gapic\\Metadata\xea\x02\x17Google::Gapic::Metadatab\x06proto3'
 )
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(
-    DESCRIPTOR, "gapic.metadata.gapic_metadata_pb2", _globals
-)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "gapic.metadata.gapic_metadata_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\031com.google.gapic.metadataB\022GapicMetadataProtoP\001Z=google.golang.org/genproto/googleapis/gapic/metadata;metadata\252\002\025Google.Gapic.Metadata\312\002\025Google\\Gapic\\Metadata\352\002\027Google::Gapic::Metadata"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\031com.google.gapic.metadataB\022GapicMetadataProtoP\001Z=google.golang.org/genproto/googleapis/gapic/metadata;metadata\252\002\025Google.Gapic.Metadata\312\002\025Google\\Gapic\\Metadata\352\002\027Google::Gapic::Metadata"
+    )
     _globals["_GAPICMETADATA_SERVICESENTRY"]._options = None
     _globals["_GAPICMETADATA_SERVICESENTRY"]._serialized_options = b"8\001"
     _globals["_GAPICMETADATA_SERVICEFORTRANSPORT_CLIENTSENTRY"]._options = None
-    _globals[
-        "_GAPICMETADATA_SERVICEFORTRANSPORT_CLIENTSENTRY"
-    ]._serialized_options = b"8\001"
+    _globals["_GAPICMETADATA_SERVICEFORTRANSPORT_CLIENTSENTRY"]._serialized_options = b"8\001"
     _globals["_GAPICMETADATA_SERVICEASCLIENT_RPCSENTRY"]._options = None
     _globals["_GAPICMETADATA_SERVICEASCLIENT_RPCSENTRY"]._serialized_options = b"8\001"
     _globals["_GAPICMETADATA"]._serialized_start = 63
     _globals["_GAPICMETADATA"]._serialized_end = 815
     _globals["_GAPICMETADATA_SERVICESENTRY"]._serialized_start = 249
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/gapic/metadata/gapic_metadata_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/cloud/location/locations_pb2.pyi	2025-09-21 04:55:32.101261+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/cloud/location/locations_pb2.pyi	2025-09-21 05:59:59.252936+00:00
@@ -71,13 +71,12 @@
         __slots__ = ("key", "value")
         KEY_FIELD_NUMBER: _ClassVar[int]
         VALUE_FIELD_NUMBER: _ClassVar[int]
         key: str
         value: str
-        def __init__(
-            self, key: _Optional[str] = ..., value: _Optional[str] = ...
-        ) -> None: ...
+        def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
+
     NAME_FIELD_NUMBER: _ClassVar[int]
     LOCATION_ID_FIELD_NUMBER: _ClassVar[int]
     DISPLAY_NAME_FIELD_NUMBER: _ClassVar[int]
     LABELS_FIELD_NUMBER: _ClassVar[int]
     METADATA_FIELD_NUMBER: _ClassVar[int]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/cloud/location/locations_pb2.pyi
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/logging/type/log_severity_pb2.py	2025-09-21 04:55:32.102411+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/logging/type/log_severity_pb2.py	2025-09-21 06:00:00.875433+00:00
@@ -37,11 +37,11 @@
 _builder.BuildTopDescriptorsAndMessages(
     DESCRIPTOR, "google.logging.type.log_severity_pb2", _globals
 )
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\027com.google.logging.typeB\020LogSeverityProtoP\001Z8google.golang.org/genproto/googleapis/logging/type;ltype\242\002\004GLOG\252\002\031Google.Cloud.Logging.Type\312\002\031Google\\Cloud\\Logging\\Type\352\002\034Google::Cloud::Logging::Type"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\027com.google.logging.typeB\020LogSeverityProtoP\001Z8google.golang.org/genproto/googleapis/logging/type;ltype\242\002\004GLOG\252\002\031Google.Cloud.Logging.Type\312\002\031Google\\Cloud\\Logging\\Type\352\002\034Google::Cloud::Logging::Type"
+    )
     _globals["_LOGSEVERITY"]._serialized_start = 64
     _globals["_LOGSEVERITY"]._serialized_end = 194
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/logging/type/log_severity_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/descriptor_database.py	2025-09-21 04:55:30.716480+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/descriptor_database.py	2025-09-21 06:00:15.329976+00:00
@@ -5,168 +5,174 @@
 # license that can be found in the LICENSE file or at
 # https://developers.google.com/open-source/licenses/bsd
 
 """Provides a container for DescriptorProtos."""
 
-__author__ = 'matthewtoia@google.com (Matt Toia)'
+__author__ = "matthewtoia@google.com (Matt Toia)"
 
 import warnings
 
 
 class Error(Exception):
-  pass
+    pass
 
 
 class DescriptorDatabaseConflictingDefinitionError(Error):
-  """Raised when a proto is added with the same name & different descriptor."""
+    """Raised when a proto is added with the same name & different descriptor."""
 
 
 class DescriptorDatabase(object):
-  """A container accepting FileDescriptorProtos and maps DescriptorProtos."""
+    """A container accepting FileDescriptorProtos and maps DescriptorProtos."""
 
-  def __init__(self):
-    self._file_desc_protos_by_file = {}
-    self._file_desc_protos_by_symbol = {}
+    def __init__(self):
+        self._file_desc_protos_by_file = {}
+        self._file_desc_protos_by_symbol = {}
 
-  def Add(self, file_desc_proto):
-    """Adds the FileDescriptorProto and its types to this database.
+    def Add(self, file_desc_proto):
+        """Adds the FileDescriptorProto and its types to this database.
 
-    Args:
-      file_desc_proto: The FileDescriptorProto to add.
-    Raises:
-      DescriptorDatabaseConflictingDefinitionError: if an attempt is made to
-        add a proto with the same name but different definition than an
-        existing proto in the database.
-    """
-    proto_name = file_desc_proto.name
-    if proto_name not in self._file_desc_protos_by_file:
-      self._file_desc_protos_by_file[proto_name] = file_desc_proto
-    elif self._file_desc_protos_by_file[proto_name] != file_desc_proto:
-      raise DescriptorDatabaseConflictingDefinitionError(
-          '%s already added, but with different descriptor.' % proto_name)
-    else:
-      return
+        Args:
+          file_desc_proto: The FileDescriptorProto to add.
+        Raises:
+          DescriptorDatabaseConflictingDefinitionError: if an attempt is made to
+            add a proto with the same name but different definition than an
+            existing proto in the database.
+        """
+        proto_name = file_desc_proto.name
+        if proto_name not in self._file_desc_protos_by_file:
+            self._file_desc_protos_by_file[proto_name] = file_desc_proto
+        elif self._file_desc_protos_by_file[proto_name] != file_desc_proto:
+            raise DescriptorDatabaseConflictingDefinitionError(
+                "%s already added, but with different descriptor." % proto_name
+            )
+        else:
+            return
 
-    # Add all the top-level descriptors to the index.
-    package = file_desc_proto.package
-    for message in file_desc_proto.message_type:
-      for name in _ExtractSymbols(message, package):
-        self._AddSymbol(name, file_desc_proto)
-    for enum in file_desc_proto.enum_type:
-      self._AddSymbol(
-          ('.'.join((package, enum.name)) if package else enum.name),
-          file_desc_proto,
-      )
-      for enum_value in enum.value:
-        self._file_desc_protos_by_symbol[
-            '.'.join((package, enum_value.name)) if package else enum_value.name
-        ] = file_desc_proto
-    for extension in file_desc_proto.extension:
-      self._AddSymbol(
-          ('.'.join((package, extension.name)) if package else extension.name),
-          file_desc_proto,
-      )
-    for service in file_desc_proto.service:
-      self._AddSymbol(
-          ('.'.join((package, service.name)) if package else service.name),
-          file_desc_proto,
-      )
+        # Add all the top-level descriptors to the index.
+        package = file_desc_proto.package
+        for message in file_desc_proto.message_type:
+            for name in _ExtractSymbols(message, package):
+                self._AddSymbol(name, file_desc_proto)
+        for enum in file_desc_proto.enum_type:
+            self._AddSymbol(
+                (".".join((package, enum.name)) if package else enum.name),
+                file_desc_proto,
+            )
+            for enum_value in enum.value:
+                self._file_desc_protos_by_symbol[
+                    ".".join((package, enum_value.name)) if package else enum_value.name
+                ] = file_desc_proto
+        for extension in file_desc_proto.extension:
+            self._AddSymbol(
+                (".".join((package, extension.name)) if package else extension.name),
+                file_desc_proto,
+            )
+        for service in file_desc_proto.service:
+            self._AddSymbol(
+                (".".join((package, service.name)) if package else service.name),
+                file_desc_proto,
+            )
 
-  def FindFileByName(self, name):
-    """Finds the file descriptor proto by file name.
+    def FindFileByName(self, name):
+        """Finds the file descriptor proto by file name.
 
-    Typically the file name is a relative path ending to a .proto file. The
-    proto with the given name will have to have been added to this database
-    using the Add method or else an error will be raised.
+        Typically the file name is a relative path ending to a .proto file. The
+        proto with the given name will have to have been added to this database
+        using the Add method or else an error will be raised.
 
-    Args:
-      name: The file name to find.
+        Args:
+          name: The file name to find.
 
-    Returns:
-      The file descriptor proto matching the name.
+        Returns:
+          The file descriptor proto matching the name.
 
-    Raises:
-      KeyError if no file by the given name was added.
-    """
+        Raises:
+          KeyError if no file by the given name was added.
+        """
 
-    return self._file_desc_protos_by_file[name]
+        return self._file_desc_protos_by_file[name]
 
-  def FindFileContainingSymbol(self, symbol):
-    """Finds the file descriptor proto containing the specified symbol.
+    def FindFileContainingSymbol(self, symbol):
+        """Finds the file descriptor proto containing the specified symbol.
 
-    The symbol should be a fully qualified name including the file descriptor's
-    package and any containing messages. Some examples:
+        The symbol should be a fully qualified name including the file descriptor's
+        package and any containing messages. Some examples:
 
-    'some.package.name.Message'
-    'some.package.name.Message.NestedEnum'
-    'some.package.name.Message.some_field'
+        'some.package.name.Message'
+        'some.package.name.Message.NestedEnum'
+        'some.package.name.Message.some_field'
 
-    The file descriptor proto containing the specified symbol must be added to
-    this database using the Add method or else an error will be raised.
+        The file descriptor proto containing the specified symbol must be added to
+        this database using the Add method or else an error will be raised.
 
-    Args:
-      symbol: The fully qualified symbol name.
+        Args:
+          symbol: The fully qualified symbol name.
 
-    Returns:
-      The file descriptor proto containing the symbol.
+        Returns:
+          The file descriptor proto containing the symbol.
 
-    Raises:
-      KeyError if no file contains the specified symbol.
-    """
-    if symbol.count('.') == 1 and symbol[0] == '.':
-      symbol = symbol.lstrip('.')
-      warnings.warn(
-          'Please remove the leading "." when '
-          'FindFileContainingSymbol, this will turn to error '
-          'in 2026 Jan.',
-          RuntimeWarning,
-      )
-    try:
-      return self._file_desc_protos_by_symbol[symbol]
-    except KeyError:
-      # Fields, enum values, and nested extensions are not in
-      # _file_desc_protos_by_symbol. Try to find the top level
-      # descriptor. Non-existent nested symbol under a valid top level
-      # descriptor can also be found. The behavior is the same with
-      # protobuf C++.
-      top_level, _, _ = symbol.rpartition('.')
-      try:
-        return self._file_desc_protos_by_symbol[top_level]
-      except KeyError:
-        # Raise the original symbol as a KeyError for better diagnostics.
-        raise KeyError(symbol)
+        Raises:
+          KeyError if no file contains the specified symbol.
+        """
+        if symbol.count(".") == 1 and symbol[0] == ".":
+            symbol = symbol.lstrip(".")
+            warnings.warn(
+                'Please remove the leading "." when '
+                "FindFileContainingSymbol, this will turn to error "
+                "in 2026 Jan.",
+                RuntimeWarning,
+            )
+        try:
+            return self._file_desc_protos_by_symbol[symbol]
+        except KeyError:
+            # Fields, enum values, and nested extensions are not in
+            # _file_desc_protos_by_symbol. Try to find the top level
+            # descriptor. Non-existent nested symbol under a valid top level
+            # descriptor can also be found. The behavior is the same with
+            # protobuf C++.
+            top_level, _, _ = symbol.rpartition(".")
+            try:
+                return self._file_desc_protos_by_symbol[top_level]
+            except KeyError:
+                # Raise the original symbol as a KeyError for better diagnostics.
+                raise KeyError(symbol)
 
-  def FindFileContainingExtension(self, extendee_name, extension_number):
-    # TODO: implement this API.
-    return None
+    def FindFileContainingExtension(self, extendee_name, extension_number):
+        # TODO: implement this API.
+        return None
 
-  def FindAllExtensionNumbers(self, extendee_name):
-    # TODO: implement this API.
-    return []
+    def FindAllExtensionNumbers(self, extendee_name):
+        # TODO: implement this API.
+        return []
 
-  def _AddSymbol(self, name, file_desc_proto):
-    if name in self._file_desc_protos_by_symbol:
-      warn_msg = ('Conflict register for file "' + file_desc_proto.name +
-                  '": ' + name +
-                  ' is already defined in file "' +
-                  self._file_desc_protos_by_symbol[name].name + '"')
-      warnings.warn(warn_msg, RuntimeWarning)
-    self._file_desc_protos_by_symbol[name] = file_desc_proto
+    def _AddSymbol(self, name, file_desc_proto):
+        if name in self._file_desc_protos_by_symbol:
+            warn_msg = (
+                'Conflict register for file "'
+                + file_desc_proto.name
+                + '": '
+                + name
+                + ' is already defined in file "'
+                + self._file_desc_protos_by_symbol[name].name
+                + '"'
+            )
+            warnings.warn(warn_msg, RuntimeWarning)
+        self._file_desc_protos_by_symbol[name] = file_desc_proto
 
 
 def _ExtractSymbols(desc_proto, package):
-  """Pulls out all the symbols from a descriptor proto.
+    """Pulls out all the symbols from a descriptor proto.
 
-  Args:
-    desc_proto: The proto to extract symbols from.
-    package: The package containing the descriptor type.
+    Args:
+      desc_proto: The proto to extract symbols from.
+      package: The package containing the descriptor type.
 
-  Yields:
-    The fully qualified name found in the descriptor.
-  """
-  message_name = package + '.' + desc_proto.name if package else desc_proto.name
-  yield message_name
-  for nested_type in desc_proto.nested_type:
-    for symbol in _ExtractSymbols(nested_type, message_name):
-      yield symbol
-  for enum_type in desc_proto.enum_type:
-    yield '.'.join((message_name, enum_type.name))
+    Yields:
+      The fully qualified name found in the descriptor.
+    """
+    message_name = package + "." + desc_proto.name if package else desc_proto.name
+    yield message_name
+    for nested_type in desc_proto.nested_type:
+        for symbol in _ExtractSymbols(nested_type, message_name):
+            yield symbol
+    for enum_type in desc_proto.enum_type:
+        yield ".".join((message_name, enum_type.name))
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/compiler/plugin_pb2.py	2025-09-21 04:55:30.722796+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/compiler/plugin_pb2.py	2025-09-21 06:00:15.332111+00:00
@@ -7,40 +7,40 @@
 from google.protobuf import descriptor as _descriptor
 from google.protobuf import descriptor_pool as _descriptor_pool
 from google.protobuf import runtime_version as _runtime_version
 from google.protobuf import symbol_database as _symbol_database
 from google.protobuf.internal import builder as _builder
+
 _runtime_version.ValidateProtobufRuntimeVersion(
-    _runtime_version.Domain.PUBLIC,
-    6,
-    32,
-    1,
-    '',
-    'google/protobuf/compiler/plugin.proto'
+    _runtime_version.Domain.PUBLIC, 6, 32, 1, "", "google/protobuf/compiler/plugin.proto"
 )
 # @@protoc_insertion_point(imports)
 
 _sym_db = _symbol_database.Default()
 
 
 from google.protobuf import descriptor_pb2 as google_dot_protobuf_dot_descriptor__pb2
 
 
-DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n%google/protobuf/compiler/plugin.proto\x12\x18google.protobuf.compiler\x1a google/protobuf/descriptor.proto\"c\n\x07Version\x12\x14\n\x05major\x18\x01 \x01(\x05R\x05major\x12\x14\n\x05minor\x18\x02 \x01(\x05R\x05minor\x12\x14\n\x05patch\x18\x03 \x01(\x05R\x05patch\x12\x16\n\x06suffix\x18\x04 \x01(\tR\x06suffix\"\xcf\x02\n\x14\x43odeGeneratorRequest\x12(\n\x10\x66ile_to_generate\x18\x01 \x03(\tR\x0e\x66ileToGenerate\x12\x1c\n\tparameter\x18\x02 \x01(\tR\tparameter\x12\x43\n\nproto_file\x18\x0f \x03(\x0b\x32$.google.protobuf.FileDescriptorProtoR\tprotoFile\x12\\\n\x17source_file_descriptors\x18\x11 \x03(\x0b\x32$.google.protobuf.FileDescriptorProtoR\x15sourceFileDescriptors\x12L\n\x10\x63ompiler_version\x18\x03 \x01(\x0b\x32!.google.protobuf.compiler.VersionR\x0f\x63ompilerVersion\"\x85\x04\n\x15\x43odeGeneratorResponse\x12\x14\n\x05\x65rror\x18\x01 \x01(\tR\x05\x65rror\x12-\n\x12supported_features\x18\x02 \x01(\x04R\x11supportedFeatures\x12\'\n\x0fminimum_edition\x18\x03 \x01(\x05R\x0eminimumEdition\x12\'\n\x0fmaximum_edition\x18\x04 \x01(\x05R\x0emaximumEdition\x12H\n\x04\x66ile\x18\x0f \x03(\x0b\x32\x34.google.protobuf.compiler.CodeGeneratorResponse.FileR\x04\x66ile\x1a\xb1\x01\n\x04\x46ile\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\'\n\x0finsertion_point\x18\x02 \x01(\tR\x0einsertionPoint\x12\x18\n\x07\x63ontent\x18\x0f \x01(\tR\x07\x63ontent\x12R\n\x13generated_code_info\x18\x10 \x01(\x0b\x32\".google.protobuf.GeneratedCodeInfoR\x11generatedCodeInfo\"W\n\x07\x46\x65\x61ture\x12\x10\n\x0c\x46\x45\x41TURE_NONE\x10\x00\x12\x1b\n\x17\x46\x45\x41TURE_PROTO3_OPTIONAL\x10\x01\x12\x1d\n\x19\x46\x45\x41TURE_SUPPORTS_EDITIONS\x10\x02\x42r\n\x1c\x63om.google.protobuf.compilerB\x0cPluginProtosZ)google.golang.org/protobuf/types/pluginpb\xaa\x02\x18Google.Protobuf.Compiler')
+DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
+    b'\n%google/protobuf/compiler/plugin.proto\x12\x18google.protobuf.compiler\x1a google/protobuf/descriptor.proto"c\n\x07Version\x12\x14\n\x05major\x18\x01 \x01(\x05R\x05major\x12\x14\n\x05minor\x18\x02 \x01(\x05R\x05minor\x12\x14\n\x05patch\x18\x03 \x01(\x05R\x05patch\x12\x16\n\x06suffix\x18\x04 \x01(\tR\x06suffix"\xcf\x02\n\x14\x43odeGeneratorRequest\x12(\n\x10\x66ile_to_generate\x18\x01 \x03(\tR\x0e\x66ileToGenerate\x12\x1c\n\tparameter\x18\x02 \x01(\tR\tparameter\x12\x43\n\nproto_file\x18\x0f \x03(\x0b\x32$.google.protobuf.FileDescriptorProtoR\tprotoFile\x12\\\n\x17source_file_descriptors\x18\x11 \x03(\x0b\x32$.google.protobuf.FileDescriptorProtoR\x15sourceFileDescriptors\x12L\n\x10\x63ompiler_version\x18\x03 \x01(\x0b\x32!.google.protobuf.compiler.VersionR\x0f\x63ompilerVersion"\x85\x04\n\x15\x43odeGeneratorResponse\x12\x14\n\x05\x65rror\x18\x01 \x01(\tR\x05\x65rror\x12-\n\x12supported_features\x18\x02 \x01(\x04R\x11supportedFeatures\x12\'\n\x0fminimum_edition\x18\x03 \x01(\x05R\x0eminimumEdition\x12\'\n\x0fmaximum_edition\x18\x04 \x01(\x05R\x0emaximumEdition\x12H\n\x04\x66ile\x18\x0f \x03(\x0b\x32\x34.google.protobuf.compiler.CodeGeneratorResponse.FileR\x04\x66ile\x1a\xb1\x01\n\x04\x46ile\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\x12\'\n\x0finsertion_point\x18\x02 \x01(\tR\x0einsertionPoint\x12\x18\n\x07\x63ontent\x18\x0f \x01(\tR\x07\x63ontent\x12R\n\x13generated_code_info\x18\x10 \x01(\x0b\x32".google.protobuf.GeneratedCodeInfoR\x11generatedCodeInfo"W\n\x07\x46\x65\x61ture\x12\x10\n\x0c\x46\x45\x41TURE_NONE\x10\x00\x12\x1b\n\x17\x46\x45\x41TURE_PROTO3_OPTIONAL\x10\x01\x12\x1d\n\x19\x46\x45\x41TURE_SUPPORTS_EDITIONS\x10\x02\x42r\n\x1c\x63om.google.protobuf.compilerB\x0cPluginProtosZ)google.golang.org/protobuf/types/pluginpb\xaa\x02\x18Google.Protobuf.Compiler'
+)
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'google.protobuf.compiler.plugin_pb2', _globals)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.protobuf.compiler.plugin_pb2", _globals)
 if not _descriptor._USE_C_DESCRIPTORS:
-  _globals['DESCRIPTOR']._loaded_options = None
-  _globals['DESCRIPTOR']._serialized_options = b'\n\034com.google.protobuf.compilerB\014PluginProtosZ)google.golang.org/protobuf/types/pluginpb\252\002\030Google.Protobuf.Compiler'
-  _globals['_VERSION']._serialized_start=101
-  _globals['_VERSION']._serialized_end=200
-  _globals['_CODEGENERATORREQUEST']._serialized_start=203
-  _globals['_CODEGENERATORREQUEST']._serialized_end=538
-  _globals['_CODEGENERATORRESPONSE']._serialized_start=541
-  _globals['_CODEGENERATORRESPONSE']._serialized_end=1058
-  _globals['_CODEGENERATORRESPONSE_FILE']._serialized_start=792
-  _globals['_CODEGENERATORRESPONSE_FILE']._serialized_end=969
-  _globals['_CODEGENERATORRESPONSE_FEATURE']._serialized_start=971
-  _globals['_CODEGENERATORRESPONSE_FEATURE']._serialized_end=1058
+    _globals["DESCRIPTOR"]._loaded_options = None
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\034com.google.protobuf.compilerB\014PluginProtosZ)google.golang.org/protobuf/types/pluginpb\252\002\030Google.Protobuf.Compiler"
+    )
+    _globals["_VERSION"]._serialized_start = 101
+    _globals["_VERSION"]._serialized_end = 200
+    _globals["_CODEGENERATORREQUEST"]._serialized_start = 203
+    _globals["_CODEGENERATORREQUEST"]._serialized_end = 538
+    _globals["_CODEGENERATORRESPONSE"]._serialized_start = 541
+    _globals["_CODEGENERATORRESPONSE"]._serialized_end = 1058
+    _globals["_CODEGENERATORRESPONSE_FILE"]._serialized_start = 792
+    _globals["_CODEGENERATORRESPONSE_FILE"]._serialized_end = 969
+    _globals["_CODEGENERATORRESPONSE_FEATURE"]._serialized_start = 971
+    _globals["_CODEGENERATORRESPONSE_FEATURE"]._serialized_end = 1058
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/descriptor_database.py
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/compiler/plugin_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/type_checkers.py	2025-09-21 04:55:30.719113+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/type_checkers.py	2025-09-21 06:00:15.907024+00:00
@@ -18,11 +18,11 @@
   corresponding wire types.
 TYPE_TO_DESERIALIZE_METHOD: A dictionary with field types and deserialization
   function.
 """
 
-__author__ = 'robinson@google.com (Will Robinson)'
+__author__ = "robinson@google.com (Will Robinson)"
 
 import numbers
 import struct
 import warnings
 
@@ -35,305 +35,334 @@
 # TODO: Remove this warning count after 34.0
 # Assign bool to int/enum warnings will print 100 times at most which should
 # be enough for users to notice and do not cause timeout.
 _BoolWarningCount = 100
 
+
 def TruncateToFourByteFloat(original):
-  return struct.unpack('<f', struct.pack('<f', original))[0]
+    return struct.unpack("<f", struct.pack("<f", original))[0]
 
 
 def ToShortestFloat(original):
-  """Returns the shortest float that has same value in wire."""
-  # All 4 byte floats have between 6 and 9 significant digits, so we
-  # start with 6 as the lower bound.
-  # It has to be iterative because use '.9g' directly can not get rid
-  # of the noises for most values. For example if set a float_field=0.9
-  # use '.9g' will print 0.899999976.
-  precision = 6
-  rounded = float('{0:.{1}g}'.format(original, precision))
-  while TruncateToFourByteFloat(rounded) != original:
-    precision += 1
-    rounded = float('{0:.{1}g}'.format(original, precision))
-  return rounded
+    """Returns the shortest float that has same value in wire."""
+    # All 4 byte floats have between 6 and 9 significant digits, so we
+    # start with 6 as the lower bound.
+    # It has to be iterative because use '.9g' directly can not get rid
+    # of the noises for most values. For example if set a float_field=0.9
+    # use '.9g' will print 0.899999976.
+    precision = 6
+    rounded = float("{0:.{1}g}".format(original, precision))
+    while TruncateToFourByteFloat(rounded) != original:
+        precision += 1
+        rounded = float("{0:.{1}g}".format(original, precision))
+    return rounded
 
 
 def GetTypeChecker(field):
-  """Returns a type checker for a message field of the specified types.
-
-  Args:
-    field: FieldDescriptor object for this field.
-
-  Returns:
-    An instance of TypeChecker which can be used to verify the types
-    of values assigned to a field of the specified type.
-  """
-  if (field.cpp_type == _FieldDescriptor.CPPTYPE_STRING and
-      field.type == _FieldDescriptor.TYPE_STRING):
-    return UnicodeValueChecker()
-  if field.cpp_type == _FieldDescriptor.CPPTYPE_ENUM:
-    if field.enum_type.is_closed:
-      return EnumValueChecker(field.enum_type)
-    else:
-      # When open enums are supported, any int32 can be assigned.
-      return _VALUE_CHECKERS[_FieldDescriptor.CPPTYPE_INT32]
-  return _VALUE_CHECKERS[field.cpp_type]
+    """Returns a type checker for a message field of the specified types.
+
+    Args:
+      field: FieldDescriptor object for this field.
+
+    Returns:
+      An instance of TypeChecker which can be used to verify the types
+      of values assigned to a field of the specified type.
+    """
+    if (
+        field.cpp_type == _FieldDescriptor.CPPTYPE_STRING
+        and field.type == _FieldDescriptor.TYPE_STRING
+    ):
+        return UnicodeValueChecker()
+    if field.cpp_type == _FieldDescriptor.CPPTYPE_ENUM:
+        if field.enum_type.is_closed:
+            return EnumValueChecker(field.enum_type)
+        else:
+            # When open enums are supported, any int32 can be assigned.
+            return _VALUE_CHECKERS[_FieldDescriptor.CPPTYPE_INT32]
+    return _VALUE_CHECKERS[field.cpp_type]
 
 
 # None of the typecheckers below make any attempt to guard against people
 # subclassing builtin types and doing weird things.  We're not trying to
 # protect against malicious clients here, just people accidentally shooting
 # themselves in the foot in obvious ways.
 class TypeChecker(object):
-
-  """Type checker used to catch type errors as early as possible
-  when the client is setting scalar fields in protocol messages.
-  """
-
-  def __init__(self, *acceptable_types):
-    self._acceptable_types = acceptable_types
-
-  def CheckValue(self, proposed_value):
-    """Type check the provided value and return it.
-
-    The returned value might have been normalized to another type.
+    """Type checker used to catch type errors as early as possible
+    when the client is setting scalar fields in protocol messages.
     """
-    if not isinstance(proposed_value, self._acceptable_types):
-      message = ('%.1024r has type %s, but expected one of: %s' %
-                 (proposed_value, type(proposed_value), self._acceptable_types))
-      raise TypeError(message)
-    return proposed_value
+
+    def __init__(self, *acceptable_types):
+        self._acceptable_types = acceptable_types
+
+    def CheckValue(self, proposed_value):
+        """Type check the provided value and return it.
+
+        The returned value might have been normalized to another type.
+        """
+        if not isinstance(proposed_value, self._acceptable_types):
+            message = "%.1024r has type %s, but expected one of: %s" % (
+                proposed_value,
+                type(proposed_value),
+                self._acceptable_types,
+            )
+            raise TypeError(message)
+        return proposed_value
 
 
 class TypeCheckerWithDefault(TypeChecker):
 
-  def __init__(self, default_value, *acceptable_types):
-    TypeChecker.__init__(self, *acceptable_types)
-    self._default_value = default_value
-
-  def DefaultValue(self):
-    return self._default_value
+    def __init__(self, default_value, *acceptable_types):
+        TypeChecker.__init__(self, *acceptable_types)
+        self._default_value = default_value
+
+    def DefaultValue(self):
+        return self._default_value
 
 
 class BoolValueChecker(object):
-  """Type checker used for bool fields."""
-
-  def CheckValue(self, proposed_value):
-    if not hasattr(proposed_value, '__index__'):
-      # Under NumPy 2.3, numpy.bool does not have an __index__ method.
-      if (type(proposed_value).__module__ == 'numpy' and
-          type(proposed_value).__name__ == 'bool'):
+    """Type checker used for bool fields."""
+
+    def CheckValue(self, proposed_value):
+        if not hasattr(proposed_value, "__index__"):
+            # Under NumPy 2.3, numpy.bool does not have an __index__ method.
+            if (
+                type(proposed_value).__module__ == "numpy"
+                and type(proposed_value).__name__ == "bool"
+            ):
+                return bool(proposed_value)
+            message = "%.1024r has type %s, but expected one of: %s" % (
+                proposed_value,
+                type(proposed_value),
+                (bool, int),
+            )
+            raise TypeError(message)
+
+        if (
+            type(proposed_value).__module__ == "numpy"
+            and type(proposed_value).__name__ == "ndarray"
+        ):
+            message = "%.1024r has type %s, but expected one of: %s" % (
+                proposed_value,
+                type(proposed_value),
+                (bool, int),
+            )
+            raise TypeError(message)
+
         return bool(proposed_value)
-      message = ('%.1024r has type %s, but expected one of: %s' %
-                 (proposed_value, type(proposed_value), (bool, int)))
-      raise TypeError(message)
-
-    if (type(proposed_value).__module__ == 'numpy' and
-        type(proposed_value).__name__ == 'ndarray'):
-      message = ('%.1024r has type %s, but expected one of: %s' %
-                 (proposed_value, type(proposed_value), (bool, int)))
-      raise TypeError(message)
-
-    return bool(proposed_value)
-
-  def DefaultValue(self):
-    return False
+
+    def DefaultValue(self):
+        return False
 
 
 # IntValueChecker and its subclasses perform integer type-checks
 # and bounds-checks.
 class IntValueChecker(object):
-
-  """Checker used for integer fields.  Performs type-check and range check."""
-
-  def CheckValue(self, proposed_value):
-    global _BoolWarningCount
-    if type(proposed_value) == bool and _BoolWarningCount > 0:
-      _BoolWarningCount -= 1
-      message = (
-          '%.1024r has type %s, but expected one of: %s. This warning '
-          'will turn into error in 7.34.0, please fix it before that.'
-          % (
-              proposed_value,
-              type(proposed_value),
-              (int,),
-          )
-      )
-      # TODO: Raise errors in 2026 Q1 release
-      warnings.warn(message)
-
-    if not hasattr(proposed_value, '__index__') or (
-        type(proposed_value).__module__ == 'numpy' and
-        type(proposed_value).__name__ == 'ndarray'):
-      message = ('%.1024r has type %s, but expected one of: %s' %
-                 (proposed_value, type(proposed_value), (int,)))
-      raise TypeError(message)
-
-    if not self._MIN <= int(proposed_value) <= self._MAX:
-      raise ValueError('Value out of range: %d' % proposed_value)
-    # We force all values to int to make alternate implementations where the
-    # distinction is more significant (e.g. the C++ implementation) simpler.
-    proposed_value = int(proposed_value)
-    return proposed_value
-
-  def DefaultValue(self):
-    return 0
+    """Checker used for integer fields.  Performs type-check and range check."""
+
+    def CheckValue(self, proposed_value):
+        global _BoolWarningCount
+        if type(proposed_value) == bool and _BoolWarningCount > 0:
+            _BoolWarningCount -= 1
+            message = (
+                "%.1024r has type %s, but expected one of: %s. This warning "
+                "will turn into error in 7.34.0, please fix it before that."
+                % (
+                    proposed_value,
+                    type(proposed_value),
+                    (int,),
+                )
+            )
+            # TODO: Raise errors in 2026 Q1 release
+            warnings.warn(message)
+
+        if not hasattr(proposed_value, "__index__") or (
+            type(proposed_value).__module__ == "numpy"
+            and type(proposed_value).__name__ == "ndarray"
+        ):
+            message = "%.1024r has type %s, but expected one of: %s" % (
+                proposed_value,
+                type(proposed_value),
+                (int,),
+            )
+            raise TypeError(message)
+
+        if not self._MIN <= int(proposed_value) <= self._MAX:
+            raise ValueError("Value out of range: %d" % proposed_value)
+        # We force all values to int to make alternate implementations where the
+        # distinction is more significant (e.g. the C++ implementation) simpler.
+        proposed_value = int(proposed_value)
+        return proposed_value
+
+    def DefaultValue(self):
+        return 0
 
 
 class EnumValueChecker(object):
-
-  """Checker used for enum fields.  Performs type-check and range check."""
-
-  def __init__(self, enum_type):
-    self._enum_type = enum_type
-
-  def CheckValue(self, proposed_value):
-    global _BoolWarningCount
-    if type(proposed_value) == bool and _BoolWarningCount > 0:
-      _BoolWarningCount -= 1
-      message = (
-          '%.1024r has type %s, but expected one of: %s. This warning '
-          'will turn into error in 7.34.0, please fix it before that.'
-          % (
-              proposed_value,
-              type(proposed_value),
-              (int,),
-          )
-      )
-      # TODO: Raise errors in 2026 Q1 release
-      warnings.warn(message)
-    if not isinstance(proposed_value, numbers.Integral):
-      message = ('%.1024r has type %s, but expected one of: %s' %
-                 (proposed_value, type(proposed_value), (int,)))
-      raise TypeError(message)
-    if int(proposed_value) not in self._enum_type.values_by_number:
-      raise ValueError('Unknown enum value: %d' % proposed_value)
-    return proposed_value
-
-  def DefaultValue(self):
-    return self._enum_type.values[0].number
+    """Checker used for enum fields.  Performs type-check and range check."""
+
+    def __init__(self, enum_type):
+        self._enum_type = enum_type
+
+    def CheckValue(self, proposed_value):
+        global _BoolWarningCount
+        if type(proposed_value) == bool and _BoolWarningCount > 0:
+            _BoolWarningCount -= 1
+            message = (
+                "%.1024r has type %s, but expected one of: %s. This warning "
+                "will turn into error in 7.34.0, please fix it before that."
+                % (
+                    proposed_value,
+                    type(proposed_value),
+                    (int,),
+                )
+            )
+            # TODO: Raise errors in 2026 Q1 release
+            warnings.warn(message)
+        if not isinstance(proposed_value, numbers.Integral):
+            message = "%.1024r has type %s, but expected one of: %s" % (
+                proposed_value,
+                type(proposed_value),
+                (int,),
+            )
+            raise TypeError(message)
+        if int(proposed_value) not in self._enum_type.values_by_number:
+            raise ValueError("Unknown enum value: %d" % proposed_value)
+        return proposed_value
+
+    def DefaultValue(self):
+        return self._enum_type.values[0].number
 
 
 class UnicodeValueChecker(object):
-
-  """Checker used for string fields.
-
-  Always returns a unicode value, even if the input is of type str.
-  """
-
-  def CheckValue(self, proposed_value):
-    if not isinstance(proposed_value, (bytes, str)):
-      message = ('%.1024r has type %s, but expected one of: %s' %
-                 (proposed_value, type(proposed_value), (bytes, str)))
-      raise TypeError(message)
-
-    # If the value is of type 'bytes' make sure that it is valid UTF-8 data.
-    if isinstance(proposed_value, bytes):
-      try:
-        proposed_value = proposed_value.decode('utf-8')
-      except UnicodeDecodeError:
-        raise ValueError('%.1024r has type bytes, but isn\'t valid UTF-8 '
-                         'encoding. Non-UTF-8 strings must be converted to '
-                         'unicode objects before being added.' %
-                         (proposed_value))
-    else:
-      try:
-        proposed_value.encode('utf8')
-      except UnicodeEncodeError:
-        raise ValueError('%.1024r isn\'t a valid unicode string and '
-                         'can\'t be encoded in UTF-8.'%
-                         (proposed_value))
-
-    return proposed_value
-
-  def DefaultValue(self):
-    return u""
+    """Checker used for string fields.
+
+    Always returns a unicode value, even if the input is of type str.
+    """
+
+    def CheckValue(self, proposed_value):
+        if not isinstance(proposed_value, (bytes, str)):
+            message = "%.1024r has type %s, but expected one of: %s" % (
+                proposed_value,
+                type(proposed_value),
+                (bytes, str),
+            )
+            raise TypeError(message)
+
+        # If the value is of type 'bytes' make sure that it is valid UTF-8 data.
+        if isinstance(proposed_value, bytes):
+            try:
+                proposed_value = proposed_value.decode("utf-8")
+            except UnicodeDecodeError:
+                raise ValueError(
+                    "%.1024r has type bytes, but isn't valid UTF-8 "
+                    "encoding. Non-UTF-8 strings must be converted to "
+                    "unicode objects before being added." % (proposed_value)
+                )
+        else:
+            try:
+                proposed_value.encode("utf8")
+            except UnicodeEncodeError:
+                raise ValueError(
+                    "%.1024r isn't a valid unicode string and "
+                    "can't be encoded in UTF-8." % (proposed_value)
+                )
+
+        return proposed_value
+
+    def DefaultValue(self):
+        return ""
 
 
 class Int32ValueChecker(IntValueChecker):
-  # We're sure to use ints instead of longs here since comparison may be more
-  # efficient.
-  _MIN = -2147483648
-  _MAX = 2147483647
+    # We're sure to use ints instead of longs here since comparison may be more
+    # efficient.
+    _MIN = -2147483648
+    _MAX = 2147483647
 
 
 class Uint32ValueChecker(IntValueChecker):
-  _MIN = 0
-  _MAX = (1 << 32) - 1
+    _MIN = 0
+    _MAX = (1 << 32) - 1
 
 
 class Int64ValueChecker(IntValueChecker):
-  _MIN = -(1 << 63)
-  _MAX = (1 << 63) - 1
+    _MIN = -(1 << 63)
+    _MAX = (1 << 63) - 1
 
 
 class Uint64ValueChecker(IntValueChecker):
-  _MIN = 0
-  _MAX = (1 << 64) - 1
+    _MIN = 0
+    _MAX = (1 << 64) - 1
 
 
 # The max 4 bytes float is about 3.4028234663852886e+38
-_FLOAT_MAX = float.fromhex('0x1.fffffep+127')
+_FLOAT_MAX = float.fromhex("0x1.fffffep+127")
 _FLOAT_MIN = -_FLOAT_MAX
 _MAX_FLOAT_AS_DOUBLE_ROUNDED = 3.4028235677973366e38
-_INF = float('inf')
-_NEG_INF = float('-inf')
+_INF = float("inf")
+_NEG_INF = float("-inf")
 
 
 class DoubleValueChecker(object):
-  """Checker used for double fields.
-
-  Performs type-check and range check.
-  """
-
-  def CheckValue(self, proposed_value):
-    """Check and convert proposed_value to float."""
-    if (not hasattr(proposed_value, '__float__') and
-        not hasattr(proposed_value, '__index__')) or (
-            type(proposed_value).__module__ == 'numpy' and
-            type(proposed_value).__name__ == 'ndarray'):
-      message = ('%.1024r has type %s, but expected one of: int, float' %
-                 (proposed_value, type(proposed_value)))
-      raise TypeError(message)
-    return float(proposed_value)
-
-  def DefaultValue(self):
-    return 0.0
+    """Checker used for double fields.
+
+    Performs type-check and range check.
+    """
+
+    def CheckValue(self, proposed_value):
+        """Check and convert proposed_value to float."""
+        if (
+            not hasattr(proposed_value, "__float__") and not hasattr(proposed_value, "__index__")
+        ) or (
+            type(proposed_value).__module__ == "numpy"
+            and type(proposed_value).__name__ == "ndarray"
+        ):
+            message = "%.1024r has type %s, but expected one of: int, float" % (
+                proposed_value,
+                type(proposed_value),
+            )
+            raise TypeError(message)
+        return float(proposed_value)
+
+    def DefaultValue(self):
+        return 0.0
 
 
 class FloatValueChecker(DoubleValueChecker):
-  """Checker used for float fields.
-
-  Performs type-check and range check.
-
-  Values exceeding a 32-bit float will be converted to inf/-inf.
-  """
-
-  def CheckValue(self, proposed_value):
-    """Check and convert proposed_value to float."""
-    converted_value = super().CheckValue(proposed_value)
-    # This inf rounding matches the C++ proto SafeDoubleToFloat logic.
-    if converted_value > _FLOAT_MAX:
-      if converted_value <= _MAX_FLOAT_AS_DOUBLE_ROUNDED:
-        return _FLOAT_MAX
-      return _INF
-    if converted_value < _FLOAT_MIN:
-      if converted_value >= -_MAX_FLOAT_AS_DOUBLE_ROUNDED:
-        return _FLOAT_MIN
-      return _NEG_INF
-
-    return TruncateToFourByteFloat(converted_value)
+    """Checker used for float fields.
+
+    Performs type-check and range check.
+
+    Values exceeding a 32-bit float will be converted to inf/-inf.
+    """
+
+    def CheckValue(self, proposed_value):
+        """Check and convert proposed_value to float."""
+        converted_value = super().CheckValue(proposed_value)
+        # This inf rounding matches the C++ proto SafeDoubleToFloat logic.
+        if converted_value > _FLOAT_MAX:
+            if converted_value <= _MAX_FLOAT_AS_DOUBLE_ROUNDED:
+                return _FLOAT_MAX
+            return _INF
+        if converted_value < _FLOAT_MIN:
+            if converted_value >= -_MAX_FLOAT_AS_DOUBLE_ROUNDED:
+                return _FLOAT_MIN
+            return _NEG_INF
+
+        return TruncateToFourByteFloat(converted_value)
+
 
 # Type-checkers for all scalar CPPTYPEs.
 _VALUE_CHECKERS = {
     _FieldDescriptor.CPPTYPE_INT32: Int32ValueChecker(),
     _FieldDescriptor.CPPTYPE_INT64: Int64ValueChecker(),
     _FieldDescriptor.CPPTYPE_UINT32: Uint32ValueChecker(),
     _FieldDescriptor.CPPTYPE_UINT64: Uint64ValueChecker(),
     _FieldDescriptor.CPPTYPE_DOUBLE: DoubleValueChecker(),
     _FieldDescriptor.CPPTYPE_FLOAT: FloatValueChecker(),
     _FieldDescriptor.CPPTYPE_BOOL: BoolValueChecker(),
-    _FieldDescriptor.CPPTYPE_STRING: TypeCheckerWithDefault(b'', bytes),
+    _FieldDescriptor.CPPTYPE_STRING: TypeCheckerWithDefault(b"", bytes),
 }
 
 
 # Map from field type to a function F, such that F(field_num, value)
 # gives the total byte size for a value of the given type.  This
@@ -355,12 +384,12 @@
     _FieldDescriptor.TYPE_UINT32: wire_format.UInt32ByteSize,
     _FieldDescriptor.TYPE_ENUM: wire_format.EnumByteSize,
     _FieldDescriptor.TYPE_SFIXED32: wire_format.SFixed32ByteSize,
     _FieldDescriptor.TYPE_SFIXED64: wire_format.SFixed64ByteSize,
     _FieldDescriptor.TYPE_SINT32: wire_format.SInt32ByteSize,
-    _FieldDescriptor.TYPE_SINT64: wire_format.SInt64ByteSize
-    }
+    _FieldDescriptor.TYPE_SINT64: wire_format.SInt64ByteSize,
+}
 
 
 # Maps from field types to encoder constructors.
 TYPE_TO_ENCODER = {
     _FieldDescriptor.TYPE_DOUBLE: encoder.DoubleEncoder,
@@ -379,11 +408,11 @@
     _FieldDescriptor.TYPE_ENUM: encoder.EnumEncoder,
     _FieldDescriptor.TYPE_SFIXED32: encoder.SFixed32Encoder,
     _FieldDescriptor.TYPE_SFIXED64: encoder.SFixed64Encoder,
     _FieldDescriptor.TYPE_SINT32: encoder.SInt32Encoder,
     _FieldDescriptor.TYPE_SINT64: encoder.SInt64Encoder,
-    }
+}
 
 
 # Maps from field types to sizer constructors.
 TYPE_TO_SIZER = {
     _FieldDescriptor.TYPE_DOUBLE: encoder.DoubleSizer,
@@ -402,11 +431,11 @@
     _FieldDescriptor.TYPE_ENUM: encoder.EnumSizer,
     _FieldDescriptor.TYPE_SFIXED32: encoder.SFixed32Sizer,
     _FieldDescriptor.TYPE_SFIXED64: encoder.SFixed64Sizer,
     _FieldDescriptor.TYPE_SINT32: encoder.SInt32Sizer,
     _FieldDescriptor.TYPE_SINT64: encoder.SInt64Sizer,
-    }
+}
 
 
 # Maps from field type to a decoder constructor.
 TYPE_TO_DECODER = {
     _FieldDescriptor.TYPE_DOUBLE: decoder.DoubleDecoder,
@@ -425,11 +454,11 @@
     _FieldDescriptor.TYPE_ENUM: decoder.EnumDecoder,
     _FieldDescriptor.TYPE_SFIXED32: decoder.SFixed32Decoder,
     _FieldDescriptor.TYPE_SFIXED64: decoder.SFixed64Decoder,
     _FieldDescriptor.TYPE_SINT32: decoder.SInt32Decoder,
     _FieldDescriptor.TYPE_SINT64: decoder.SInt64Decoder,
-    }
+}
 
 # Maps from field type to expected wiretype.
 FIELD_TYPE_TO_WIRE_TYPE = {
     _FieldDescriptor.TYPE_DOUBLE: wire_format.WIRETYPE_FIXED64,
     _FieldDescriptor.TYPE_FLOAT: wire_format.WIRETYPE_FIXED32,
@@ -437,19 +466,16 @@
     _FieldDescriptor.TYPE_UINT64: wire_format.WIRETYPE_VARINT,
     _FieldDescriptor.TYPE_INT32: wire_format.WIRETYPE_VARINT,
     _FieldDescriptor.TYPE_FIXED64: wire_format.WIRETYPE_FIXED64,
     _FieldDescriptor.TYPE_FIXED32: wire_format.WIRETYPE_FIXED32,
     _FieldDescriptor.TYPE_BOOL: wire_format.WIRETYPE_VARINT,
-    _FieldDescriptor.TYPE_STRING:
-      wire_format.WIRETYPE_LENGTH_DELIMITED,
+    _FieldDescriptor.TYPE_STRING: wire_format.WIRETYPE_LENGTH_DELIMITED,
     _FieldDescriptor.TYPE_GROUP: wire_format.WIRETYPE_START_GROUP,
-    _FieldDescriptor.TYPE_MESSAGE:
-      wire_format.WIRETYPE_LENGTH_DELIMITED,
-    _FieldDescriptor.TYPE_BYTES:
-      wire_format.WIRETYPE_LENGTH_DELIMITED,
+    _FieldDescriptor.TYPE_MESSAGE: wire_format.WIRETYPE_LENGTH_DELIMITED,
+    _FieldDescriptor.TYPE_BYTES: wire_format.WIRETYPE_LENGTH_DELIMITED,
     _FieldDescriptor.TYPE_UINT32: wire_format.WIRETYPE_VARINT,
     _FieldDescriptor.TYPE_ENUM: wire_format.WIRETYPE_VARINT,
     _FieldDescriptor.TYPE_SFIXED32: wire_format.WIRETYPE_FIXED32,
     _FieldDescriptor.TYPE_SFIXED64: wire_format.WIRETYPE_FIXED64,
     _FieldDescriptor.TYPE_SINT32: wire_format.WIRETYPE_VARINT,
     _FieldDescriptor.TYPE_SINT64: wire_format.WIRETYPE_VARINT,
-    }
+}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/type_checkers.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/api_implementation.py	2025-09-21 04:55:30.717047+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/api_implementation.py	2025-09-21 06:00:24.060933+00:00
@@ -3,134 +3,140 @@
 #
 # Use of this source code is governed by a BSD-style
 # license that can be found in the LICENSE file or at
 # https://developers.google.com/open-source/licenses/bsd
 
-"""Determine which implementation of the protobuf API is used in this process.
-"""
+"""Determine which implementation of the protobuf API is used in this process."""
 
 import importlib
 import os
 import sys
 import warnings
 
 _GOOGLE3_PYTHON_UPB_DEFAULT = True
 
 
 def _ApiVersionToImplementationType(api_version):
-  if api_version == 2:
-    return 'cpp'
-  if api_version == 1:
-    raise ValueError('api_version=1 is no longer supported.')
-  if api_version == 0:
-    return 'python'
-  return None
+    if api_version == 2:
+        return "cpp"
+    if api_version == 1:
+        raise ValueError("api_version=1 is no longer supported.")
+    if api_version == 0:
+        return "python"
+    return None
 
 
 _implementation_type = None
 try:
-  # pylint: disable=g-import-not-at-top
-  from google.protobuf.internal import _api_implementation
-  # The compile-time constants in the _api_implementation module can be used to
-  # switch to a certain implementation of the Python API at build time.
-  _implementation_type = _ApiVersionToImplementationType(
-      _api_implementation.api_version)
+    # pylint: disable=g-import-not-at-top
+    from google.protobuf.internal import _api_implementation
+
+    # The compile-time constants in the _api_implementation module can be used to
+    # switch to a certain implementation of the Python API at build time.
+    _implementation_type = _ApiVersionToImplementationType(_api_implementation.api_version)
 except ImportError:
-  pass  # Unspecified by compiler flags.
+    pass  # Unspecified by compiler flags.
 
 
 def _CanImport(mod_name):
-  try:
-    mod = importlib.import_module(mod_name)
-    # Work around a known issue in the classic bootstrap .par import hook.
-    if not mod:
-      raise ImportError(mod_name + ' import succeeded but was None')
-    return True
-  except ImportError:
-    return False
+    try:
+        mod = importlib.import_module(mod_name)
+        # Work around a known issue in the classic bootstrap .par import hook.
+        if not mod:
+            raise ImportError(mod_name + " import succeeded but was None")
+        return True
+    except ImportError:
+        return False
 
 
 if _implementation_type is None:
-  if _CanImport('google._upb._message'):
-    _implementation_type = 'upb'
-  elif _CanImport('google.protobuf.pyext._message'):
-    _implementation_type = 'cpp'
-  else:
-    _implementation_type = 'python'
+    if _CanImport("google._upb._message"):
+        _implementation_type = "upb"
+    elif _CanImport("google.protobuf.pyext._message"):
+        _implementation_type = "cpp"
+    else:
+        _implementation_type = "python"
 
 
 # This environment variable can be used to switch to a certain implementation
 # of the Python API, overriding the compile-time constants in the
 # _api_implementation module. Right now only 'python', 'cpp' and 'upb' are
 # valid values. Any other value will raise error.
-_implementation_type = os.getenv('PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION',
-                                 _implementation_type)
+_implementation_type = os.getenv("PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION", _implementation_type)
 
-if _implementation_type not in ('python', 'cpp', 'upb'):
-  raise ValueError('PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION {0} is not '
-                   'supported. Please set to \'python\', \'cpp\' or '
-                   '\'upb\'.'.format(_implementation_type))
+if _implementation_type not in ("python", "cpp", "upb"):
+    raise ValueError(
+        "PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION {0} is not "
+        "supported. Please set to 'python', 'cpp' or "
+        "'upb'.".format(_implementation_type)
+    )
 
-if 'PyPy' in sys.version and _implementation_type == 'cpp':
-  warnings.warn('PyPy does not work yet with cpp protocol buffers. '
-                'Falling back to the python implementation.')
-  _implementation_type = 'python'
+if "PyPy" in sys.version and _implementation_type == "cpp":
+    warnings.warn(
+        "PyPy does not work yet with cpp protocol buffers. "
+        "Falling back to the python implementation."
+    )
+    _implementation_type = "python"
 
 _c_module = None
 
-if _implementation_type == 'cpp':
-  try:
-    # pylint: disable=g-import-not-at-top
-    from google.protobuf.pyext import _message
-    sys.modules['google3.net.proto2.python.internal.cpp._message'] = _message
-    _c_module = _message
-    del _message
-  except ImportError:
-    # TODO: fail back to python
-    warnings.warn(
-        'Selected implementation cpp is not available.')
-    pass
+if _implementation_type == "cpp":
+    try:
+        # pylint: disable=g-import-not-at-top
+        from google.protobuf.pyext import _message
 
-if _implementation_type == 'upb':
-  try:
-    # pylint: disable=g-import-not-at-top
-    from google._upb import _message
-    _c_module = _message
-    del _message
-  except ImportError:
-    warnings.warn('Selected implementation upb is not available. '
-                  'Falling back to the python implementation.')
-    _implementation_type = 'python'
-    pass
+        sys.modules["google3.net.proto2.python.internal.cpp._message"] = _message
+        _c_module = _message
+        del _message
+    except ImportError:
+        # TODO: fail back to python
+        warnings.warn("Selected implementation cpp is not available.")
+        pass
+
+if _implementation_type == "upb":
+    try:
+        # pylint: disable=g-import-not-at-top
+        from google._upb import _message
+
+        _c_module = _message
+        del _message
+    except ImportError:
+        warnings.warn(
+            "Selected implementation upb is not available. "
+            "Falling back to the python implementation."
+        )
+        _implementation_type = "python"
+        pass
 
 # Detect if serialization should be deterministic by default
 try:
-  # The presence of this module in a build allows the proto implementation to
-  # be upgraded merely via build deps.
-  #
-  # NOTE: Merely importing this automatically enables deterministic proto
-  # serialization for C++ code, but we still need to export it as a boolean so
-  # that we can do the same for `_implementation_type == 'python'`.
-  #
-  # NOTE2: It is possible for C++ code to enable deterministic serialization by
-  # default _without_ affecting Python code, if the C++ implementation is not in
-  # use by this module.  That is intended behavior, so we don't actually expose
-  # this boolean outside of this module.
-  #
-  # pylint: disable=g-import-not-at-top,unused-import
-  from google.protobuf import enable_deterministic_proto_serialization
-  _python_deterministic_proto_serialization = True
+    # The presence of this module in a build allows the proto implementation to
+    # be upgraded merely via build deps.
+    #
+    # NOTE: Merely importing this automatically enables deterministic proto
+    # serialization for C++ code, but we still need to export it as a boolean so
+    # that we can do the same for `_implementation_type == 'python'`.
+    #
+    # NOTE2: It is possible for C++ code to enable deterministic serialization by
+    # default _without_ affecting Python code, if the C++ implementation is not in
+    # use by this module.  That is intended behavior, so we don't actually expose
+    # this boolean outside of this module.
+    #
+    # pylint: disable=g-import-not-at-top,unused-import
+    from google.protobuf import enable_deterministic_proto_serialization
+
+    _python_deterministic_proto_serialization = True
 except ImportError:
-  _python_deterministic_proto_serialization = False
+    _python_deterministic_proto_serialization = False
 
 
 # Usage of this function is discouraged. Clients shouldn't care which
 # implementation of the API is in use. Note that there is no guarantee
 # that differences between APIs will be maintained.
 # Please don't use this function if possible.
 def Type():
-  return _implementation_type
+    return _implementation_type
 
 
 # For internal use only
 def IsPythonDefaultSerializationDeterministic():
-  return _python_deterministic_proto_serialization
+    return _python_deterministic_proto_serialization
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/api_implementation.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/builder.py	2025-09-21 04:55:30.717176+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/builder.py	2025-09-21 06:00:24.129226+00:00
@@ -10,11 +10,11 @@
 This file is only called in python generated _pb2.py files. It builds
 descriptors, message classes and services that users can directly use
 in generated code.
 """
 
-__author__ = 'jieluo@google.com (Jie Luo)'
+__author__ = "jieluo@google.com (Jie Luo)"
 
 from google.protobuf.internal import enum_type_wrapper
 from google.protobuf.internal import python_message
 from google.protobuf import message as _message
 from google.protobuf import reflection as _reflection
@@ -22,97 +22,99 @@
 
 _sym_db = _symbol_database.Default()
 
 
 def BuildMessageAndEnumDescriptors(file_des, module):
-  """Builds message and enum descriptors.
+    """Builds message and enum descriptors.
 
-  Args:
-    file_des: FileDescriptor of the .proto file
-    module: Generated _pb2 module
-  """
+    Args:
+      file_des: FileDescriptor of the .proto file
+      module: Generated _pb2 module
+    """
 
-  def BuildNestedDescriptors(msg_des, prefix):
-    for (name, nested_msg) in msg_des.nested_types_by_name.items():
-      module_name = prefix + name.upper()
-      module[module_name] = nested_msg
-      BuildNestedDescriptors(nested_msg, module_name + '_')
-    for enum_des in msg_des.enum_types:
-      module[prefix + enum_des.name.upper()] = enum_des
+    def BuildNestedDescriptors(msg_des, prefix):
+        for name, nested_msg in msg_des.nested_types_by_name.items():
+            module_name = prefix + name.upper()
+            module[module_name] = nested_msg
+            BuildNestedDescriptors(nested_msg, module_name + "_")
+        for enum_des in msg_des.enum_types:
+            module[prefix + enum_des.name.upper()] = enum_des
 
-  for (name, msg_des) in file_des.message_types_by_name.items():
-    module_name = '_' + name.upper()
-    module[module_name] = msg_des
-    BuildNestedDescriptors(msg_des, module_name + '_')
+    for name, msg_des in file_des.message_types_by_name.items():
+        module_name = "_" + name.upper()
+        module[module_name] = msg_des
+        BuildNestedDescriptors(msg_des, module_name + "_")
 
 
 def BuildTopDescriptorsAndMessages(file_des, module_name, module):
-  """Builds top level descriptors and message classes.
+    """Builds top level descriptors and message classes.
 
-  Args:
-    file_des: FileDescriptor of the .proto file
-    module_name: str, the name of generated _pb2 module
-    module: Generated _pb2 module
-  """
+    Args:
+      file_des: FileDescriptor of the .proto file
+      module_name: str, the name of generated _pb2 module
+      module: Generated _pb2 module
+    """
 
-  def BuildMessage(msg_des, prefix):
-    create_dict = {}
-    for (name, nested_msg) in msg_des.nested_types_by_name.items():
-      create_dict[name] = BuildMessage(nested_msg, prefix + msg_des.name + '.')
-    create_dict['DESCRIPTOR'] = msg_des
-    create_dict['__module__'] = module_name
-    create_dict['__qualname__'] = prefix + msg_des.name
-    message_class = _reflection.GeneratedProtocolMessageType(
-        msg_des.name, (_message.Message,), create_dict)
-    _sym_db.RegisterMessage(message_class)
-    return message_class
+    def BuildMessage(msg_des, prefix):
+        create_dict = {}
+        for name, nested_msg in msg_des.nested_types_by_name.items():
+            create_dict[name] = BuildMessage(nested_msg, prefix + msg_des.name + ".")
+        create_dict["DESCRIPTOR"] = msg_des
+        create_dict["__module__"] = module_name
+        create_dict["__qualname__"] = prefix + msg_des.name
+        message_class = _reflection.GeneratedProtocolMessageType(
+            msg_des.name, (_message.Message,), create_dict
+        )
+        _sym_db.RegisterMessage(message_class)
+        return message_class
 
-  # top level enums
-  for (name, enum_des) in file_des.enum_types_by_name.items():
-    module['_' + name.upper()] = enum_des
-    module[name] = enum_type_wrapper.EnumTypeWrapper(enum_des)
-    for enum_value in enum_des.values:
-      module[enum_value.name] = enum_value.number
+    # top level enums
+    for name, enum_des in file_des.enum_types_by_name.items():
+        module["_" + name.upper()] = enum_des
+        module[name] = enum_type_wrapper.EnumTypeWrapper(enum_des)
+        for enum_value in enum_des.values:
+            module[enum_value.name] = enum_value.number
 
-  # top level extensions
-  for (name, extension_des) in file_des.extensions_by_name.items():
-    module[name.upper() + '_FIELD_NUMBER'] = extension_des.number
-    module[name] = extension_des
+    # top level extensions
+    for name, extension_des in file_des.extensions_by_name.items():
+        module[name.upper() + "_FIELD_NUMBER"] = extension_des.number
+        module[name] = extension_des
 
-  # services
-  for (name, service) in file_des.services_by_name.items():
-    module['_' + name.upper()] = service
+    # services
+    for name, service in file_des.services_by_name.items():
+        module["_" + name.upper()] = service
 
-  # Build messages.
-  for (name, msg_des) in file_des.message_types_by_name.items():
-    module[name] = BuildMessage(msg_des, '')
+    # Build messages.
+    for name, msg_des in file_des.message_types_by_name.items():
+        module[name] = BuildMessage(msg_des, "")
 
 
 def AddHelpersToExtensions(file_des):
-  """no-op to keep old generated code work with new runtime.
+    """no-op to keep old generated code work with new runtime.
 
-  Args:
-    file_des: FileDescriptor of the .proto file
-  """
-  # TODO: Remove this on-op
-  return
+    Args:
+      file_des: FileDescriptor of the .proto file
+    """
+    # TODO: Remove this on-op
+    return
 
 
 def BuildServices(file_des, module_name, module):
-  """Builds services classes and services stub class.
+    """Builds services classes and services stub class.
 
-  Args:
-    file_des: FileDescriptor of the .proto file
-    module_name: str, the name of generated _pb2 module
-    module: Generated _pb2 module
-  """
-  # pylint: disable=g-import-not-at-top
-  from google.protobuf import service_reflection
-  # pylint: enable=g-import-not-at-top
-  for (name, service) in file_des.services_by_name.items():
-    module[name] = service_reflection.GeneratedServiceType(
-        name, (),
-        dict(DESCRIPTOR=service, __module__=module_name))
-    stub_name = name + '_Stub'
-    module[stub_name] = service_reflection.GeneratedServiceStubType(
-        stub_name, (module[name],),
-        dict(DESCRIPTOR=service, __module__=module_name))
+    Args:
+      file_des: FileDescriptor of the .proto file
+      module_name: str, the name of generated _pb2 module
+      module: Generated _pb2 module
+    """
+    # pylint: disable=g-import-not-at-top
+    from google.protobuf import service_reflection
+
+    # pylint: enable=g-import-not-at-top
+    for name, service in file_des.services_by_name.items():
+        module[name] = service_reflection.GeneratedServiceType(
+            name, (), dict(DESCRIPTOR=service, __module__=module_name)
+        )
+        stub_name = name + "_Stub"
+        module[stub_name] = service_reflection.GeneratedServiceStubType(
+            stub_name, (module[name],), dict(DESCRIPTOR=service, __module__=module_name)
+        )
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/builder.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/containers.py	2025-09-21 04:55:30.717428+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/containers.py	2025-09-21 06:00:24.241598+00:00
@@ -34,657 +34,659 @@
     Union,
     overload,
 )
 
 
-_T = TypeVar('_T')
-_K = TypeVar('_K')
-_V = TypeVar('_V')
+_T = TypeVar("_T")
+_K = TypeVar("_K")
+_V = TypeVar("_V")
 
 
 class BaseContainer(Sequence[_T]):
-  """Base container class."""
-
-  # Minimizes memory usage and disallows assignment to other attributes.
-  __slots__ = ['_message_listener', '_values']
-
-  def __init__(self, message_listener: Any) -> None:
-    """
-    Args:
-      message_listener: A MessageListener implementation.
-        The RepeatedScalarFieldContainer will call this object's
-        Modified() method when it is modified.
-    """
-    self._message_listener = message_listener
-    self._values = []
-
-  @overload
-  def __getitem__(self, key: int) -> _T:
-    ...
-
-  @overload
-  def __getitem__(self, key: slice) -> List[_T]:
-    ...
-
-  def __getitem__(self, key):
-    """Retrieves item by the specified key."""
-    return self._values[key]
-
-  def __len__(self) -> int:
-    """Returns the number of elements in the container."""
-    return len(self._values)
-
-  def __ne__(self, other: Any) -> bool:
-    """Checks if another instance isn't equal to this one."""
-    # The concrete classes should define __eq__.
-    return not self == other
-
-  __hash__ = None
-
-  def __repr__(self) -> str:
-    return repr(self._values)
-
-  def sort(self, *args, **kwargs) -> None:
-    # Continue to support the old sort_function keyword argument.
-    # This is expected to be a rare occurrence, so use LBYL to avoid
-    # the overhead of actually catching KeyError.
-    if 'sort_function' in kwargs:
-      kwargs['cmp'] = kwargs.pop('sort_function')
-    self._values.sort(*args, **kwargs)
-
-  def reverse(self) -> None:
-    self._values.reverse()
+    """Base container class."""
+
+    # Minimizes memory usage and disallows assignment to other attributes.
+    __slots__ = ["_message_listener", "_values"]
+
+    def __init__(self, message_listener: Any) -> None:
+        """
+        Args:
+          message_listener: A MessageListener implementation.
+            The RepeatedScalarFieldContainer will call this object's
+            Modified() method when it is modified.
+        """
+        self._message_listener = message_listener
+        self._values = []
+
+    @overload
+    def __getitem__(self, key: int) -> _T: ...
+
+    @overload
+    def __getitem__(self, key: slice) -> List[_T]: ...
+
+    def __getitem__(self, key):
+        """Retrieves item by the specified key."""
+        return self._values[key]
+
+    def __len__(self) -> int:
+        """Returns the number of elements in the container."""
+        return len(self._values)
+
+    def __ne__(self, other: Any) -> bool:
+        """Checks if another instance isn't equal to this one."""
+        # The concrete classes should define __eq__.
+        return not self == other
+
+    __hash__ = None
+
+    def __repr__(self) -> str:
+        return repr(self._values)
+
+    def sort(self, *args, **kwargs) -> None:
+        # Continue to support the old sort_function keyword argument.
+        # This is expected to be a rare occurrence, so use LBYL to avoid
+        # the overhead of actually catching KeyError.
+        if "sort_function" in kwargs:
+            kwargs["cmp"] = kwargs.pop("sort_function")
+        self._values.sort(*args, **kwargs)
+
+    def reverse(self) -> None:
+        self._values.reverse()
 
 
 # TODO: Remove this. BaseContainer does *not* conform to
 # MutableSequence, only its subclasses do.
 collections.abc.MutableSequence.register(BaseContainer)
 
 
 class RepeatedScalarFieldContainer(BaseContainer[_T], MutableSequence[_T]):
-  """Simple, type-checked, list-like container for holding repeated scalars."""
-
-  # Disallows assignment to other attributes.
-  __slots__ = ['_type_checker']
-
-  def __init__(
-      self,
-      message_listener: Any,
-      type_checker: Any,
-  ) -> None:
-    """Args:
-
-      message_listener: A MessageListener implementation. The
-      RepeatedScalarFieldContainer will call this object's Modified() method
-      when it is modified.
-      type_checker: A type_checkers.ValueChecker instance to run on elements
-      inserted into this container.
-    """
-    super().__init__(message_listener)
-    self._type_checker = type_checker
-
-  def append(self, value: _T) -> None:
-    """Appends an item to the list. Similar to list.append()."""
-    self._values.append(self._type_checker.CheckValue(value))
-    if not self._message_listener.dirty:
-      self._message_listener.Modified()
-
-  def insert(self, key: int, value: _T) -> None:
-    """Inserts the item at the specified position. Similar to list.insert()."""
-    self._values.insert(key, self._type_checker.CheckValue(value))
-    if not self._message_listener.dirty:
-      self._message_listener.Modified()
-
-  def extend(self, elem_seq: Iterable[_T]) -> None:
-    """Extends by appending the given iterable. Similar to list.extend()."""
-    elem_seq_iter = iter(elem_seq)
-    new_values = [self._type_checker.CheckValue(elem) for elem in elem_seq_iter]
-    if new_values:
-      self._values.extend(new_values)
-    self._message_listener.Modified()
-
-  def MergeFrom(
-      self,
-      other: Union['RepeatedScalarFieldContainer[_T]', Iterable[_T]],
-  ) -> None:
-    """Appends the contents of another repeated field of the same type to this
-    one. We do not check the types of the individual fields.
-    """
-    self._values.extend(other)
-    self._message_listener.Modified()
-
-  def remove(self, elem: _T):
-    """Removes an item from the list. Similar to list.remove()."""
-    self._values.remove(elem)
-    self._message_listener.Modified()
-
-  def pop(self, key: Optional[int] = -1) -> _T:
-    """Removes and returns an item at a given index. Similar to list.pop()."""
-    value = self._values[key]
-    self.__delitem__(key)
-    return value
-
-  @overload
-  def __setitem__(self, key: int, value: _T) -> None:
-    ...
-
-  @overload
-  def __setitem__(self, key: slice, value: Iterable[_T]) -> None:
-    ...
-
-  def __setitem__(self, key, value) -> None:
-    """Sets the item on the specified position."""
-    if isinstance(key, slice):
-      if key.step is not None:
-        raise ValueError('Extended slices not supported')
-      self._values[key] = map(self._type_checker.CheckValue, value)
-      self._message_listener.Modified()
-    else:
-      self._values[key] = self._type_checker.CheckValue(value)
-      self._message_listener.Modified()
-
-  def __delitem__(self, key: Union[int, slice]) -> None:
-    """Deletes the item at the specified position."""
-    del self._values[key]
-    self._message_listener.Modified()
-
-  def __eq__(self, other: Any) -> bool:
-    """Compares the current instance with another one."""
-    if self is other:
-      return True
-    # Special case for the same type which should be common and fast.
-    if isinstance(other, self.__class__):
-      return other._values == self._values
-    # We are presumably comparing against some other sequence type.
-    return other == self._values
-
-  def __deepcopy__(
-      self,
-      unused_memo: Any = None,
-  ) -> 'RepeatedScalarFieldContainer[_T]':
-    clone = RepeatedScalarFieldContainer(
-        copy.deepcopy(self._message_listener), self._type_checker)
-    clone.MergeFrom(self)
-    return clone
-
-  def __reduce__(self, **kwargs) -> NoReturn:
-    raise pickle.PickleError(
-        "Can't pickle repeated scalar fields, convert to list first")
+    """Simple, type-checked, list-like container for holding repeated scalars."""
+
+    # Disallows assignment to other attributes.
+    __slots__ = ["_type_checker"]
+
+    def __init__(
+        self,
+        message_listener: Any,
+        type_checker: Any,
+    ) -> None:
+        """Args:
+
+        message_listener: A MessageListener implementation. The
+        RepeatedScalarFieldContainer will call this object's Modified() method
+        when it is modified.
+        type_checker: A type_checkers.ValueChecker instance to run on elements
+        inserted into this container.
+        """
+        super().__init__(message_listener)
+        self._type_checker = type_checker
+
+    def append(self, value: _T) -> None:
+        """Appends an item to the list. Similar to list.append()."""
+        self._values.append(self._type_checker.CheckValue(value))
+        if not self._message_listener.dirty:
+            self._message_listener.Modified()
+
+    def insert(self, key: int, value: _T) -> None:
+        """Inserts the item at the specified position. Similar to list.insert()."""
+        self._values.insert(key, self._type_checker.CheckValue(value))
+        if not self._message_listener.dirty:
+            self._message_listener.Modified()
+
+    def extend(self, elem_seq: Iterable[_T]) -> None:
+        """Extends by appending the given iterable. Similar to list.extend()."""
+        elem_seq_iter = iter(elem_seq)
+        new_values = [self._type_checker.CheckValue(elem) for elem in elem_seq_iter]
+        if new_values:
+            self._values.extend(new_values)
+        self._message_listener.Modified()
+
+    def MergeFrom(
+        self,
+        other: Union["RepeatedScalarFieldContainer[_T]", Iterable[_T]],
+    ) -> None:
+        """Appends the contents of another repeated field of the same type to this
+        one. We do not check the types of the individual fields.
+        """
+        self._values.extend(other)
+        self._message_listener.Modified()
+
+    def remove(self, elem: _T):
+        """Removes an item from the list. Similar to list.remove()."""
+        self._values.remove(elem)
+        self._message_listener.Modified()
+
+    def pop(self, key: Optional[int] = -1) -> _T:
+        """Removes and returns an item at a given index. Similar to list.pop()."""
+        value = self._values[key]
+        self.__delitem__(key)
+        return value
+
+    @overload
+    def __setitem__(self, key: int, value: _T) -> None: ...
+
+    @overload
+    def __setitem__(self, key: slice, value: Iterable[_T]) -> None: ...
+
+    def __setitem__(self, key, value) -> None:
+        """Sets the item on the specified position."""
+        if isinstance(key, slice):
+            if key.step is not None:
+                raise ValueError("Extended slices not supported")
+            self._values[key] = map(self._type_checker.CheckValue, value)
+            self._message_listener.Modified()
+        else:
+            self._values[key] = self._type_checker.CheckValue(value)
+            self._message_listener.Modified()
+
+    def __delitem__(self, key: Union[int, slice]) -> None:
+        """Deletes the item at the specified position."""
+        del self._values[key]
+        self._message_listener.Modified()
+
+    def __eq__(self, other: Any) -> bool:
+        """Compares the current instance with another one."""
+        if self is other:
+            return True
+        # Special case for the same type which should be common and fast.
+        if isinstance(other, self.__class__):
+            return other._values == self._values
+        # We are presumably comparing against some other sequence type.
+        return other == self._values
+
+    def __deepcopy__(
+        self,
+        unused_memo: Any = None,
+    ) -> "RepeatedScalarFieldContainer[_T]":
+        clone = RepeatedScalarFieldContainer(
+            copy.deepcopy(self._message_listener), self._type_checker
+        )
+        clone.MergeFrom(self)
+        return clone
+
+    def __reduce__(self, **kwargs) -> NoReturn:
+        raise pickle.PickleError("Can't pickle repeated scalar fields, convert to list first")
 
 
 # TODO: Constrain T to be a subtype of Message.
 class RepeatedCompositeFieldContainer(BaseContainer[_T], MutableSequence[_T]):
-  """Simple, list-like container for holding repeated composite fields."""
-
-  # Disallows assignment to other attributes.
-  __slots__ = ['_message_descriptor']
-
-  def __init__(self, message_listener: Any, message_descriptor: Any) -> None:
-    """
-    Note that we pass in a descriptor instead of the generated directly,
-    since at the time we construct a _RepeatedCompositeFieldContainer we
-    haven't yet necessarily initialized the type that will be contained in the
-    container.
-
-    Args:
-      message_listener: A MessageListener implementation.
-        The RepeatedCompositeFieldContainer will call this object's
-        Modified() method when it is modified.
-      message_descriptor: A Descriptor instance describing the protocol type
-        that should be present in this container.  We'll use the
-        _concrete_class field of this descriptor when the client calls add().
-    """
-    super().__init__(message_listener)
-    self._message_descriptor = message_descriptor
-
-  def add(self, **kwargs: Any) -> _T:
-    """Adds a new element at the end of the list and returns it. Keyword
-    arguments may be used to initialize the element.
-    """
-    new_element = self._message_descriptor._concrete_class(**kwargs)
-    new_element._SetListener(self._message_listener)
-    self._values.append(new_element)
-    if not self._message_listener.dirty:
-      self._message_listener.Modified()
-    return new_element
-
-  def append(self, value: _T) -> None:
-    """Appends one element by copying the message."""
-    new_element = self._message_descriptor._concrete_class()
-    new_element._SetListener(self._message_listener)
-    new_element.CopyFrom(value)
-    self._values.append(new_element)
-    if not self._message_listener.dirty:
-      self._message_listener.Modified()
-
-  def insert(self, key: int, value: _T) -> None:
-    """Inserts the item at the specified position by copying."""
-    new_element = self._message_descriptor._concrete_class()
-    new_element._SetListener(self._message_listener)
-    new_element.CopyFrom(value)
-    self._values.insert(key, new_element)
-    if not self._message_listener.dirty:
-      self._message_listener.Modified()
-
-  def extend(self, elem_seq: Iterable[_T]) -> None:
-    """Extends by appending the given sequence of elements of the same type
-
-    as this one, copying each individual message.
-    """
-    message_class = self._message_descriptor._concrete_class
-    listener = self._message_listener
-    values = self._values
-    for message in elem_seq:
-      new_element = message_class()
-      new_element._SetListener(listener)
-      new_element.MergeFrom(message)
-      values.append(new_element)
-    listener.Modified()
-
-  def MergeFrom(
-      self,
-      other: Union['RepeatedCompositeFieldContainer[_T]', Iterable[_T]],
-  ) -> None:
-    """Appends the contents of another repeated field of the same type to this
-    one, copying each individual message.
-    """
-    self.extend(other)
-
-  def remove(self, elem: _T) -> None:
-    """Removes an item from the list. Similar to list.remove()."""
-    self._values.remove(elem)
-    self._message_listener.Modified()
-
-  def pop(self, key: Optional[int] = -1) -> _T:
-    """Removes and returns an item at a given index. Similar to list.pop()."""
-    value = self._values[key]
-    self.__delitem__(key)
-    return value
-
-  @overload
-  def __setitem__(self, key: int, value: _T) -> None:
-    ...
-
-  @overload
-  def __setitem__(self, key: slice, value: Iterable[_T]) -> None:
-    ...
-
-  def __setitem__(self, key, value):
-    # This method is implemented to make RepeatedCompositeFieldContainer
-    # structurally compatible with typing.MutableSequence. It is
-    # otherwise unsupported and will always raise an error.
-    raise TypeError(
-        f'{self.__class__.__name__} object does not support item assignment')
-
-  def __delitem__(self, key: Union[int, slice]) -> None:
-    """Deletes the item at the specified position."""
-    del self._values[key]
-    self._message_listener.Modified()
-
-  def __eq__(self, other: Any) -> bool:
-    """Compares the current instance with another one."""
-    if self is other:
-      return True
-    if not isinstance(other, self.__class__):
-      raise TypeError('Can only compare repeated composite fields against '
-                      'other repeated composite fields.')
-    return self._values == other._values
+    """Simple, list-like container for holding repeated composite fields."""
+
+    # Disallows assignment to other attributes.
+    __slots__ = ["_message_descriptor"]
+
+    def __init__(self, message_listener: Any, message_descriptor: Any) -> None:
+        """
+        Note that we pass in a descriptor instead of the generated directly,
+        since at the time we construct a _RepeatedCompositeFieldContainer we
+        haven't yet necessarily initialized the type that will be contained in the
+        container.
+
+        Args:
+          message_listener: A MessageListener implementation.
+            The RepeatedCompositeFieldContainer will call this object's
+            Modified() method when it is modified.
+          message_descriptor: A Descriptor instance describing the protocol type
+            that should be present in this container.  We'll use the
+            _concrete_class field of this descriptor when the client calls add().
+        """
+        super().__init__(message_listener)
+        self._message_descriptor = message_descriptor
+
+    def add(self, **kwargs: Any) -> _T:
+        """Adds a new element at the end of the list and returns it. Keyword
+        arguments may be used to initialize the element.
+        """
+        new_element = self._message_descriptor._concrete_class(**kwargs)
+        new_element._SetListener(self._message_listener)
+        self._values.append(new_element)
+        if not self._message_listener.dirty:
+            self._message_listener.Modified()
+        return new_element
+
+    def append(self, value: _T) -> None:
+        """Appends one element by copying the message."""
+        new_element = self._message_descriptor._concrete_class()
+        new_element._SetListener(self._message_listener)
+        new_element.CopyFrom(value)
+        self._values.append(new_element)
+        if not self._message_listener.dirty:
+            self._message_listener.Modified()
+
+    def insert(self, key: int, value: _T) -> None:
+        """Inserts the item at the specified position by copying."""
+        new_element = self._message_descriptor._concrete_class()
+        new_element._SetListener(self._message_listener)
+        new_element.CopyFrom(value)
+        self._values.insert(key, new_element)
+        if not self._message_listener.dirty:
+            self._message_listener.Modified()
+
+    def extend(self, elem_seq: Iterable[_T]) -> None:
+        """Extends by appending the given sequence of elements of the same type
+
+        as this one, copying each individual message.
+        """
+        message_class = self._message_descriptor._concrete_class
+        listener = self._message_listener
+        values = self._values
+        for message in elem_seq:
+            new_element = message_class()
+            new_element._SetListener(listener)
+            new_element.MergeFrom(message)
+            values.append(new_element)
+        listener.Modified()
+
+    def MergeFrom(
+        self,
+        other: Union["RepeatedCompositeFieldContainer[_T]", Iterable[_T]],
+    ) -> None:
+        """Appends the contents of another repeated field of the same type to this
+        one, copying each individual message.
+        """
+        self.extend(other)
+
+    def remove(self, elem: _T) -> None:
+        """Removes an item from the list. Similar to list.remove()."""
+        self._values.remove(elem)
+        self._message_listener.Modified()
+
+    def pop(self, key: Optional[int] = -1) -> _T:
+        """Removes and returns an item at a given index. Similar to list.pop()."""
+        value = self._values[key]
+        self.__delitem__(key)
+        return value
+
+    @overload
+    def __setitem__(self, key: int, value: _T) -> None: ...
+
+    @overload
+    def __setitem__(self, key: slice, value: Iterable[_T]) -> None: ...
+
+    def __setitem__(self, key, value):
+        # This method is implemented to make RepeatedCompositeFieldContainer
+        # structurally compatible with typing.MutableSequence. It is
+        # otherwise unsupported and will always raise an error.
+        raise TypeError(f"{self.__class__.__name__} object does not support item assignment")
+
+    def __delitem__(self, key: Union[int, slice]) -> None:
+        """Deletes the item at the specified position."""
+        del self._values[key]
+        self._message_listener.Modified()
+
+    def __eq__(self, other: Any) -> bool:
+        """Compares the current instance with another one."""
+        if self is other:
+            return True
+        if not isinstance(other, self.__class__):
+            raise TypeError(
+                "Can only compare repeated composite fields against "
+                "other repeated composite fields."
+            )
+        return self._values == other._values
 
 
 class ScalarMap(MutableMapping[_K, _V]):
-  """Simple, type-checked, dict-like container for holding repeated scalars."""
-
-  # Disallows assignment to other attributes.
-  __slots__ = ['_key_checker', '_value_checker', '_values', '_message_listener',
-               '_entry_descriptor']
-
-  def __init__(
-      self,
-      message_listener: Any,
-      key_checker: Any,
-      value_checker: Any,
-      entry_descriptor: Any,
-  ) -> None:
-    """
-    Args:
-      message_listener: A MessageListener implementation.
-        The ScalarMap will call this object's Modified() method when it
-        is modified.
-      key_checker: A type_checkers.ValueChecker instance to run on keys
-        inserted into this container.
-      value_checker: A type_checkers.ValueChecker instance to run on values
-        inserted into this container.
-      entry_descriptor: The MessageDescriptor of a map entry: key and value.
-    """
-    self._message_listener = message_listener
-    self._key_checker = key_checker
-    self._value_checker = value_checker
-    self._entry_descriptor = entry_descriptor
-    self._values = {}
-
-  def __getitem__(self, key: _K) -> _V:
-    try:
-      return self._values[key]
-    except KeyError:
-      key = self._key_checker.CheckValue(key)
-      val = self._value_checker.DefaultValue()
-      self._values[key] = val
-      return val
-
-  def __contains__(self, item: _K) -> bool:
-    # We check the key's type to match the strong-typing flavor of the API.
-    # Also this makes it easier to match the behavior of the C++ implementation.
-    self._key_checker.CheckValue(item)
-    return item in self._values
-
-  @overload
-  def get(self, key: _K) -> Optional[_V]:
-    ...
-
-  @overload
-  def get(self, key: _K, default: _T) -> Union[_V, _T]:
-    ...
-
-  # We need to override this explicitly, because our defaultdict-like behavior
-  # will make the default implementation (from our base class) always insert
-  # the key.
-  def get(self, key, default=None):
-    if key in self:
-      return self[key]
-    else:
-      return default
-
-  def __setitem__(self, key: _K, value: _V) -> _T:
-    checked_key = self._key_checker.CheckValue(key)
-    checked_value = self._value_checker.CheckValue(value)
-    self._values[checked_key] = checked_value
-    self._message_listener.Modified()
-
-  def __delitem__(self, key: _K) -> None:
-    del self._values[key]
-    self._message_listener.Modified()
-
-  def __len__(self) -> int:
-    return len(self._values)
-
-  def __iter__(self) -> Iterator[_K]:
-    return iter(self._values)
-
-  def __repr__(self) -> str:
-    return repr(self._values)
-
-  def setdefault(self, key: _K, value: Optional[_V] = None) -> _V:
-    if value == None:
-      raise ValueError('The value for scalar map setdefault must be set.')
-    if key not in self._values:
-      self.__setitem__(key, value)
-    return self[key]
-
-  def MergeFrom(self, other: 'ScalarMap[_K, _V]') -> None:
-    self._values.update(other._values)
-    self._message_listener.Modified()
-
-  def InvalidateIterators(self) -> None:
-    # It appears that the only way to reliably invalidate iterators to
-    # self._values is to ensure that its size changes.
-    original = self._values
-    self._values = original.copy()
-    original[None] = None
-
-  # This is defined in the abstract base, but we can do it much more cheaply.
-  def clear(self) -> None:
-    self._values.clear()
-    self._message_listener.Modified()
-
-  def GetEntryClass(self) -> Any:
-    return self._entry_descriptor._concrete_class
+    """Simple, type-checked, dict-like container for holding repeated scalars."""
+
+    # Disallows assignment to other attributes.
+    __slots__ = [
+        "_key_checker",
+        "_value_checker",
+        "_values",
+        "_message_listener",
+        "_entry_descriptor",
+    ]
+
+    def __init__(
+        self,
+        message_listener: Any,
+        key_checker: Any,
+        value_checker: Any,
+        entry_descriptor: Any,
+    ) -> None:
+        """
+        Args:
+          message_listener: A MessageListener implementation.
+            The ScalarMap will call this object's Modified() method when it
+            is modified.
+          key_checker: A type_checkers.ValueChecker instance to run on keys
+            inserted into this container.
+          value_checker: A type_checkers.ValueChecker instance to run on values
+            inserted into this container.
+          entry_descriptor: The MessageDescriptor of a map entry: key and value.
+        """
+        self._message_listener = message_listener
+        self._key_checker = key_checker
+        self._value_checker = value_checker
+        self._entry_descriptor = entry_descriptor
+        self._values = {}
+
+    def __getitem__(self, key: _K) -> _V:
+        try:
+            return self._values[key]
+        except KeyError:
+            key = self._key_checker.CheckValue(key)
+            val = self._value_checker.DefaultValue()
+            self._values[key] = val
+            return val
+
+    def __contains__(self, item: _K) -> bool:
+        # We check the key's type to match the strong-typing flavor of the API.
+        # Also this makes it easier to match the behavior of the C++ implementation.
+        self._key_checker.CheckValue(item)
+        return item in self._values
+
+    @overload
+    def get(self, key: _K) -> Optional[_V]: ...
+
+    @overload
+    def get(self, key: _K, default: _T) -> Union[_V, _T]: ...
+
+    # We need to override this explicitly, because our defaultdict-like behavior
+    # will make the default implementation (from our base class) always insert
+    # the key.
+    def get(self, key, default=None):
+        if key in self:
+            return self[key]
+        else:
+            return default
+
+    def __setitem__(self, key: _K, value: _V) -> _T:
+        checked_key = self._key_checker.CheckValue(key)
+        checked_value = self._value_checker.CheckValue(value)
+        self._values[checked_key] = checked_value
+        self._message_listener.Modified()
+
+    def __delitem__(self, key: _K) -> None:
+        del self._values[key]
+        self._message_listener.Modified()
+
+    def __len__(self) -> int:
+        return len(self._values)
+
+    def __iter__(self) -> Iterator[_K]:
+        return iter(self._values)
+
+    def __repr__(self) -> str:
+        return repr(self._values)
+
+    def setdefault(self, key: _K, value: Optional[_V] = None) -> _V:
+        if value == None:
+            raise ValueError("The value for scalar map setdefault must be set.")
+        if key not in self._values:
+            self.__setitem__(key, value)
+        return self[key]
+
+    def MergeFrom(self, other: "ScalarMap[_K, _V]") -> None:
+        self._values.update(other._values)
+        self._message_listener.Modified()
+
+    def InvalidateIterators(self) -> None:
+        # It appears that the only way to reliably invalidate iterators to
+        # self._values is to ensure that its size changes.
+        original = self._values
+        self._values = original.copy()
+        original[None] = None
+
+    # This is defined in the abstract base, but we can do it much more cheaply.
+    def clear(self) -> None:
+        self._values.clear()
+        self._message_listener.Modified()
+
+    def GetEntryClass(self) -> Any:
+        return self._entry_descriptor._concrete_class
 
 
 class MessageMap(MutableMapping[_K, _V]):
-  """Simple, type-checked, dict-like container for with submessage values."""
-
-  # Disallows assignment to other attributes.
-  __slots__ = ['_key_checker', '_values', '_message_listener',
-               '_message_descriptor', '_entry_descriptor']
-
-  def __init__(
-      self,
-      message_listener: Any,
-      message_descriptor: Any,
-      key_checker: Any,
-      entry_descriptor: Any,
-  ) -> None:
-    """
-    Args:
-      message_listener: A MessageListener implementation.
-        The ScalarMap will call this object's Modified() method when it
-        is modified.
-      key_checker: A type_checkers.ValueChecker instance to run on keys
-        inserted into this container.
-      value_checker: A type_checkers.ValueChecker instance to run on values
-        inserted into this container.
-      entry_descriptor: The MessageDescriptor of a map entry: key and value.
-    """
-    self._message_listener = message_listener
-    self._message_descriptor = message_descriptor
-    self._key_checker = key_checker
-    self._entry_descriptor = entry_descriptor
-    self._values = {}
-
-  def __getitem__(self, key: _K) -> _V:
-    key = self._key_checker.CheckValue(key)
-    try:
-      return self._values[key]
-    except KeyError:
-      new_element = self._message_descriptor._concrete_class()
-      new_element._SetListener(self._message_listener)
-      self._values[key] = new_element
-      self._message_listener.Modified()
-      return new_element
-
-  def get_or_create(self, key: _K) -> _V:
-    """get_or_create() is an alias for getitem (ie. map[key]).
-
-    Args:
-      key: The key to get or create in the map.
-
-    This is useful in cases where you want to be explicit that the call is
-    mutating the map.  This can avoid lint errors for statements like this
-    that otherwise would appear to be pointless statements:
-
-      msg.my_map[key]
-    """
-    return self[key]
-
-  @overload
-  def get(self, key: _K) -> Optional[_V]:
-    ...
-
-  @overload
-  def get(self, key: _K, default: _T) -> Union[_V, _T]:
-    ...
-
-  # We need to override this explicitly, because our defaultdict-like behavior
-  # will make the default implementation (from our base class) always insert
-  # the key.
-  def get(self, key, default=None):
-    if key in self:
-      return self[key]
-    else:
-      return default
-
-  def __contains__(self, item: _K) -> bool:
-    item = self._key_checker.CheckValue(item)
-    return item in self._values
-
-  def __setitem__(self, key: _K, value: _V) -> NoReturn:
-    raise ValueError('May not set values directly, call my_map[key].foo = 5')
-
-  def __delitem__(self, key: _K) -> None:
-    key = self._key_checker.CheckValue(key)
-    del self._values[key]
-    self._message_listener.Modified()
-
-  def __len__(self) -> int:
-    return len(self._values)
-
-  def __iter__(self) -> Iterator[_K]:
-    return iter(self._values)
-
-  def __repr__(self) -> str:
-    return repr(self._values)
-
-  def setdefault(self, key: _K, value: Optional[_V] = None) -> _V:
-    raise NotImplementedError(
-        'Set message map value directly is not supported, call'
-        ' my_map[key].foo = 5'
-    )
-
-  def MergeFrom(self, other: 'MessageMap[_K, _V]') -> None:
-    # pylint: disable=protected-access
-    for key in other._values:
-      # According to documentation: "When parsing from the wire or when merging,
-      # if there are duplicate map keys the last key seen is used".
-      if key in self:
-        del self[key]
-      self[key].CopyFrom(other[key])
-    # self._message_listener.Modified() not required here, because
-    # mutations to submessages already propagate.
-
-  def InvalidateIterators(self) -> None:
-    # It appears that the only way to reliably invalidate iterators to
-    # self._values is to ensure that its size changes.
-    original = self._values
-    self._values = original.copy()
-    original[None] = None
-
-  # This is defined in the abstract base, but we can do it much more cheaply.
-  def clear(self) -> None:
-    self._values.clear()
-    self._message_listener.Modified()
-
-  def GetEntryClass(self) -> Any:
-    return self._entry_descriptor._concrete_class
+    """Simple, type-checked, dict-like container for with submessage values."""
+
+    # Disallows assignment to other attributes.
+    __slots__ = [
+        "_key_checker",
+        "_values",
+        "_message_listener",
+        "_message_descriptor",
+        "_entry_descriptor",
+    ]
+
+    def __init__(
+        self,
+        message_listener: Any,
+        message_descriptor: Any,
+        key_checker: Any,
+        entry_descriptor: Any,
+    ) -> None:
+        """
+        Args:
+          message_listener: A MessageListener implementation.
+            The ScalarMap will call this object's Modified() method when it
+            is modified.
+          key_checker: A type_checkers.ValueChecker instance to run on keys
+            inserted into this container.
+          value_checker: A type_checkers.ValueChecker instance to run on values
+            inserted into this container.
+          entry_descriptor: The MessageDescriptor of a map entry: key and value.
+        """
+        self._message_listener = message_listener
+        self._message_descriptor = message_descriptor
+        self._key_checker = key_checker
+        self._entry_descriptor = entry_descriptor
+        self._values = {}
+
+    def __getitem__(self, key: _K) -> _V:
+        key = self._key_checker.CheckValue(key)
+        try:
+            return self._values[key]
+        except KeyError:
+            new_element = self._message_descriptor._concrete_class()
+            new_element._SetListener(self._message_listener)
+            self._values[key] = new_element
+            self._message_listener.Modified()
+            return new_element
+
+    def get_or_create(self, key: _K) -> _V:
+        """get_or_create() is an alias for getitem (ie. map[key]).
+
+        Args:
+          key: The key to get or create in the map.
+
+        This is useful in cases where you want to be explicit that the call is
+        mutating the map.  This can avoid lint errors for statements like this
+        that otherwise would appear to be pointless statements:
+
+          msg.my_map[key]
+        """
+        return self[key]
+
+    @overload
+    def get(self, key: _K) -> Optional[_V]: ...
+
+    @overload
+    def get(self, key: _K, default: _T) -> Union[_V, _T]: ...
+
+    # We need to override this explicitly, because our defaultdict-like behavior
+    # will make the default implementation (from our base class) always insert
+    # the key.
+    def get(self, key, default=None):
+        if key in self:
+            return self[key]
+        else:
+            return default
+
+    def __contains__(self, item: _K) -> bool:
+        item = self._key_checker.CheckValue(item)
+        return item in self._values
+
+    def __setitem__(self, key: _K, value: _V) -> NoReturn:
+        raise ValueError("May not set values directly, call my_map[key].foo = 5")
+
+    def __delitem__(self, key: _K) -> None:
+        key = self._key_checker.CheckValue(key)
+        del self._values[key]
+        self._message_listener.Modified()
+
+    def __len__(self) -> int:
+        return len(self._values)
+
+    def __iter__(self) -> Iterator[_K]:
+        return iter(self._values)
+
+    def __repr__(self) -> str:
+        return repr(self._values)
+
+    def setdefault(self, key: _K, value: Optional[_V] = None) -> _V:
+        raise NotImplementedError(
+            "Set message map value directly is not supported, call" " my_map[key].foo = 5"
+        )
+
+    def MergeFrom(self, other: "MessageMap[_K, _V]") -> None:
+        # pylint: disable=protected-access
+        for key in other._values:
+            # According to documentation: "When parsing from the wire or when merging,
+            # if there are duplicate map keys the last key seen is used".
+            if key in self:
+                del self[key]
+            self[key].CopyFrom(other[key])
+        # self._message_listener.Modified() not required here, because
+        # mutations to submessages already propagate.
+
+    def InvalidateIterators(self) -> None:
+        # It appears that the only way to reliably invalidate iterators to
+        # self._values is to ensure that its size changes.
+        original = self._values
+        self._values = original.copy()
+        original[None] = None
+
+    # This is defined in the abstract base, but we can do it much more cheaply.
+    def clear(self) -> None:
+        self._values.clear()
+        self._message_listener.Modified()
+
+    def GetEntryClass(self) -> Any:
+        return self._entry_descriptor._concrete_class
 
 
 class _UnknownField:
-  """A parsed unknown field."""
-
-  # Disallows assignment to other attributes.
-  __slots__ = ['_field_number', '_wire_type', '_data']
-
-  def __init__(self, field_number, wire_type, data):
-    self._field_number = field_number
-    self._wire_type = wire_type
-    self._data = data
-    return
-
-  def __lt__(self, other):
-    # pylint: disable=protected-access
-    return self._field_number < other._field_number
-
-  def __eq__(self, other):
-    if self is other:
-      return True
-    # pylint: disable=protected-access
-    return (self._field_number == other._field_number and
-            self._wire_type == other._wire_type and
-            self._data == other._data)
+    """A parsed unknown field."""
+
+    # Disallows assignment to other attributes.
+    __slots__ = ["_field_number", "_wire_type", "_data"]
+
+    def __init__(self, field_number, wire_type, data):
+        self._field_number = field_number
+        self._wire_type = wire_type
+        self._data = data
+        return
+
+    def __lt__(self, other):
+        # pylint: disable=protected-access
+        return self._field_number < other._field_number
+
+    def __eq__(self, other):
+        if self is other:
+            return True
+        # pylint: disable=protected-access
+        return (
+            self._field_number == other._field_number
+            and self._wire_type == other._wire_type
+            and self._data == other._data
+        )
 
 
 class UnknownFieldRef:  # pylint: disable=missing-class-docstring
 
-  def __init__(self, parent, index):
-    self._parent = parent
-    self._index = index
-
-  def _check_valid(self):
-    if not self._parent:
-      raise ValueError('UnknownField does not exist. '
-                       'The parent message might be cleared.')
-    if self._index >= len(self._parent):
-      raise ValueError('UnknownField does not exist. '
-                       'The parent message might be cleared.')
-
-  @property
-  def field_number(self):
-    self._check_valid()
-    # pylint: disable=protected-access
-    return self._parent._internal_get(self._index)._field_number
-
-  @property
-  def wire_type(self):
-    self._check_valid()
-    # pylint: disable=protected-access
-    return self._parent._internal_get(self._index)._wire_type
-
-  @property
-  def data(self):
-    self._check_valid()
-    # pylint: disable=protected-access
-    return self._parent._internal_get(self._index)._data
+    def __init__(self, parent, index):
+        self._parent = parent
+        self._index = index
+
+    def _check_valid(self):
+        if not self._parent:
+            raise ValueError("UnknownField does not exist. " "The parent message might be cleared.")
+        if self._index >= len(self._parent):
+            raise ValueError("UnknownField does not exist. " "The parent message might be cleared.")
+
+    @property
+    def field_number(self):
+        self._check_valid()
+        # pylint: disable=protected-access
+        return self._parent._internal_get(self._index)._field_number
+
+    @property
+    def wire_type(self):
+        self._check_valid()
+        # pylint: disable=protected-access
+        return self._parent._internal_get(self._index)._wire_type
+
+    @property
+    def data(self):
+        self._check_valid()
+        # pylint: disable=protected-access
+        return self._parent._internal_get(self._index)._data
 
 
 class UnknownFieldSet:
-  """UnknownField container"""
-
-  # Disallows assignment to other attributes.
-  __slots__ = ['_values']
-
-  def __init__(self):
-    self._values = []
-
-  def __getitem__(self, index):
-    if self._values is None:
-      raise ValueError('UnknownFields does not exist. '
-                       'The parent message might be cleared.')
-    size = len(self._values)
-    if index < 0:
-      index += size
-    if index < 0 or index >= size:
-      raise IndexError('index %d out of range'.index)
-
-    return UnknownFieldRef(self, index)
-
-  def _internal_get(self, index):
-    return self._values[index]
-
-  def __len__(self):
-    if self._values is None:
-      raise ValueError('UnknownFields does not exist. '
-                       'The parent message might be cleared.')
-    return len(self._values)
-
-  def _add(self, field_number, wire_type, data):
-    unknown_field = _UnknownField(field_number, wire_type, data)
-    self._values.append(unknown_field)
-    return unknown_field
-
-  def __iter__(self):
-    for i in range(len(self)):
-      yield UnknownFieldRef(self, i)
-
-  def _extend(self, other):
-    if other is None:
-      return
-    # pylint: disable=protected-access
-    self._values.extend(other._values)
-
-  def __eq__(self, other):
-    if self is other:
-      return True
-    # Sort unknown fields because their order shouldn't
-    # affect equality test.
-    values = list(self._values)
-    if other is None:
-      return not values
-    values.sort()
-    # pylint: disable=protected-access
-    other_values = sorted(other._values)
-    return values == other_values
-
-  def _clear(self):
-    for value in self._values:
-      # pylint: disable=protected-access
-      if isinstance(value._data, UnknownFieldSet):
-        value._data._clear()  # pylint: disable=protected-access
-    self._values = None
+    """UnknownField container"""
+
+    # Disallows assignment to other attributes.
+    __slots__ = ["_values"]
+
+    def __init__(self):
+        self._values = []
+
+    def __getitem__(self, index):
+        if self._values is None:
+            raise ValueError(
+                "UnknownFields does not exist. " "The parent message might be cleared."
+            )
+        size = len(self._values)
+        if index < 0:
+            index += size
+        if index < 0 or index >= size:
+            raise IndexError("index %d out of range".index)
+
+        return UnknownFieldRef(self, index)
+
+    def _internal_get(self, index):
+        return self._values[index]
+
+    def __len__(self):
+        if self._values is None:
+            raise ValueError(
+                "UnknownFields does not exist. " "The parent message might be cleared."
+            )
+        return len(self._values)
+
+    def _add(self, field_number, wire_type, data):
+        unknown_field = _UnknownField(field_number, wire_type, data)
+        self._values.append(unknown_field)
+        return unknown_field
+
+    def __iter__(self):
+        for i in range(len(self)):
+            yield UnknownFieldRef(self, i)
+
+    def _extend(self, other):
+        if other is None:
+            return
+        # pylint: disable=protected-access
+        self._values.extend(other._values)
+
+    def __eq__(self, other):
+        if self is other:
+            return True
+        # Sort unknown fields because their order shouldn't
+        # affect equality test.
+        values = list(self._values)
+        if other is None:
+            return not values
+        values.sort()
+        # pylint: disable=protected-access
+        other_values = sorted(other._values)
+        return values == other_values
+
+    def _clear(self):
+        for value in self._values:
+            # pylint: disable=protected-access
+            if isinstance(value._data, UnknownFieldSet):
+                value._data._clear()  # pylint: disable=protected-access
+        self._values = None
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/containers.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/pyext/cpp_message.py	2025-09-21 04:55:30.720982+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/pyext/cpp_message.py	2025-09-21 06:00:27.280471+00:00
@@ -9,41 +9,40 @@
 
 Contains helper functions used to create protocol message classes from
 Descriptor objects at runtime backed by the protocol buffer C++ API.
 """
 
-__author__ = 'tibell@google.com (Johan Tibell)'
+__author__ = "tibell@google.com (Johan Tibell)"
 
 from google.protobuf.internal import api_implementation
 
 
 # pylint: disable=protected-access
 _message = api_implementation._c_module
 # TODO: Remove this import after fix api_implementation
 if _message is None:
-  from google.protobuf.pyext import _message
+    from google.protobuf.pyext import _message
 
 
 class GeneratedProtocolMessageType(_message.MessageMeta):
+    """Metaclass for protocol message classes created at runtime from Descriptors.
 
-  """Metaclass for protocol message classes created at runtime from Descriptors.
+    The protocol compiler currently uses this metaclass to create protocol
+    message classes at runtime.  Clients can also manually create their own
+    classes at runtime, as in this example:
 
-  The protocol compiler currently uses this metaclass to create protocol
-  message classes at runtime.  Clients can also manually create their own
-  classes at runtime, as in this example:
+    mydescriptor = Descriptor(.....)
+    factory = symbol_database.Default()
+    factory.pool.AddDescriptor(mydescriptor)
+    MyProtoClass = message_factory.GetMessageClass(mydescriptor)
+    myproto_instance = MyProtoClass()
+    myproto.foo_field = 23
+    ...
 
-  mydescriptor = Descriptor(.....)
-  factory = symbol_database.Default()
-  factory.pool.AddDescriptor(mydescriptor)
-  MyProtoClass = message_factory.GetMessageClass(mydescriptor)
-  myproto_instance = MyProtoClass()
-  myproto.foo_field = 23
-  ...
+    The above example will not work for nested types. If you wish to include them,
+    use reflection.MakeClass() instead of manually instantiating the class in
+    order to create the appropriate class structure.
+    """
 
-  The above example will not work for nested types. If you wish to include them,
-  use reflection.MakeClass() instead of manually instantiating the class in
-  order to create the appropriate class structure.
-  """
-
-  # Must be consistent with the protocol-compiler code in
-  # proto2/compiler/internal/generator.*.
-  _DESCRIPTOR_KEY = 'DESCRIPTOR'
+    # Must be consistent with the protocol-compiler code in
+    # proto2/compiler/internal/generator.*.
+    _DESCRIPTOR_KEY = "DESCRIPTOR"
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/pyext/cpp_message.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/extension_dict.py	2025-09-21 04:55:30.718070+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/extension_dict.py	2025-09-21 06:00:27.616830+00:00
@@ -3,192 +3,194 @@
 #
 # Use of this source code is governed by a BSD-style
 # license that can be found in the LICENSE file or at
 # https://developers.google.com/open-source/licenses/bsd
 
-"""Contains _ExtensionDict class to represent extensions.
-"""
+"""Contains _ExtensionDict class to represent extensions."""
 
 from google.protobuf.internal import type_checkers
 from google.protobuf.descriptor import FieldDescriptor
 
 
 def _VerifyExtensionHandle(message, extension_handle):
-  """Verify that the given extension handle is valid."""
+    """Verify that the given extension handle is valid."""
 
-  if not isinstance(extension_handle, FieldDescriptor):
-    raise KeyError('HasExtension() expects an extension handle, got: %s' %
-                   extension_handle)
+    if not isinstance(extension_handle, FieldDescriptor):
+        raise KeyError("HasExtension() expects an extension handle, got: %s" % extension_handle)
 
-  if not extension_handle.is_extension:
-    raise KeyError('"%s" is not an extension.' % extension_handle.full_name)
+    if not extension_handle.is_extension:
+        raise KeyError('"%s" is not an extension.' % extension_handle.full_name)
 
-  if not extension_handle.containing_type:
-    raise KeyError('"%s" is missing a containing_type.'
-                   % extension_handle.full_name)
+    if not extension_handle.containing_type:
+        raise KeyError('"%s" is missing a containing_type.' % extension_handle.full_name)
 
-  if extension_handle.containing_type is not message.DESCRIPTOR:
-    raise KeyError('Extension "%s" extends message type "%s", but this '
-                   'message is of type "%s".' %
-                   (extension_handle.full_name,
-                    extension_handle.containing_type.full_name,
-                    message.DESCRIPTOR.full_name))
+    if extension_handle.containing_type is not message.DESCRIPTOR:
+        raise KeyError(
+            'Extension "%s" extends message type "%s", but this '
+            'message is of type "%s".'
+            % (
+                extension_handle.full_name,
+                extension_handle.containing_type.full_name,
+                message.DESCRIPTOR.full_name,
+            )
+        )
 
 
 # TODO: Unify error handling of "unknown extension" crap.
 # TODO: Support iteritems()-style iteration over all
 # extensions with the "has" bits turned on?
 class _ExtensionDict(object):
+    """Dict-like container for Extension fields on proto instances.
 
-  """Dict-like container for Extension fields on proto instances.
-
-  Note that in all cases we expect extension handles to be
-  FieldDescriptors.
-  """
-
-  def __init__(self, extended_message):
-    """
-    Args:
-      extended_message: Message instance for which we are the Extensions dict.
-    """
-    self._extended_message = extended_message
-
-  def __getitem__(self, extension_handle):
-    """Returns the current value of the given extension handle."""
-
-    _VerifyExtensionHandle(self._extended_message, extension_handle)
-
-    result = self._extended_message._fields.get(extension_handle)
-    if result is not None:
-      return result
-
-    if extension_handle.is_repeated:
-      result = extension_handle._default_constructor(self._extended_message)
-    elif extension_handle.cpp_type == FieldDescriptor.CPPTYPE_MESSAGE:
-      message_type = extension_handle.message_type
-      if not hasattr(message_type, '_concrete_class'):
-        # pylint: disable=g-import-not-at-top
-        from google.protobuf import message_factory
-        message_factory.GetMessageClass(message_type)
-      if not hasattr(extension_handle.message_type, '_concrete_class'):
-        from google.protobuf import message_factory
-        message_factory.GetMessageClass(extension_handle.message_type)
-      result = extension_handle.message_type._concrete_class()
-      try:
-        result._SetListener(self._extended_message._listener_for_children)
-      except ReferenceError:
-        pass
-    else:
-      # Singular scalar -- just return the default without inserting into the
-      # dict.
-      return extension_handle.default_value
-
-    # Atomically check if another thread has preempted us and, if not, swap
-    # in the new object we just created.  If someone has preempted us, we
-    # take that object and discard ours.
-    # WARNING:  We are relying on setdefault() being atomic.  This is true
-    #   in CPython but we haven't investigated others.  This warning appears
-    #   in several other locations in this file.
-    result = self._extended_message._fields.setdefault(
-        extension_handle, result)
-
-    return result
-
-  def __eq__(self, other):
-    if not isinstance(other, self.__class__):
-      return False
-
-    my_fields = self._extended_message.ListFields()
-    other_fields = other._extended_message.ListFields()
-
-    # Get rid of non-extension fields.
-    my_fields = [field for field in my_fields if field.is_extension]
-    other_fields = [field for field in other_fields if field.is_extension]
-
-    return my_fields == other_fields
-
-  def __ne__(self, other):
-    return not self == other
-
-  def __len__(self):
-    fields = self._extended_message.ListFields()
-    # Get rid of non-extension fields.
-    extension_fields = [field for field in fields if field[0].is_extension]
-    return len(extension_fields)
-
-  def __hash__(self):
-    raise TypeError('unhashable object')
-
-  # Note that this is only meaningful for non-repeated, scalar extension
-  # fields.  Note also that we may have to call _Modified() when we do
-  # successfully set a field this way, to set any necessary "has" bits in the
-  # ancestors of the extended message.
-  def __setitem__(self, extension_handle, value):
-    """If extension_handle specifies a non-repeated, scalar extension
-    field, sets the value of that field.
+    Note that in all cases we expect extension handles to be
+    FieldDescriptors.
     """
 
-    _VerifyExtensionHandle(self._extended_message, extension_handle)
+    def __init__(self, extended_message):
+        """
+        Args:
+          extended_message: Message instance for which we are the Extensions dict.
+        """
+        self._extended_message = extended_message
 
-    if (extension_handle.is_repeated or
-        extension_handle.cpp_type == FieldDescriptor.CPPTYPE_MESSAGE):
-      raise TypeError(
-          'Cannot assign to extension "%s" because it is a repeated or '
-          'composite type.' % extension_handle.full_name)
+    def __getitem__(self, extension_handle):
+        """Returns the current value of the given extension handle."""
 
-    # It's slightly wasteful to lookup the type checker each time,
-    # but we expect this to be a vanishingly uncommon case anyway.
-    type_checker = type_checkers.GetTypeChecker(extension_handle)
-    # pylint: disable=protected-access
-    self._extended_message._fields[extension_handle] = (
-        type_checker.CheckValue(value))
-    self._extended_message._Modified()
+        _VerifyExtensionHandle(self._extended_message, extension_handle)
 
-  def __delitem__(self, extension_handle):
-    self._extended_message.ClearExtension(extension_handle)
+        result = self._extended_message._fields.get(extension_handle)
+        if result is not None:
+            return result
 
-  def _FindExtensionByName(self, name):
-    """Tries to find a known extension with the specified name.
+        if extension_handle.is_repeated:
+            result = extension_handle._default_constructor(self._extended_message)
+        elif extension_handle.cpp_type == FieldDescriptor.CPPTYPE_MESSAGE:
+            message_type = extension_handle.message_type
+            if not hasattr(message_type, "_concrete_class"):
+                # pylint: disable=g-import-not-at-top
+                from google.protobuf import message_factory
 
-    Args:
-      name: Extension full name.
+                message_factory.GetMessageClass(message_type)
+            if not hasattr(extension_handle.message_type, "_concrete_class"):
+                from google.protobuf import message_factory
 
-    Returns:
-      Extension field descriptor.
-    """
-    descriptor = self._extended_message.DESCRIPTOR
-    extensions = descriptor.file.pool._extensions_by_name[descriptor]
-    return extensions.get(name, None)
+                message_factory.GetMessageClass(extension_handle.message_type)
+            result = extension_handle.message_type._concrete_class()
+            try:
+                result._SetListener(self._extended_message._listener_for_children)
+            except ReferenceError:
+                pass
+        else:
+            # Singular scalar -- just return the default without inserting into the
+            # dict.
+            return extension_handle.default_value
 
-  def _FindExtensionByNumber(self, number):
-    """Tries to find a known extension with the field number.
+        # Atomically check if another thread has preempted us and, if not, swap
+        # in the new object we just created.  If someone has preempted us, we
+        # take that object and discard ours.
+        # WARNING:  We are relying on setdefault() being atomic.  This is true
+        #   in CPython but we haven't investigated others.  This warning appears
+        #   in several other locations in this file.
+        result = self._extended_message._fields.setdefault(extension_handle, result)
 
-    Args:
-      number: Extension field number.
+        return result
 
-    Returns:
-      Extension field descriptor.
-    """
-    descriptor = self._extended_message.DESCRIPTOR
-    extensions = descriptor.file.pool._extensions_by_number[descriptor]
-    return extensions.get(number, None)
+    def __eq__(self, other):
+        if not isinstance(other, self.__class__):
+            return False
 
-  def __iter__(self):
-    # Return a generator over the populated extension fields
-    return (f[0] for f in self._extended_message.ListFields()
-            if f[0].is_extension)
+        my_fields = self._extended_message.ListFields()
+        other_fields = other._extended_message.ListFields()
 
-  def __contains__(self, extension_handle):
-    _VerifyExtensionHandle(self._extended_message, extension_handle)
+        # Get rid of non-extension fields.
+        my_fields = [field for field in my_fields if field.is_extension]
+        other_fields = [field for field in other_fields if field.is_extension]
 
-    if extension_handle not in self._extended_message._fields:
-      return False
+        return my_fields == other_fields
 
-    if extension_handle.is_repeated:
-      return bool(self._extended_message._fields.get(extension_handle))
+    def __ne__(self, other):
+        return not self == other
 
-    if extension_handle.cpp_type == FieldDescriptor.CPPTYPE_MESSAGE:
-      value = self._extended_message._fields.get(extension_handle)
-      # pylint: disable=protected-access
-      return value is not None and value._is_present_in_parent
+    def __len__(self):
+        fields = self._extended_message.ListFields()
+        # Get rid of non-extension fields.
+        extension_fields = [field for field in fields if field[0].is_extension]
+        return len(extension_fields)
 
-    return True
+    def __hash__(self):
+        raise TypeError("unhashable object")
+
+    # Note that this is only meaningful for non-repeated, scalar extension
+    # fields.  Note also that we may have to call _Modified() when we do
+    # successfully set a field this way, to set any necessary "has" bits in the
+    # ancestors of the extended message.
+    def __setitem__(self, extension_handle, value):
+        """If extension_handle specifies a non-repeated, scalar extension
+        field, sets the value of that field.
+        """
+
+        _VerifyExtensionHandle(self._extended_message, extension_handle)
+
+        if (
+            extension_handle.is_repeated
+            or extension_handle.cpp_type == FieldDescriptor.CPPTYPE_MESSAGE
+        ):
+            raise TypeError(
+                'Cannot assign to extension "%s" because it is a repeated or '
+                "composite type." % extension_handle.full_name
+            )
+
+        # It's slightly wasteful to lookup the type checker each time,
+        # but we expect this to be a vanishingly uncommon case anyway.
+        type_checker = type_checkers.GetTypeChecker(extension_handle)
+        # pylint: disable=protected-access
+        self._extended_message._fields[extension_handle] = type_checker.CheckValue(value)
+        self._extended_message._Modified()
+
+    def __delitem__(self, extension_handle):
+        self._extended_message.ClearExtension(extension_handle)
+
+    def _FindExtensionByName(self, name):
+        """Tries to find a known extension with the specified name.
+
+        Args:
+          name: Extension full name.
+
+        Returns:
+          Extension field descriptor.
+        """
+        descriptor = self._extended_message.DESCRIPTOR
+        extensions = descriptor.file.pool._extensions_by_name[descriptor]
+        return extensions.get(name, None)
+
+    def _FindExtensionByNumber(self, number):
+        """Tries to find a known extension with the field number.
+
+        Args:
+          number: Extension field number.
+
+        Returns:
+          Extension field descriptor.
+        """
+        descriptor = self._extended_message.DESCRIPTOR
+        extensions = descriptor.file.pool._extensions_by_number[descriptor]
+        return extensions.get(number, None)
+
+    def __iter__(self):
+        # Return a generator over the populated extension fields
+        return (f[0] for f in self._extended_message.ListFields() if f[0].is_extension)
+
+    def __contains__(self, extension_handle):
+        _VerifyExtensionHandle(self._extended_message, extension_handle)
+
+        if extension_handle not in self._extended_message._fields:
+            return False
+
+        if extension_handle.is_repeated:
+            return bool(self._extended_message._fields.get(extension_handle))
+
+        if extension_handle.cpp_type == FieldDescriptor.CPPTYPE_MESSAGE:
+            value = self._extended_message._fields.get(extension_handle)
+            # pylint: disable=protected-access
+            return value is not None and value._is_present_in_parent
+
+        return True
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/extension_dict.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/encoder.py	2025-09-21 04:55:30.717790+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/encoder.py	2025-09-21 06:00:27.837695+00:00
@@ -39,11 +39,11 @@
   value is returned, then we can save two instructions by returning the
   result of the last statement.  It looks funny but it helps.
 * We assume that type and bounds checking has happened at a higher level.
 """
 
-__author__ = 'kenton@google.com (Kenton Varda)'
+__author__ = "kenton@google.com (Kenton Varda)"
 
 import struct
 
 from google.protobuf.internal import wire_format
 
@@ -53,43 +53,62 @@
 _POS_INF = 1e10000
 _NEG_INF = -_POS_INF
 
 
 def _VarintSize(value):
-  """Compute the size of a varint value."""
-  if value <= 0x7f: return 1
-  if value <= 0x3fff: return 2
-  if value <= 0x1fffff: return 3
-  if value <= 0xfffffff: return 4
-  if value <= 0x7ffffffff: return 5
-  if value <= 0x3ffffffffff: return 6
-  if value <= 0x1ffffffffffff: return 7
-  if value <= 0xffffffffffffff: return 8
-  if value <= 0x7fffffffffffffff: return 9
-  return 10
+    """Compute the size of a varint value."""
+    if value <= 0x7F:
+        return 1
+    if value <= 0x3FFF:
+        return 2
+    if value <= 0x1FFFFF:
+        return 3
+    if value <= 0xFFFFFFF:
+        return 4
+    if value <= 0x7FFFFFFFF:
+        return 5
+    if value <= 0x3FFFFFFFFFF:
+        return 6
+    if value <= 0x1FFFFFFFFFFFF:
+        return 7
+    if value <= 0xFFFFFFFFFFFFFF:
+        return 8
+    if value <= 0x7FFFFFFFFFFFFFFF:
+        return 9
+    return 10
 
 
 def _SignedVarintSize(value):
-  """Compute the size of a signed varint value."""
-  if value < 0: return 10
-  if value <= 0x7f: return 1
-  if value <= 0x3fff: return 2
-  if value <= 0x1fffff: return 3
-  if value <= 0xfffffff: return 4
-  if value <= 0x7ffffffff: return 5
-  if value <= 0x3ffffffffff: return 6
-  if value <= 0x1ffffffffffff: return 7
-  if value <= 0xffffffffffffff: return 8
-  if value <= 0x7fffffffffffffff: return 9
-  return 10
+    """Compute the size of a signed varint value."""
+    if value < 0:
+        return 10
+    if value <= 0x7F:
+        return 1
+    if value <= 0x3FFF:
+        return 2
+    if value <= 0x1FFFFF:
+        return 3
+    if value <= 0xFFFFFFF:
+        return 4
+    if value <= 0x7FFFFFFFF:
+        return 5
+    if value <= 0x3FFFFFFFFFF:
+        return 6
+    if value <= 0x1FFFFFFFFFFFF:
+        return 7
+    if value <= 0xFFFFFFFFFFFFFF:
+        return 8
+    if value <= 0x7FFFFFFFFFFFFFFF:
+        return 9
+    return 10
 
 
 def _TagSize(field_number):
-  """Returns the number of bytes required to serialize a tag with this field
-  number."""
-  # Just pass in type 0, since the type won't affect the tag+type size.
-  return _VarintSize(wire_format.PackTag(field_number, 0))
+    """Returns the number of bytes required to serialize a tag with this field
+    number."""
+    # Just pass in type 0, since the type won't affect the tag+type size.
+    return _VarintSize(wire_format.PackTag(field_number, 0))
 
 
 # --------------------------------------------------------------------
 # In this section we define some generic sizers.  Each of these functions
 # takes parameters specific to a particular field type, e.g. int32 or fixed64.
@@ -97,91 +116,109 @@
 # particular field, e.g. the field number and whether it is repeated or packed.
 # Look at the next section to see how these are used.
 
 
 def _SimpleSizer(compute_value_size):
-  """A sizer which uses the function compute_value_size to compute the size of
-  each value.  Typically compute_value_size is _VarintSize."""
-
-  def SpecificSizer(field_number, is_repeated, is_packed):
-    tag_size = _TagSize(field_number)
-    if is_packed:
-      local_VarintSize = _VarintSize
-      def PackedFieldSize(value):
-        result = 0
-        for element in value:
-          result += compute_value_size(element)
-        return result + local_VarintSize(result) + tag_size
-      return PackedFieldSize
-    elif is_repeated:
-      def RepeatedFieldSize(value):
-        result = tag_size * len(value)
-        for element in value:
-          result += compute_value_size(element)
-        return result
-      return RepeatedFieldSize
-    else:
-      def FieldSize(value):
-        return tag_size + compute_value_size(value)
-      return FieldSize
-
-  return SpecificSizer
+    """A sizer which uses the function compute_value_size to compute the size of
+    each value.  Typically compute_value_size is _VarintSize."""
+
+    def SpecificSizer(field_number, is_repeated, is_packed):
+        tag_size = _TagSize(field_number)
+        if is_packed:
+            local_VarintSize = _VarintSize
+
+            def PackedFieldSize(value):
+                result = 0
+                for element in value:
+                    result += compute_value_size(element)
+                return result + local_VarintSize(result) + tag_size
+
+            return PackedFieldSize
+        elif is_repeated:
+
+            def RepeatedFieldSize(value):
+                result = tag_size * len(value)
+                for element in value:
+                    result += compute_value_size(element)
+                return result
+
+            return RepeatedFieldSize
+        else:
+
+            def FieldSize(value):
+                return tag_size + compute_value_size(value)
+
+            return FieldSize
+
+    return SpecificSizer
 
 
 def _ModifiedSizer(compute_value_size, modify_value):
-  """Like SimpleSizer, but modify_value is invoked on each value before it is
-  passed to compute_value_size.  modify_value is typically ZigZagEncode."""
-
-  def SpecificSizer(field_number, is_repeated, is_packed):
-    tag_size = _TagSize(field_number)
-    if is_packed:
-      local_VarintSize = _VarintSize
-      def PackedFieldSize(value):
-        result = 0
-        for element in value:
-          result += compute_value_size(modify_value(element))
-        return result + local_VarintSize(result) + tag_size
-      return PackedFieldSize
-    elif is_repeated:
-      def RepeatedFieldSize(value):
-        result = tag_size * len(value)
-        for element in value:
-          result += compute_value_size(modify_value(element))
-        return result
-      return RepeatedFieldSize
-    else:
-      def FieldSize(value):
-        return tag_size + compute_value_size(modify_value(value))
-      return FieldSize
-
-  return SpecificSizer
+    """Like SimpleSizer, but modify_value is invoked on each value before it is
+    passed to compute_value_size.  modify_value is typically ZigZagEncode."""
+
+    def SpecificSizer(field_number, is_repeated, is_packed):
+        tag_size = _TagSize(field_number)
+        if is_packed:
+            local_VarintSize = _VarintSize
+
+            def PackedFieldSize(value):
+                result = 0
+                for element in value:
+                    result += compute_value_size(modify_value(element))
+                return result + local_VarintSize(result) + tag_size
+
+            return PackedFieldSize
+        elif is_repeated:
+
+            def RepeatedFieldSize(value):
+                result = tag_size * len(value)
+                for element in value:
+                    result += compute_value_size(modify_value(element))
+                return result
+
+            return RepeatedFieldSize
+        else:
+
+            def FieldSize(value):
+                return tag_size + compute_value_size(modify_value(value))
+
+            return FieldSize
+
+    return SpecificSizer
 
 
 def _FixedSizer(value_size):
-  """Like _SimpleSizer except for a fixed-size field.  The input is the size
-  of one value."""
-
-  def SpecificSizer(field_number, is_repeated, is_packed):
-    tag_size = _TagSize(field_number)
-    if is_packed:
-      local_VarintSize = _VarintSize
-      def PackedFieldSize(value):
-        result = len(value) * value_size
-        return result + local_VarintSize(result) + tag_size
-      return PackedFieldSize
-    elif is_repeated:
-      element_size = value_size + tag_size
-      def RepeatedFieldSize(value):
-        return len(value) * element_size
-      return RepeatedFieldSize
-    else:
-      field_size = value_size + tag_size
-      def FieldSize(value):
-        return field_size
-      return FieldSize
-
-  return SpecificSizer
+    """Like _SimpleSizer except for a fixed-size field.  The input is the size
+    of one value."""
+
+    def SpecificSizer(field_number, is_repeated, is_packed):
+        tag_size = _TagSize(field_number)
+        if is_packed:
+            local_VarintSize = _VarintSize
+
+            def PackedFieldSize(value):
+                result = len(value) * value_size
+                return result + local_VarintSize(result) + tag_size
+
+            return PackedFieldSize
+        elif is_repeated:
+            element_size = value_size + tag_size
+
+            def RepeatedFieldSize(value):
+                return len(value) * element_size
+
+            return RepeatedFieldSize
+        else:
+            field_size = value_size + tag_size
+
+            def FieldSize(value):
+                return field_size
+
+            return FieldSize
+
+    return SpecificSizer
 
 
 # ====================================================================
 # Here we declare a sizer constructor for each field type.  Each "sizer
 # constructor" is a function that takes (field_number, is_repeated, is_packed)
@@ -191,616 +228,689 @@
 
 Int32Sizer = Int64Sizer = EnumSizer = _SimpleSizer(_SignedVarintSize)
 
 UInt32Sizer = UInt64Sizer = _SimpleSizer(_VarintSize)
 
-SInt32Sizer = SInt64Sizer = _ModifiedSizer(
-    _SignedVarintSize, wire_format.ZigZagEncode)
-
-Fixed32Sizer = SFixed32Sizer = FloatSizer  = _FixedSizer(4)
+SInt32Sizer = SInt64Sizer = _ModifiedSizer(_SignedVarintSize, wire_format.ZigZagEncode)
+
+Fixed32Sizer = SFixed32Sizer = FloatSizer = _FixedSizer(4)
 Fixed64Sizer = SFixed64Sizer = DoubleSizer = _FixedSizer(8)
 
 BoolSizer = _FixedSizer(1)
 
 
 def StringSizer(field_number, is_repeated, is_packed):
-  """Returns a sizer for a string field."""
-
-  tag_size = _TagSize(field_number)
-  local_VarintSize = _VarintSize
-  local_len = len
-  assert not is_packed
-  if is_repeated:
-    def RepeatedFieldSize(value):
-      result = tag_size * len(value)
-      for element in value:
-        l = local_len(element.encode('utf-8'))
-        result += local_VarintSize(l) + l
-      return result
-    return RepeatedFieldSize
-  else:
-    def FieldSize(value):
-      l = local_len(value.encode('utf-8'))
-      return tag_size + local_VarintSize(l) + l
-    return FieldSize
+    """Returns a sizer for a string field."""
+
+    tag_size = _TagSize(field_number)
+    local_VarintSize = _VarintSize
+    local_len = len
+    assert not is_packed
+    if is_repeated:
+
+        def RepeatedFieldSize(value):
+            result = tag_size * len(value)
+            for element in value:
+                l = local_len(element.encode("utf-8"))
+                result += local_VarintSize(l) + l
+            return result
+
+        return RepeatedFieldSize
+    else:
+
+        def FieldSize(value):
+            l = local_len(value.encode("utf-8"))
+            return tag_size + local_VarintSize(l) + l
+
+        return FieldSize
 
 
 def BytesSizer(field_number, is_repeated, is_packed):
-  """Returns a sizer for a bytes field."""
-
-  tag_size = _TagSize(field_number)
-  local_VarintSize = _VarintSize
-  local_len = len
-  assert not is_packed
-  if is_repeated:
-    def RepeatedFieldSize(value):
-      result = tag_size * len(value)
-      for element in value:
-        l = local_len(element)
-        result += local_VarintSize(l) + l
-      return result
-    return RepeatedFieldSize
-  else:
-    def FieldSize(value):
-      l = local_len(value)
-      return tag_size + local_VarintSize(l) + l
-    return FieldSize
+    """Returns a sizer for a bytes field."""
+
+    tag_size = _TagSize(field_number)
+    local_VarintSize = _VarintSize
+    local_len = len
+    assert not is_packed
+    if is_repeated:
+
+        def RepeatedFieldSize(value):
+            result = tag_size * len(value)
+            for element in value:
+                l = local_len(element)
+                result += local_VarintSize(l) + l
+            return result
+
+        return RepeatedFieldSize
+    else:
+
+        def FieldSize(value):
+            l = local_len(value)
+            return tag_size + local_VarintSize(l) + l
+
+        return FieldSize
 
 
 def GroupSizer(field_number, is_repeated, is_packed):
-  """Returns a sizer for a group field."""
-
-  tag_size = _TagSize(field_number) * 2
-  assert not is_packed
-  if is_repeated:
-    def RepeatedFieldSize(value):
-      result = tag_size * len(value)
-      for element in value:
-        result += element.ByteSize()
-      return result
-    return RepeatedFieldSize
-  else:
-    def FieldSize(value):
-      return tag_size + value.ByteSize()
-    return FieldSize
+    """Returns a sizer for a group field."""
+
+    tag_size = _TagSize(field_number) * 2
+    assert not is_packed
+    if is_repeated:
+
+        def RepeatedFieldSize(value):
+            result = tag_size * len(value)
+            for element in value:
+                result += element.ByteSize()
+            return result
+
+        return RepeatedFieldSize
+    else:
+
+        def FieldSize(value):
+            return tag_size + value.ByteSize()
+
+        return FieldSize
 
 
 def MessageSizer(field_number, is_repeated, is_packed):
-  """Returns a sizer for a message field."""
-
-  tag_size = _TagSize(field_number)
-  local_VarintSize = _VarintSize
-  assert not is_packed
-  if is_repeated:
-    def RepeatedFieldSize(value):
-      result = tag_size * len(value)
-      for element in value:
-        l = element.ByteSize()
-        result += local_VarintSize(l) + l
-      return result
-    return RepeatedFieldSize
-  else:
-    def FieldSize(value):
-      l = value.ByteSize()
-      return tag_size + local_VarintSize(l) + l
-    return FieldSize
+    """Returns a sizer for a message field."""
+
+    tag_size = _TagSize(field_number)
+    local_VarintSize = _VarintSize
+    assert not is_packed
+    if is_repeated:
+
+        def RepeatedFieldSize(value):
+            result = tag_size * len(value)
+            for element in value:
+                l = element.ByteSize()
+                result += local_VarintSize(l) + l
+            return result
+
+        return RepeatedFieldSize
+    else:
+
+        def FieldSize(value):
+            l = value.ByteSize()
+            return tag_size + local_VarintSize(l) + l
+
+        return FieldSize
 
 
 # --------------------------------------------------------------------
 # MessageSet is special: it needs custom logic to compute its size properly.
 
 
 def MessageSetItemSizer(field_number):
-  """Returns a sizer for extensions of MessageSet.
-
-  The message set message looks like this:
-    message MessageSet {
-      repeated group Item = 1 {
-        required int32 type_id = 2;
-        required string message = 3;
+    """Returns a sizer for extensions of MessageSet.
+
+    The message set message looks like this:
+      message MessageSet {
+        repeated group Item = 1 {
+          required int32 type_id = 2;
+          required string message = 3;
+        }
       }
-    }
-  """
-  static_size = (_TagSize(1) * 2 + _TagSize(2) + _VarintSize(field_number) +
-                 _TagSize(3))
-  local_VarintSize = _VarintSize
-
-  def FieldSize(value):
-    l = value.ByteSize()
-    return static_size + local_VarintSize(l) + l
-
-  return FieldSize
+    """
+    static_size = _TagSize(1) * 2 + _TagSize(2) + _VarintSize(field_number) + _TagSize(3)
+    local_VarintSize = _VarintSize
+
+    def FieldSize(value):
+        l = value.ByteSize()
+        return static_size + local_VarintSize(l) + l
+
+    return FieldSize
 
 
 # --------------------------------------------------------------------
 # Map is special: it needs custom logic to compute its size properly.
 
 
 def MapSizer(field_descriptor, is_message_map):
-  """Returns a sizer for a map field."""
-
-  # Can't look at field_descriptor.message_type._concrete_class because it may
-  # not have been initialized yet.
-  message_type = field_descriptor.message_type
-  message_sizer = MessageSizer(field_descriptor.number, False, False)
-
-  def FieldSize(map_value):
-    total = 0
-    for key in map_value:
-      value = map_value[key]
-      # It's wasteful to create the messages and throw them away one second
-      # later since we'll do the same for the actual encode.  But there's not an
-      # obvious way to avoid this within the current design without tons of code
-      # duplication. For message map, value.ByteSize() should be called to
-      # update the status.
-      entry_msg = message_type._concrete_class(key=key, value=value)
-      total += message_sizer(entry_msg)
-      if is_message_map:
-        value.ByteSize()
-    return total
-
-  return FieldSize
+    """Returns a sizer for a map field."""
+
+    # Can't look at field_descriptor.message_type._concrete_class because it may
+    # not have been initialized yet.
+    message_type = field_descriptor.message_type
+    message_sizer = MessageSizer(field_descriptor.number, False, False)
+
+    def FieldSize(map_value):
+        total = 0
+        for key in map_value:
+            value = map_value[key]
+            # It's wasteful to create the messages and throw them away one second
+            # later since we'll do the same for the actual encode.  But there's not an
+            # obvious way to avoid this within the current design without tons of code
+            # duplication. For message map, value.ByteSize() should be called to
+            # update the status.
+            entry_msg = message_type._concrete_class(key=key, value=value)
+            total += message_sizer(entry_msg)
+            if is_message_map:
+                value.ByteSize()
+        return total
+
+    return FieldSize
+
 
 # ====================================================================
 # Encoders!
 
 
 def _VarintEncoder():
-  """Return an encoder for a basic varint value (does not include tag)."""
-
-  local_int2byte = struct.Struct('>B').pack
-
-  def EncodeVarint(write, value, unused_deterministic=None):
-    bits = value & 0x7f
-    value >>= 7
-    while value:
-      write(local_int2byte(0x80|bits))
-      bits = value & 0x7f
-      value >>= 7
-    return write(local_int2byte(bits))
-
-  return EncodeVarint
+    """Return an encoder for a basic varint value (does not include tag)."""
+
+    local_int2byte = struct.Struct(">B").pack
+
+    def EncodeVarint(write, value, unused_deterministic=None):
+        bits = value & 0x7F
+        value >>= 7
+        while value:
+            write(local_int2byte(0x80 | bits))
+            bits = value & 0x7F
+            value >>= 7
+        return write(local_int2byte(bits))
+
+    return EncodeVarint
 
 
 def _SignedVarintEncoder():
-  """Return an encoder for a basic signed varint value (does not include
-  tag)."""
-
-  local_int2byte = struct.Struct('>B').pack
-
-  def EncodeSignedVarint(write, value, unused_deterministic=None):
-    if value < 0:
-      value += (1 << 64)
-    bits = value & 0x7f
-    value >>= 7
-    while value:
-      write(local_int2byte(0x80|bits))
-      bits = value & 0x7f
-      value >>= 7
-    return write(local_int2byte(bits))
-
-  return EncodeSignedVarint
+    """Return an encoder for a basic signed varint value (does not include
+    tag)."""
+
+    local_int2byte = struct.Struct(">B").pack
+
+    def EncodeSignedVarint(write, value, unused_deterministic=None):
+        if value < 0:
+            value += 1 << 64
+        bits = value & 0x7F
+        value >>= 7
+        while value:
+            write(local_int2byte(0x80 | bits))
+            bits = value & 0x7F
+            value >>= 7
+        return write(local_int2byte(bits))
+
+    return EncodeSignedVarint
 
 
 _EncodeVarint = _VarintEncoder()
 _EncodeSignedVarint = _SignedVarintEncoder()
 
 
 def _VarintBytes(value):
-  """Encode the given integer as a varint and return the bytes.  This is only
-  called at startup time so it doesn't need to be fast."""
-
-  pieces = []
-  _EncodeVarint(pieces.append, value, True)
-  return b"".join(pieces)
+    """Encode the given integer as a varint and return the bytes.  This is only
+    called at startup time so it doesn't need to be fast."""
+
+    pieces = []
+    _EncodeVarint(pieces.append, value, True)
+    return b"".join(pieces)
 
 
 def TagBytes(field_number, wire_type):
-  """Encode the given tag and return the bytes.  Only called at startup."""
-
-  return bytes(_VarintBytes(wire_format.PackTag(field_number, wire_type)))
+    """Encode the given tag and return the bytes.  Only called at startup."""
+
+    return bytes(_VarintBytes(wire_format.PackTag(field_number, wire_type)))
+
 
 # --------------------------------------------------------------------
 # As with sizers (see above), we have a number of common encoder
 # implementations.
 
 
 def _SimpleEncoder(wire_type, encode_value, compute_value_size):
-  """Return a constructor for an encoder for fields of a particular type.
-
-  Args:
-      wire_type:  The field's wire type, for encoding tags.
-      encode_value:  A function which encodes an individual value, e.g.
-        _EncodeVarint().
-      compute_value_size:  A function which computes the size of an individual
-        value, e.g. _VarintSize().
-  """
-
-  def SpecificEncoder(field_number, is_repeated, is_packed):
-    if is_packed:
-      tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-      local_EncodeVarint = _EncodeVarint
-      def EncodePackedField(write, value, deterministic):
-        write(tag_bytes)
-        size = 0
-        for element in value:
-          size += compute_value_size(element)
-        local_EncodeVarint(write, size, deterministic)
-        for element in value:
-          encode_value(write, element, deterministic)
-      return EncodePackedField
-    elif is_repeated:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeRepeatedField(write, value, deterministic):
-        for element in value:
-          write(tag_bytes)
-          encode_value(write, element, deterministic)
-      return EncodeRepeatedField
+    """Return a constructor for an encoder for fields of a particular type.
+
+    Args:
+        wire_type:  The field's wire type, for encoding tags.
+        encode_value:  A function which encodes an individual value, e.g.
+          _EncodeVarint().
+        compute_value_size:  A function which computes the size of an individual
+          value, e.g. _VarintSize().
+    """
+
+    def SpecificEncoder(field_number, is_repeated, is_packed):
+        if is_packed:
+            tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+            local_EncodeVarint = _EncodeVarint
+
+            def EncodePackedField(write, value, deterministic):
+                write(tag_bytes)
+                size = 0
+                for element in value:
+                    size += compute_value_size(element)
+                local_EncodeVarint(write, size, deterministic)
+                for element in value:
+                    encode_value(write, element, deterministic)
+
+            return EncodePackedField
+        elif is_repeated:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeRepeatedField(write, value, deterministic):
+                for element in value:
+                    write(tag_bytes)
+                    encode_value(write, element, deterministic)
+
+            return EncodeRepeatedField
+        else:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeField(write, value, deterministic):
+                write(tag_bytes)
+                return encode_value(write, value, deterministic)
+
+            return EncodeField
+
+    return SpecificEncoder
+
+
+def _ModifiedEncoder(wire_type, encode_value, compute_value_size, modify_value):
+    """Like SimpleEncoder but additionally invokes modify_value on every value
+    before passing it to encode_value.  Usually modify_value is ZigZagEncode."""
+
+    def SpecificEncoder(field_number, is_repeated, is_packed):
+        if is_packed:
+            tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+            local_EncodeVarint = _EncodeVarint
+
+            def EncodePackedField(write, value, deterministic):
+                write(tag_bytes)
+                size = 0
+                for element in value:
+                    size += compute_value_size(modify_value(element))
+                local_EncodeVarint(write, size, deterministic)
+                for element in value:
+                    encode_value(write, modify_value(element), deterministic)
+
+            return EncodePackedField
+        elif is_repeated:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeRepeatedField(write, value, deterministic):
+                for element in value:
+                    write(tag_bytes)
+                    encode_value(write, modify_value(element), deterministic)
+
+            return EncodeRepeatedField
+        else:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeField(write, value, deterministic):
+                write(tag_bytes)
+                return encode_value(write, modify_value(value), deterministic)
+
+            return EncodeField
+
+    return SpecificEncoder
+
+
+def _StructPackEncoder(wire_type, format):
+    """Return a constructor for an encoder for a fixed-width field.
+
+    Args:
+        wire_type:  The field's wire type, for encoding tags.
+        format:  The format string to pass to struct.pack().
+    """
+
+    value_size = struct.calcsize(format)
+
+    def SpecificEncoder(field_number, is_repeated, is_packed):
+        local_struct_pack = struct.pack
+        if is_packed:
+            tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+            local_EncodeVarint = _EncodeVarint
+
+            def EncodePackedField(write, value, deterministic):
+                write(tag_bytes)
+                local_EncodeVarint(write, len(value) * value_size, deterministic)
+                for element in value:
+                    write(local_struct_pack(format, element))
+
+            return EncodePackedField
+        elif is_repeated:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeRepeatedField(write, value, unused_deterministic=None):
+                for element in value:
+                    write(tag_bytes)
+                    write(local_struct_pack(format, element))
+
+            return EncodeRepeatedField
+        else:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeField(write, value, unused_deterministic=None):
+                write(tag_bytes)
+                return write(local_struct_pack(format, value))
+
+            return EncodeField
+
+    return SpecificEncoder
+
+
+def _FloatingPointEncoder(wire_type, format):
+    """Return a constructor for an encoder for float fields.
+
+    This is like StructPackEncoder, but catches errors that may be due to
+    passing non-finite floating-point values to struct.pack, and makes a
+    second attempt to encode those values.
+
+    Args:
+        wire_type:  The field's wire type, for encoding tags.
+        format:  The format string to pass to struct.pack().
+    """
+
+    value_size = struct.calcsize(format)
+    if value_size == 4:
+
+        def EncodeNonFiniteOrRaise(write, value):
+            # Remember that the serialized form uses little-endian byte order.
+            if value == _POS_INF:
+                write(b"\x00\x00\x80\x7f")
+            elif value == _NEG_INF:
+                write(b"\x00\x00\x80\xff")
+            elif value != value:  # NaN
+                write(b"\x00\x00\xc0\x7f")
+            else:
+                raise
+
+    elif value_size == 8:
+
+        def EncodeNonFiniteOrRaise(write, value):
+            if value == _POS_INF:
+                write(b"\x00\x00\x00\x00\x00\x00\xf0\x7f")
+            elif value == _NEG_INF:
+                write(b"\x00\x00\x00\x00\x00\x00\xf0\xff")
+            elif value != value:  # NaN
+                write(b"\x00\x00\x00\x00\x00\x00\xf8\x7f")
+            else:
+                raise
+
     else:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeField(write, value, deterministic):
-        write(tag_bytes)
-        return encode_value(write, value, deterministic)
-      return EncodeField
-
-  return SpecificEncoder
-
-
-def _ModifiedEncoder(wire_type, encode_value, compute_value_size, modify_value):
-  """Like SimpleEncoder but additionally invokes modify_value on every value
-  before passing it to encode_value.  Usually modify_value is ZigZagEncode."""
-
-  def SpecificEncoder(field_number, is_repeated, is_packed):
-    if is_packed:
-      tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-      local_EncodeVarint = _EncodeVarint
-      def EncodePackedField(write, value, deterministic):
-        write(tag_bytes)
-        size = 0
-        for element in value:
-          size += compute_value_size(modify_value(element))
-        local_EncodeVarint(write, size, deterministic)
-        for element in value:
-          encode_value(write, modify_value(element), deterministic)
-      return EncodePackedField
-    elif is_repeated:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeRepeatedField(write, value, deterministic):
-        for element in value:
-          write(tag_bytes)
-          encode_value(write, modify_value(element), deterministic)
-      return EncodeRepeatedField
-    else:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeField(write, value, deterministic):
-        write(tag_bytes)
-        return encode_value(write, modify_value(value), deterministic)
-      return EncodeField
-
-  return SpecificEncoder
-
-
-def _StructPackEncoder(wire_type, format):
-  """Return a constructor for an encoder for a fixed-width field.
-
-  Args:
-      wire_type:  The field's wire type, for encoding tags.
-      format:  The format string to pass to struct.pack().
-  """
-
-  value_size = struct.calcsize(format)
-
-  def SpecificEncoder(field_number, is_repeated, is_packed):
-    local_struct_pack = struct.pack
-    if is_packed:
-      tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-      local_EncodeVarint = _EncodeVarint
-      def EncodePackedField(write, value, deterministic):
-        write(tag_bytes)
-        local_EncodeVarint(write, len(value) * value_size, deterministic)
-        for element in value:
-          write(local_struct_pack(format, element))
-      return EncodePackedField
-    elif is_repeated:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeRepeatedField(write, value, unused_deterministic=None):
-        for element in value:
-          write(tag_bytes)
-          write(local_struct_pack(format, element))
-      return EncodeRepeatedField
-    else:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeField(write, value, unused_deterministic=None):
-        write(tag_bytes)
-        return write(local_struct_pack(format, value))
-      return EncodeField
-
-  return SpecificEncoder
-
-
-def _FloatingPointEncoder(wire_type, format):
-  """Return a constructor for an encoder for float fields.
-
-  This is like StructPackEncoder, but catches errors that may be due to
-  passing non-finite floating-point values to struct.pack, and makes a
-  second attempt to encode those values.
-
-  Args:
-      wire_type:  The field's wire type, for encoding tags.
-      format:  The format string to pass to struct.pack().
-  """
-
-  value_size = struct.calcsize(format)
-  if value_size == 4:
-    def EncodeNonFiniteOrRaise(write, value):
-      # Remember that the serialized form uses little-endian byte order.
-      if value == _POS_INF:
-        write(b'\x00\x00\x80\x7F')
-      elif value == _NEG_INF:
-        write(b'\x00\x00\x80\xFF')
-      elif value != value:           # NaN
-        write(b'\x00\x00\xC0\x7F')
-      else:
-        raise
-  elif value_size == 8:
-    def EncodeNonFiniteOrRaise(write, value):
-      if value == _POS_INF:
-        write(b'\x00\x00\x00\x00\x00\x00\xF0\x7F')
-      elif value == _NEG_INF:
-        write(b'\x00\x00\x00\x00\x00\x00\xF0\xFF')
-      elif value != value:                         # NaN
-        write(b'\x00\x00\x00\x00\x00\x00\xF8\x7F')
-      else:
-        raise
-  else:
-    raise ValueError('Can\'t encode floating-point values that are '
-                     '%d bytes long (only 4 or 8)' % value_size)
-
-  def SpecificEncoder(field_number, is_repeated, is_packed):
-    local_struct_pack = struct.pack
-    if is_packed:
-      tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-      local_EncodeVarint = _EncodeVarint
-      def EncodePackedField(write, value, deterministic):
-        write(tag_bytes)
-        local_EncodeVarint(write, len(value) * value_size, deterministic)
-        for element in value:
-          # This try/except block is going to be faster than any code that
-          # we could write to check whether element is finite.
-          try:
-            write(local_struct_pack(format, element))
-          except SystemError:
-            EncodeNonFiniteOrRaise(write, element)
-      return EncodePackedField
-    elif is_repeated:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeRepeatedField(write, value, unused_deterministic=None):
-        for element in value:
-          write(tag_bytes)
-          try:
-            write(local_struct_pack(format, element))
-          except SystemError:
-            EncodeNonFiniteOrRaise(write, element)
-      return EncodeRepeatedField
-    else:
-      tag_bytes = TagBytes(field_number, wire_type)
-      def EncodeField(write, value, unused_deterministic=None):
-        write(tag_bytes)
-        try:
-          write(local_struct_pack(format, value))
-        except SystemError:
-          EncodeNonFiniteOrRaise(write, value)
-      return EncodeField
-
-  return SpecificEncoder
+        raise ValueError(
+            "Can't encode floating-point values that are "
+            "%d bytes long (only 4 or 8)" % value_size
+        )
+
+    def SpecificEncoder(field_number, is_repeated, is_packed):
+        local_struct_pack = struct.pack
+        if is_packed:
+            tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+            local_EncodeVarint = _EncodeVarint
+
+            def EncodePackedField(write, value, deterministic):
+                write(tag_bytes)
+                local_EncodeVarint(write, len(value) * value_size, deterministic)
+                for element in value:
+                    # This try/except block is going to be faster than any code that
+                    # we could write to check whether element is finite.
+                    try:
+                        write(local_struct_pack(format, element))
+                    except SystemError:
+                        EncodeNonFiniteOrRaise(write, element)
+
+            return EncodePackedField
+        elif is_repeated:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeRepeatedField(write, value, unused_deterministic=None):
+                for element in value:
+                    write(tag_bytes)
+                    try:
+                        write(local_struct_pack(format, element))
+                    except SystemError:
+                        EncodeNonFiniteOrRaise(write, element)
+
+            return EncodeRepeatedField
+        else:
+            tag_bytes = TagBytes(field_number, wire_type)
+
+            def EncodeField(write, value, unused_deterministic=None):
+                write(tag_bytes)
+                try:
+                    write(local_struct_pack(format, value))
+                except SystemError:
+                    EncodeNonFiniteOrRaise(write, value)
+
+            return EncodeField
+
+    return SpecificEncoder
 
 
 # ====================================================================
 # Here we declare an encoder constructor for each field type.  These work
 # very similarly to sizer constructors, described earlier.
 
 
 Int32Encoder = Int64Encoder = EnumEncoder = _SimpleEncoder(
-    wire_format.WIRETYPE_VARINT, _EncodeSignedVarint, _SignedVarintSize)
+    wire_format.WIRETYPE_VARINT, _EncodeSignedVarint, _SignedVarintSize
+)
 
 UInt32Encoder = UInt64Encoder = _SimpleEncoder(
-    wire_format.WIRETYPE_VARINT, _EncodeVarint, _VarintSize)
+    wire_format.WIRETYPE_VARINT, _EncodeVarint, _VarintSize
+)
 
 SInt32Encoder = SInt64Encoder = _ModifiedEncoder(
-    wire_format.WIRETYPE_VARINT, _EncodeVarint, _VarintSize,
-    wire_format.ZigZagEncode)
+    wire_format.WIRETYPE_VARINT, _EncodeVarint, _VarintSize, wire_format.ZigZagEncode
+)
 
 # Note that Python conveniently guarantees that when using the '<' prefix on
 # formats, they will also have the same size across all platforms (as opposed
 # to without the prefix, where their sizes depend on the C compiler's basic
 # type sizes).
-Fixed32Encoder  = _StructPackEncoder(wire_format.WIRETYPE_FIXED32, '<I')
-Fixed64Encoder  = _StructPackEncoder(wire_format.WIRETYPE_FIXED64, '<Q')
-SFixed32Encoder = _StructPackEncoder(wire_format.WIRETYPE_FIXED32, '<i')
-SFixed64Encoder = _StructPackEncoder(wire_format.WIRETYPE_FIXED64, '<q')
-FloatEncoder    = _FloatingPointEncoder(wire_format.WIRETYPE_FIXED32, '<f')
-DoubleEncoder   = _FloatingPointEncoder(wire_format.WIRETYPE_FIXED64, '<d')
+Fixed32Encoder = _StructPackEncoder(wire_format.WIRETYPE_FIXED32, "<I")
+Fixed64Encoder = _StructPackEncoder(wire_format.WIRETYPE_FIXED64, "<Q")
+SFixed32Encoder = _StructPackEncoder(wire_format.WIRETYPE_FIXED32, "<i")
+SFixed64Encoder = _StructPackEncoder(wire_format.WIRETYPE_FIXED64, "<q")
+FloatEncoder = _FloatingPointEncoder(wire_format.WIRETYPE_FIXED32, "<f")
+DoubleEncoder = _FloatingPointEncoder(wire_format.WIRETYPE_FIXED64, "<d")
 
 
 def BoolEncoder(field_number, is_repeated, is_packed):
-  """Returns an encoder for a boolean field."""
-
-  false_byte = b'\x00'
-  true_byte = b'\x01'
-  if is_packed:
-    tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+    """Returns an encoder for a boolean field."""
+
+    false_byte = b"\x00"
+    true_byte = b"\x01"
+    if is_packed:
+        tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+        local_EncodeVarint = _EncodeVarint
+
+        def EncodePackedField(write, value, deterministic):
+            write(tag_bytes)
+            local_EncodeVarint(write, len(value), deterministic)
+            for element in value:
+                if element:
+                    write(true_byte)
+                else:
+                    write(false_byte)
+
+        return EncodePackedField
+    elif is_repeated:
+        tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_VARINT)
+
+        def EncodeRepeatedField(write, value, unused_deterministic=None):
+            for element in value:
+                write(tag_bytes)
+                if element:
+                    write(true_byte)
+                else:
+                    write(false_byte)
+
+        return EncodeRepeatedField
+    else:
+        tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_VARINT)
+
+        def EncodeField(write, value, unused_deterministic=None):
+            write(tag_bytes)
+            if value:
+                return write(true_byte)
+            return write(false_byte)
+
+        return EncodeField
+
+
+def StringEncoder(field_number, is_repeated, is_packed):
+    """Returns an encoder for a string field."""
+
+    tag = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
     local_EncodeVarint = _EncodeVarint
-    def EncodePackedField(write, value, deterministic):
-      write(tag_bytes)
-      local_EncodeVarint(write, len(value), deterministic)
-      for element in value:
-        if element:
-          write(true_byte)
-        else:
-          write(false_byte)
-    return EncodePackedField
-  elif is_repeated:
-    tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_VARINT)
-    def EncodeRepeatedField(write, value, unused_deterministic=None):
-      for element in value:
-        write(tag_bytes)
-        if element:
-          write(true_byte)
-        else:
-          write(false_byte)
-    return EncodeRepeatedField
-  else:
-    tag_bytes = TagBytes(field_number, wire_format.WIRETYPE_VARINT)
-    def EncodeField(write, value, unused_deterministic=None):
-      write(tag_bytes)
-      if value:
-        return write(true_byte)
-      return write(false_byte)
-    return EncodeField
-
-
-def StringEncoder(field_number, is_repeated, is_packed):
-  """Returns an encoder for a string field."""
-
-  tag = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-  local_EncodeVarint = _EncodeVarint
-  local_len = len
-  assert not is_packed
-  if is_repeated:
-    def EncodeRepeatedField(write, value, deterministic):
-      for element in value:
-        encoded = element.encode('utf-8')
-        write(tag)
-        local_EncodeVarint(write, local_len(encoded), deterministic)
-        write(encoded)
-    return EncodeRepeatedField
-  else:
-    def EncodeField(write, value, deterministic):
-      encoded = value.encode('utf-8')
-      write(tag)
-      local_EncodeVarint(write, local_len(encoded), deterministic)
-      return write(encoded)
-    return EncodeField
+    local_len = len
+    assert not is_packed
+    if is_repeated:
+
+        def EncodeRepeatedField(write, value, deterministic):
+            for element in value:
+                encoded = element.encode("utf-8")
+                write(tag)
+                local_EncodeVarint(write, local_len(encoded), deterministic)
+                write(encoded)
+
+        return EncodeRepeatedField
+    else:
+
+        def EncodeField(write, value, deterministic):
+            encoded = value.encode("utf-8")
+            write(tag)
+            local_EncodeVarint(write, local_len(encoded), deterministic)
+            return write(encoded)
+
+        return EncodeField
 
 
 def BytesEncoder(field_number, is_repeated, is_packed):
-  """Returns an encoder for a bytes field."""
-
-  tag = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-  local_EncodeVarint = _EncodeVarint
-  local_len = len
-  assert not is_packed
-  if is_repeated:
-    def EncodeRepeatedField(write, value, deterministic):
-      for element in value:
-        write(tag)
-        local_EncodeVarint(write, local_len(element), deterministic)
-        write(element)
-    return EncodeRepeatedField
-  else:
-    def EncodeField(write, value, deterministic):
-      write(tag)
-      local_EncodeVarint(write, local_len(value), deterministic)
-      return write(value)
-    return EncodeField
+    """Returns an encoder for a bytes field."""
+
+    tag = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+    local_EncodeVarint = _EncodeVarint
+    local_len = len
+    assert not is_packed
+    if is_repeated:
+
+        def EncodeRepeatedField(write, value, deterministic):
+            for element in value:
+                write(tag)
+                local_EncodeVarint(write, local_len(element), deterministic)
+                write(element)
+
+        return EncodeRepeatedField
+    else:
+
+        def EncodeField(write, value, deterministic):
+            write(tag)
+            local_EncodeVarint(write, local_len(value), deterministic)
+            return write(value)
+
+        return EncodeField
 
 
 def GroupEncoder(field_number, is_repeated, is_packed):
-  """Returns an encoder for a group field."""
-
-  start_tag = TagBytes(field_number, wire_format.WIRETYPE_START_GROUP)
-  end_tag = TagBytes(field_number, wire_format.WIRETYPE_END_GROUP)
-  assert not is_packed
-  if is_repeated:
-    def EncodeRepeatedField(write, value, deterministic):
-      for element in value:
-        write(start_tag)
-        element._InternalSerialize(write, deterministic)
-        write(end_tag)
-    return EncodeRepeatedField
-  else:
-    def EncodeField(write, value, deterministic):
-      write(start_tag)
-      value._InternalSerialize(write, deterministic)
-      return write(end_tag)
-    return EncodeField
+    """Returns an encoder for a group field."""
+
+    start_tag = TagBytes(field_number, wire_format.WIRETYPE_START_GROUP)
+    end_tag = TagBytes(field_number, wire_format.WIRETYPE_END_GROUP)
+    assert not is_packed
+    if is_repeated:
+
+        def EncodeRepeatedField(write, value, deterministic):
+            for element in value:
+                write(start_tag)
+                element._InternalSerialize(write, deterministic)
+                write(end_tag)
+
+        return EncodeRepeatedField
+    else:
+
+        def EncodeField(write, value, deterministic):
+            write(start_tag)
+            value._InternalSerialize(write, deterministic)
+            return write(end_tag)
+
+        return EncodeField
 
 
 def MessageEncoder(field_number, is_repeated, is_packed):
-  """Returns an encoder for a message field."""
-
-  tag = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
-  local_EncodeVarint = _EncodeVarint
-  assert not is_packed
-  if is_repeated:
-    def EncodeRepeatedField(write, value, deterministic):
-      for element in value:
-        write(tag)
-        local_EncodeVarint(write, element.ByteSize(), deterministic)
-        element._InternalSerialize(write, deterministic)
-    return EncodeRepeatedField
-  else:
-    def EncodeField(write, value, deterministic):
-      write(tag)
-      local_EncodeVarint(write, value.ByteSize(), deterministic)
-      return value._InternalSerialize(write, deterministic)
-    return EncodeField
+    """Returns an encoder for a message field."""
+
+    tag = TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+    local_EncodeVarint = _EncodeVarint
+    assert not is_packed
+    if is_repeated:
+
+        def EncodeRepeatedField(write, value, deterministic):
+            for element in value:
+                write(tag)
+                local_EncodeVarint(write, element.ByteSize(), deterministic)
+                element._InternalSerialize(write, deterministic)
+
+        return EncodeRepeatedField
+    else:
+
+        def EncodeField(write, value, deterministic):
+            write(tag)
+            local_EncodeVarint(write, value.ByteSize(), deterministic)
+            return value._InternalSerialize(write, deterministic)
+
+        return EncodeField
 
 
 # --------------------------------------------------------------------
 # As before, MessageSet is special.
 
 
 def MessageSetItemEncoder(field_number):
-  """Encoder for extensions of MessageSet.
-
-  The message set message looks like this:
-    message MessageSet {
-      repeated group Item = 1 {
-        required int32 type_id = 2;
-        required string message = 3;
+    """Encoder for extensions of MessageSet.
+
+    The message set message looks like this:
+      message MessageSet {
+        repeated group Item = 1 {
+          required int32 type_id = 2;
+          required string message = 3;
+        }
       }
-    }
-  """
-  start_bytes = b"".join([
-      TagBytes(1, wire_format.WIRETYPE_START_GROUP),
-      TagBytes(2, wire_format.WIRETYPE_VARINT),
-      _VarintBytes(field_number),
-      TagBytes(3, wire_format.WIRETYPE_LENGTH_DELIMITED)])
-  end_bytes = TagBytes(1, wire_format.WIRETYPE_END_GROUP)
-  local_EncodeVarint = _EncodeVarint
-
-  def EncodeField(write, value, deterministic):
-    write(start_bytes)
-    local_EncodeVarint(write, value.ByteSize(), deterministic)
-    value._InternalSerialize(write, deterministic)
-    return write(end_bytes)
-
-  return EncodeField
+    """
+    start_bytes = b"".join(
+        [
+            TagBytes(1, wire_format.WIRETYPE_START_GROUP),
+            TagBytes(2, wire_format.WIRETYPE_VARINT),
+            _VarintBytes(field_number),
+            TagBytes(3, wire_format.WIRETYPE_LENGTH_DELIMITED),
+        ]
+    )
+    end_bytes = TagBytes(1, wire_format.WIRETYPE_END_GROUP)
+    local_EncodeVarint = _EncodeVarint
+
+    def EncodeField(write, value, deterministic):
+        write(start_bytes)
+        local_EncodeVarint(write, value.ByteSize(), deterministic)
+        value._InternalSerialize(write, deterministic)
+        return write(end_bytes)
+
+    return EncodeField
 
 
 # --------------------------------------------------------------------
 # As before, Map is special.
 
 
 def MapEncoder(field_descriptor):
-  """Encoder for extensions of MessageSet.
-
-  Maps always have a wire format like this:
-    message MapEntry {
-      key_type key = 1;
-      value_type value = 2;
-    }
-    repeated MapEntry map = N;
-  """
-  # Can't look at field_descriptor.message_type._concrete_class because it may
-  # not have been initialized yet.
-  message_type = field_descriptor.message_type
-  encode_message = MessageEncoder(field_descriptor.number, False, False)
-
-  def EncodeField(write, value, deterministic):
-    value_keys = sorted(value.keys()) if deterministic else value
-    for key in value_keys:
-      entry_msg = message_type._concrete_class(key=key, value=value[key])
-      encode_message(write, entry_msg, deterministic)
-
-  return EncodeField
+    """Encoder for extensions of MessageSet.
+
+    Maps always have a wire format like this:
+      message MapEntry {
+        key_type key = 1;
+        value_type value = 2;
+      }
+      repeated MapEntry map = N;
+    """
+    # Can't look at field_descriptor.message_type._concrete_class because it may
+    # not have been initialized yet.
+    message_type = field_descriptor.message_type
+    encode_message = MessageEncoder(field_descriptor.number, False, False)
+
+    def EncodeField(write, value, deterministic):
+        value_keys = sorted(value.keys()) if deterministic else value
+        for key in value_keys:
+            entry_msg = message_type._concrete_class(key=key, value=value[key])
+            encode_message(write, entry_msg, deterministic)
+
+    return EncodeField
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/encoder.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/decoder.py	2025-09-21 04:55:30.717614+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/decoder.py	2025-09-21 06:00:27.925482+00:00
@@ -53,11 +53,11 @@
 Then, for every field of every message class we construct an actual decoder.
 That decoder goes into a dict indexed by tag, so when we decode a message
 we repeatedly read a tag, look up the corresponding decoder, and invoke it.
 """
 
-__author__ = 'kenton@google.com (Kenton Varda)'
+__author__ = "kenton@google.com (Kenton Varda)"
 
 import math
 import numbers
 import struct
 
@@ -71,91 +71,93 @@
 # variables named "message".
 _DecodeError = message.DecodeError
 
 
 def IsDefaultScalarValue(value):
-  """Returns whether or not a scalar value is the default value of its type.
-
-  Specifically, this should be used to determine presence of implicit-presence
-  fields, where we disallow custom defaults.
-
-  Args:
-    value: A scalar value to check.
-
-  Returns:
-    True if the value is equivalent to a default value, False otherwise.
-  """
-  if isinstance(value, numbers.Number) and math.copysign(1.0, value) < 0:
-    # Special case for negative zero, where "truthiness" fails to give the right
-    # answer.
-    return False
-
-  # Normally, we can just use Python's boolean conversion.
-  return not value
+    """Returns whether or not a scalar value is the default value of its type.
+
+    Specifically, this should be used to determine presence of implicit-presence
+    fields, where we disallow custom defaults.
+
+    Args:
+      value: A scalar value to check.
+
+    Returns:
+      True if the value is equivalent to a default value, False otherwise.
+    """
+    if isinstance(value, numbers.Number) and math.copysign(1.0, value) < 0:
+        # Special case for negative zero, where "truthiness" fails to give the right
+        # answer.
+        return False
+
+    # Normally, we can just use Python's boolean conversion.
+    return not value
 
 
 def _VarintDecoder(mask, result_type):
-  """Return an encoder for a basic varint value (does not include tag).
-
-  Decoded values will be bitwise-anded with the given mask before being
-  returned, e.g. to limit them to 32 bits.  The returned decoder does not
-  take the usual "end" parameter -- the caller is expected to do bounds checking
-  after the fact (often the caller can defer such checking until later).  The
-  decoder returns a (value, new_pos) pair.
-  """
-
-  def DecodeVarint(buffer, pos: int=None):
-    result = 0
-    shift = 0
-    while 1:
-      if pos is None:
-        # Read from BytesIO
-        try:
-          b = buffer.read(1)[0]
-        except IndexError as e:
-          if shift == 0:
-            # End of BytesIO.
-            return None
-          else:
-            raise ValueError('Fail to read varint %s' % str(e))
-      else:
-        b = buffer[pos]
-        pos += 1
-      result |= ((b & 0x7f) << shift)
-      if not (b & 0x80):
-        result &= mask
-        result = result_type(result)
-        return result if pos is None else (result, pos)
-      shift += 7
-      if shift >= 64:
-        raise _DecodeError('Too many bytes when decoding varint.')
-
-  return DecodeVarint
+    """Return an encoder for a basic varint value (does not include tag).
+
+    Decoded values will be bitwise-anded with the given mask before being
+    returned, e.g. to limit them to 32 bits.  The returned decoder does not
+    take the usual "end" parameter -- the caller is expected to do bounds checking
+    after the fact (often the caller can defer such checking until later).  The
+    decoder returns a (value, new_pos) pair.
+    """
+
+    def DecodeVarint(buffer, pos: int = None):
+        result = 0
+        shift = 0
+        while 1:
+            if pos is None:
+                # Read from BytesIO
+                try:
+                    b = buffer.read(1)[0]
+                except IndexError as e:
+                    if shift == 0:
+                        # End of BytesIO.
+                        return None
+                    else:
+                        raise ValueError("Fail to read varint %s" % str(e))
+            else:
+                b = buffer[pos]
+                pos += 1
+            result |= (b & 0x7F) << shift
+            if not (b & 0x80):
+                result &= mask
+                result = result_type(result)
+                return result if pos is None else (result, pos)
+            shift += 7
+            if shift >= 64:
+                raise _DecodeError("Too many bytes when decoding varint.")
+
+    return DecodeVarint
 
 
 def _SignedVarintDecoder(bits, result_type):
-  """Like _VarintDecoder() but decodes signed values."""
-
-  signbit = 1 << (bits - 1)
-  mask = (1 << bits) - 1
-
-  def DecodeVarint(buffer, pos):
-    result = 0
-    shift = 0
-    while 1:
-      b = buffer[pos]
-      result |= ((b & 0x7f) << shift)
-      pos += 1
-      if not (b & 0x80):
-        result &= mask
-        result = (result ^ signbit) - signbit
-        result = result_type(result)
-        return (result, pos)
-      shift += 7
-      if shift >= 64:
-        raise _DecodeError('Too many bytes when decoding varint.')
-  return DecodeVarint
+    """Like _VarintDecoder() but decodes signed values."""
+
+    signbit = 1 << (bits - 1)
+    mask = (1 << bits) - 1
+
+    def DecodeVarint(buffer, pos):
+        result = 0
+        shift = 0
+        while 1:
+            b = buffer[pos]
+            result |= (b & 0x7F) << shift
+            pos += 1
+            if not (b & 0x80):
+                result &= mask
+                result = (result ^ signbit) - signbit
+                result = result_type(result)
+                return (result, pos)
+            shift += 7
+            if shift >= 64:
+                raise _DecodeError("Too many bytes when decoding varint.")
+
+    return DecodeVarint
+
 
 # All 32-bit and 64-bit values are represented as int.
 _DecodeVarint = _VarintDecoder((1 << 64) - 1, int)
 _DecodeSignedVarint = _SignedVarintDecoder(64, int)
 
@@ -163,904 +165,884 @@
 _DecodeVarint32 = _VarintDecoder((1 << 32) - 1, int)
 _DecodeSignedVarint32 = _SignedVarintDecoder(32, int)
 
 
 def ReadTag(buffer, pos):
-  """Read a tag from the memoryview, and return a (tag_bytes, new_pos) tuple.
-
-  We return the raw bytes of the tag rather than decoding them.  The raw
-  bytes can then be used to look up the proper decoder.  This effectively allows
-  us to trade some work that would be done in pure-python (decoding a varint)
-  for work that is done in C (searching for a byte string in a hash table).
-  In a low-level language it would be much cheaper to decode the varint and
-  use that, but not in Python.
-
-  Args:
-    buffer: memoryview object of the encoded bytes
-    pos: int of the current position to start from
-
-  Returns:
-    Tuple[bytes, int] of the tag data and new position.
-  """
-  start = pos
-  while buffer[pos] & 0x80:
+    """Read a tag from the memoryview, and return a (tag_bytes, new_pos) tuple.
+
+    We return the raw bytes of the tag rather than decoding them.  The raw
+    bytes can then be used to look up the proper decoder.  This effectively allows
+    us to trade some work that would be done in pure-python (decoding a varint)
+    for work that is done in C (searching for a byte string in a hash table).
+    In a low-level language it would be much cheaper to decode the varint and
+    use that, but not in Python.
+
+    Args:
+      buffer: memoryview object of the encoded bytes
+      pos: int of the current position to start from
+
+    Returns:
+      Tuple[bytes, int] of the tag data and new position.
+    """
+    start = pos
+    while buffer[pos] & 0x80:
+        pos += 1
     pos += 1
-  pos += 1
-
-  tag_bytes = buffer[start:pos].tobytes()
-  return tag_bytes, pos
+
+    tag_bytes = buffer[start:pos].tobytes()
+    return tag_bytes, pos
 
 
 def DecodeTag(tag_bytes):
-  """Decode a tag from the bytes.
-
-  Args:
-    tag_bytes: the bytes of the tag
-
-  Returns:
-    Tuple[int, int] of the tag field number and wire type.
-  """
-  (tag, _) = _DecodeVarint(tag_bytes, 0)
-  return wire_format.UnpackTag(tag)
+    """Decode a tag from the bytes.
+
+    Args:
+      tag_bytes: the bytes of the tag
+
+    Returns:
+      Tuple[int, int] of the tag field number and wire type.
+    """
+    (tag, _) = _DecodeVarint(tag_bytes, 0)
+    return wire_format.UnpackTag(tag)
 
 
 # --------------------------------------------------------------------
 
 
 def _SimpleDecoder(wire_type, decode_value):
-  """Return a constructor for a decoder for fields of a particular type.
-
-  Args:
-      wire_type:  The field's wire type.
-      decode_value:  A function which decodes an individual value, e.g.
-        _DecodeVarint()
-  """
-
-  def SpecificDecoder(field_number, is_repeated, is_packed, key, new_default,
-                      clear_if_default=False):
-    if is_packed:
-      local_DecodeVarint = _DecodeVarint
-      def DecodePackedField(
-          buffer, pos, end, message, field_dict, current_depth=0
-      ):
-        del current_depth  # unused
-        value = field_dict.get(key)
-        if value is None:
-          value = field_dict.setdefault(key, new_default(message))
-        (endpoint, pos) = local_DecodeVarint(buffer, pos)
-        endpoint += pos
-        if endpoint > end:
-          raise _DecodeError('Truncated message.')
-        while pos < endpoint:
-          (element, pos) = decode_value(buffer, pos)
-          value.append(element)
-        if pos > endpoint:
-          del value[-1]   # Discard corrupt value.
-          raise _DecodeError('Packed element was truncated.')
-        return pos
-
-      return DecodePackedField
-    elif is_repeated:
-      tag_bytes = encoder.TagBytes(field_number, wire_type)
-      tag_len = len(tag_bytes)
-      def DecodeRepeatedField(
-          buffer, pos, end, message, field_dict, current_depth=0
-      ):
-        del current_depth  # unused
-        value = field_dict.get(key)
-        if value is None:
-          value = field_dict.setdefault(key, new_default(message))
-        while 1:
-          (element, new_pos) = decode_value(buffer, pos)
-          value.append(element)
-          # Predict that the next tag is another copy of the same repeated
-          # field.
-          pos = new_pos + tag_len
-          if buffer[new_pos:pos] != tag_bytes or new_pos >= end:
-            # Prediction failed.  Return.
-            if new_pos > end:
-              raise _DecodeError('Truncated message.')
-            return new_pos
-
-      return DecodeRepeatedField
-    else:
-
-      def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
-        del current_depth  # unused
-        (new_value, pos) = decode_value(buffer, pos)
-        if pos > end:
-          raise _DecodeError('Truncated message.')
-        if clear_if_default and IsDefaultScalarValue(new_value):
-          field_dict.pop(key, None)
+    """Return a constructor for a decoder for fields of a particular type.
+
+    Args:
+        wire_type:  The field's wire type.
+        decode_value:  A function which decodes an individual value, e.g.
+          _DecodeVarint()
+    """
+
+    def SpecificDecoder(
+        field_number, is_repeated, is_packed, key, new_default, clear_if_default=False
+    ):
+        if is_packed:
+            local_DecodeVarint = _DecodeVarint
+
+            def DecodePackedField(buffer, pos, end, message, field_dict, current_depth=0):
+                del current_depth  # unused
+                value = field_dict.get(key)
+                if value is None:
+                    value = field_dict.setdefault(key, new_default(message))
+                (endpoint, pos) = local_DecodeVarint(buffer, pos)
+                endpoint += pos
+                if endpoint > end:
+                    raise _DecodeError("Truncated message.")
+                while pos < endpoint:
+                    (element, pos) = decode_value(buffer, pos)
+                    value.append(element)
+                if pos > endpoint:
+                    del value[-1]  # Discard corrupt value.
+                    raise _DecodeError("Packed element was truncated.")
+                return pos
+
+            return DecodePackedField
+        elif is_repeated:
+            tag_bytes = encoder.TagBytes(field_number, wire_type)
+            tag_len = len(tag_bytes)
+
+            def DecodeRepeatedField(buffer, pos, end, message, field_dict, current_depth=0):
+                del current_depth  # unused
+                value = field_dict.get(key)
+                if value is None:
+                    value = field_dict.setdefault(key, new_default(message))
+                while 1:
+                    (element, new_pos) = decode_value(buffer, pos)
+                    value.append(element)
+                    # Predict that the next tag is another copy of the same repeated
+                    # field.
+                    pos = new_pos + tag_len
+                    if buffer[new_pos:pos] != tag_bytes or new_pos >= end:
+                        # Prediction failed.  Return.
+                        if new_pos > end:
+                            raise _DecodeError("Truncated message.")
+                        return new_pos
+
+            return DecodeRepeatedField
         else:
-          field_dict[key] = new_value
-        return pos
-
-      return DecodeField
-
-  return SpecificDecoder
+
+            def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
+                del current_depth  # unused
+                (new_value, pos) = decode_value(buffer, pos)
+                if pos > end:
+                    raise _DecodeError("Truncated message.")
+                if clear_if_default and IsDefaultScalarValue(new_value):
+                    field_dict.pop(key, None)
+                else:
+                    field_dict[key] = new_value
+                return pos
+
+            return DecodeField
+
+    return SpecificDecoder
 
 
 def _ModifiedDecoder(wire_type, decode_value, modify_value):
-  """Like SimpleDecoder but additionally invokes modify_value on every value
-  before storing it.  Usually modify_value is ZigZagDecode.
-  """
-
-  # Reusing _SimpleDecoder is slightly slower than copying a bunch of code, but
-  # not enough to make a significant difference.
-
-  def InnerDecode(buffer, pos):
-    (result, new_pos) = decode_value(buffer, pos)
-    return (modify_value(result), new_pos)
-  return _SimpleDecoder(wire_type, InnerDecode)
+    """Like SimpleDecoder but additionally invokes modify_value on every value
+    before storing it.  Usually modify_value is ZigZagDecode.
+    """
+
+    # Reusing _SimpleDecoder is slightly slower than copying a bunch of code, but
+    # not enough to make a significant difference.
+
+    def InnerDecode(buffer, pos):
+        (result, new_pos) = decode_value(buffer, pos)
+        return (modify_value(result), new_pos)
+
+    return _SimpleDecoder(wire_type, InnerDecode)
 
 
 def _StructPackDecoder(wire_type, format):
-  """Return a constructor for a decoder for a fixed-width field.
-
-  Args:
-      wire_type:  The field's wire type.
-      format:  The format string to pass to struct.unpack().
-  """
-
-  value_size = struct.calcsize(format)
-  local_unpack = struct.unpack
-
-  # Reusing _SimpleDecoder is slightly slower than copying a bunch of code, but
-  # not enough to make a significant difference.
-
-  # Note that we expect someone up-stack to catch struct.error and convert
-  # it to _DecodeError -- this way we don't have to set up exception-
-  # handling blocks every time we parse one value.
-
-  def InnerDecode(buffer, pos):
-    new_pos = pos + value_size
-    result = local_unpack(format, buffer[pos:new_pos])[0]
-    return (result, new_pos)
-  return _SimpleDecoder(wire_type, InnerDecode)
-
-
-def _FloatDecoder():
-  """Returns a decoder for a float field.
-
-  This code works around a bug in struct.unpack for non-finite 32-bit
-  floating-point values.
-  """
-
-  local_unpack = struct.unpack
-
-  def InnerDecode(buffer, pos):
-    """Decode serialized float to a float and new position.
+    """Return a constructor for a decoder for a fixed-width field.
 
     Args:
-      buffer: memoryview of the serialized bytes
-      pos: int, position in the memory view to start at.
-
-    Returns:
-      Tuple[float, int] of the deserialized float value and new position
-      in the serialized data.
+        wire_type:  The field's wire type.
+        format:  The format string to pass to struct.unpack().
     """
-    # We expect a 32-bit value in little-endian byte order.  Bit 1 is the sign
-    # bit, bits 2-9 represent the exponent, and bits 10-32 are the significand.
-    new_pos = pos + 4
-    float_bytes = buffer[pos:new_pos].tobytes()
-
-    # If this value has all its exponent bits set, then it's non-finite.
-    # In Python 2.4, struct.unpack will convert it to a finite 64-bit value.
-    # To avoid that, we parse it specially.
-    if (float_bytes[3:4] in b'\x7F\xFF' and float_bytes[2:3] >= b'\x80'):
-      # If at least one significand bit is set...
-      if float_bytes[0:3] != b'\x00\x00\x80':
-        return (math.nan, new_pos)
-      # If sign bit is set...
-      if float_bytes[3:4] == b'\xFF':
-        return (-math.inf, new_pos)
-      return (math.inf, new_pos)
+
+    value_size = struct.calcsize(format)
+    local_unpack = struct.unpack
+
+    # Reusing _SimpleDecoder is slightly slower than copying a bunch of code, but
+    # not enough to make a significant difference.
 
     # Note that we expect someone up-stack to catch struct.error and convert
     # it to _DecodeError -- this way we don't have to set up exception-
     # handling blocks every time we parse one value.
-    result = local_unpack('<f', float_bytes)[0]
-    return (result, new_pos)
-  return _SimpleDecoder(wire_format.WIRETYPE_FIXED32, InnerDecode)
+
+    def InnerDecode(buffer, pos):
+        new_pos = pos + value_size
+        result = local_unpack(format, buffer[pos:new_pos])[0]
+        return (result, new_pos)
+
+    return _SimpleDecoder(wire_type, InnerDecode)
+
+
+def _FloatDecoder():
+    """Returns a decoder for a float field.
+
+    This code works around a bug in struct.unpack for non-finite 32-bit
+    floating-point values.
+    """
+
+    local_unpack = struct.unpack
+
+    def InnerDecode(buffer, pos):
+        """Decode serialized float to a float and new position.
+
+        Args:
+          buffer: memoryview of the serialized bytes
+          pos: int, position in the memory view to start at.
+
+        Returns:
+          Tuple[float, int] of the deserialized float value and new position
+          in the serialized data.
+        """
+        # We expect a 32-bit value in little-endian byte order.  Bit 1 is the sign
+        # bit, bits 2-9 represent the exponent, and bits 10-32 are the significand.
+        new_pos = pos + 4
+        float_bytes = buffer[pos:new_pos].tobytes()
+
+        # If this value has all its exponent bits set, then it's non-finite.
+        # In Python 2.4, struct.unpack will convert it to a finite 64-bit value.
+        # To avoid that, we parse it specially.
+        if float_bytes[3:4] in b"\x7f\xff" and float_bytes[2:3] >= b"\x80":
+            # If at least one significand bit is set...
+            if float_bytes[0:3] != b"\x00\x00\x80":
+                return (math.nan, new_pos)
+            # If sign bit is set...
+            if float_bytes[3:4] == b"\xff":
+                return (-math.inf, new_pos)
+            return (math.inf, new_pos)
+
+        # Note that we expect someone up-stack to catch struct.error and convert
+        # it to _DecodeError -- this way we don't have to set up exception-
+        # handling blocks every time we parse one value.
+        result = local_unpack("<f", float_bytes)[0]
+        return (result, new_pos)
+
+    return _SimpleDecoder(wire_format.WIRETYPE_FIXED32, InnerDecode)
 
 
 def _DoubleDecoder():
-  """Returns a decoder for a double field.
-
-  This code works around a bug in struct.unpack for not-a-number.
-  """
-
-  local_unpack = struct.unpack
-
-  def InnerDecode(buffer, pos):
-    """Decode serialized double to a double and new position.
-
-    Args:
-      buffer: memoryview of the serialized bytes.
-      pos: int, position in the memory view to start at.
-
-    Returns:
-      Tuple[float, int] of the decoded double value and new position
-      in the serialized data.
+    """Returns a decoder for a double field.
+
+    This code works around a bug in struct.unpack for not-a-number.
     """
-    # We expect a 64-bit value in little-endian byte order.  Bit 1 is the sign
-    # bit, bits 2-12 represent the exponent, and bits 13-64 are the significand.
-    new_pos = pos + 8
-    double_bytes = buffer[pos:new_pos].tobytes()
-
-    # If this value has all its exponent bits set and at least one significand
-    # bit set, it's not a number.  In Python 2.4, struct.unpack will treat it
-    # as inf or -inf.  To avoid that, we treat it specially.
-    if ((double_bytes[7:8] in b'\x7F\xFF')
-        and (double_bytes[6:7] >= b'\xF0')
-        and (double_bytes[0:7] != b'\x00\x00\x00\x00\x00\x00\xF0')):
-      return (math.nan, new_pos)
-
-    # Note that we expect someone up-stack to catch struct.error and convert
-    # it to _DecodeError -- this way we don't have to set up exception-
-    # handling blocks every time we parse one value.
-    result = local_unpack('<d', double_bytes)[0]
-    return (result, new_pos)
-  return _SimpleDecoder(wire_format.WIRETYPE_FIXED64, InnerDecode)
-
-
-def EnumDecoder(field_number, is_repeated, is_packed, key, new_default,
-                clear_if_default=False):
-  """Returns a decoder for enum field."""
-  enum_type = key.enum_type
-  if is_packed:
-    local_DecodeVarint = _DecodeVarint
-    def DecodePackedField(
-        buffer, pos, end, message, field_dict, current_depth=0
-    ):
-      """Decode serialized packed enum to its value and a new position.
-
-      Args:
-        buffer: memoryview of the serialized bytes.
-        pos: int, position in the memory view to start at.
-        end: int, end position of serialized data
-        message: Message object to store unknown fields in
-        field_dict: Map[Descriptor, Any] to store decoded values in.
-
-      Returns:
-        int, new position in serialized data.
-      """
-      del current_depth  # unused
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      (endpoint, pos) = local_DecodeVarint(buffer, pos)
-      endpoint += pos
-      if endpoint > end:
-        raise _DecodeError('Truncated message.')
-      while pos < endpoint:
-        value_start_pos = pos
-        (element, pos) = _DecodeSignedVarint32(buffer, pos)
-        # pylint: disable=protected-access
-        if element in enum_type.values_by_number:
-          value.append(element)
-        else:
-          if not message._unknown_fields:
-            message._unknown_fields = []
-          tag_bytes = encoder.TagBytes(field_number,
-                                       wire_format.WIRETYPE_VARINT)
-
-          message._unknown_fields.append(
-              (tag_bytes, buffer[value_start_pos:pos].tobytes()))
-          # pylint: enable=protected-access
-      if pos > endpoint:
-        if element in enum_type.values_by_number:
-          del value[-1]   # Discard corrupt value.
-        else:
-          del message._unknown_fields[-1]
-          # pylint: enable=protected-access
-        raise _DecodeError('Packed element was truncated.')
-      return pos
-
-    return DecodePackedField
-  elif is_repeated:
-    tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_VARINT)
-    tag_len = len(tag_bytes)
-    def DecodeRepeatedField(
-        buffer, pos, end, message, field_dict, current_depth=0
-    ):
-      """Decode serialized repeated enum to its value and a new position.
-
-      Args:
-        buffer: memoryview of the serialized bytes.
-        pos: int, position in the memory view to start at.
-        end: int, end position of serialized data
-        message: Message object to store unknown fields in
-        field_dict: Map[Descriptor, Any] to store decoded values in.
-
-      Returns:
-        int, new position in serialized data.
-      """
-      del current_depth  # unused
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      while 1:
-        (element, new_pos) = _DecodeSignedVarint32(buffer, pos)
-        # pylint: disable=protected-access
-        if element in enum_type.values_by_number:
-          value.append(element)
-        else:
-          if not message._unknown_fields:
-            message._unknown_fields = []
-          message._unknown_fields.append(
-              (tag_bytes, buffer[pos:new_pos].tobytes()))
-        # pylint: enable=protected-access
-        # Predict that the next tag is another copy of the same repeated
-        # field.
-        pos = new_pos + tag_len
-        if buffer[new_pos:pos] != tag_bytes or new_pos >= end:
-          # Prediction failed.  Return.
-          if new_pos > end:
-            raise _DecodeError('Truncated message.')
-          return new_pos
-
-    return DecodeRepeatedField
-  else:
-
-    def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
-      """Decode serialized repeated enum to its value and a new position.
-
-      Args:
-        buffer: memoryview of the serialized bytes.
-        pos: int, position in the memory view to start at.
-        end: int, end position of serialized data
-        message: Message object to store unknown fields in
-        field_dict: Map[Descriptor, Any] to store decoded values in.
-
-      Returns:
-        int, new position in serialized data.
-      """
-      del current_depth  # unused
-      value_start_pos = pos
-      (enum_value, pos) = _DecodeSignedVarint32(buffer, pos)
-      if pos > end:
-        raise _DecodeError('Truncated message.')
-      if clear_if_default and IsDefaultScalarValue(enum_value):
-        field_dict.pop(key, None)
-        return pos
-      # pylint: disable=protected-access
-      if enum_value in enum_type.values_by_number:
-        field_dict[key] = enum_value
-      else:
-        if not message._unknown_fields:
-          message._unknown_fields = []
-        tag_bytes = encoder.TagBytes(field_number,
-                                     wire_format.WIRETYPE_VARINT)
-        message._unknown_fields.append(
-            (tag_bytes, buffer[value_start_pos:pos].tobytes()))
-        # pylint: enable=protected-access
-      return pos
-
-    return DecodeField
+
+    local_unpack = struct.unpack
+
+    def InnerDecode(buffer, pos):
+        """Decode serialized double to a double and new position.
+
+        Args:
+          buffer: memoryview of the serialized bytes.
+          pos: int, position in the memory view to start at.
+
+        Returns:
+          Tuple[float, int] of the decoded double value and new position
+          in the serialized data.
+        """
+        # We expect a 64-bit value in little-endian byte order.  Bit 1 is the sign
+        # bit, bits 2-12 represent the exponent, and bits 13-64 are the significand.
+        new_pos = pos + 8
+        double_bytes = buffer[pos:new_pos].tobytes()
+
+        # If this value has all its exponent bits set and at least one significand
+        # bit set, it's not a number.  In Python 2.4, struct.unpack will treat it
+        # as inf or -inf.  To avoid that, we treat it specially.
+        if (
+            (double_bytes[7:8] in b"\x7f\xff")
+            and (double_bytes[6:7] >= b"\xf0")
+            and (double_bytes[0:7] != b"\x00\x00\x00\x00\x00\x00\xf0")
+        ):
+            return (math.nan, new_pos)
+
+        # Note that we expect someone up-stack to catch struct.error and convert
+        # it to _DecodeError -- this way we don't have to set up exception-
+        # handling blocks every time we parse one value.
+        result = local_unpack("<d", double_bytes)[0]
+        return (result, new_pos)
+
+    return _SimpleDecoder(wire_format.WIRETYPE_FIXED64, InnerDecode)
+
+
+def EnumDecoder(field_number, is_repeated, is_packed, key, new_default, clear_if_default=False):
+    """Returns a decoder for enum field."""
+    enum_type = key.enum_type
+    if is_packed:
+        local_DecodeVarint = _DecodeVarint
+
+        def DecodePackedField(buffer, pos, end, message, field_dict, current_depth=0):
+            """Decode serialized packed enum to its value and a new position.
+
+            Args:
+              buffer: memoryview of the serialized bytes.
+              pos: int, position in the memory view to start at.
+              end: int, end position of serialized data
+              message: Message object to store unknown fields in
+              field_dict: Map[Descriptor, Any] to store decoded values in.
+
+            Returns:
+              int, new position in serialized data.
+            """
+            del current_depth  # unused
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            (endpoint, pos) = local_DecodeVarint(buffer, pos)
+            endpoint += pos
+            if endpoint > end:
+                raise _DecodeError("Truncated message.")
+            while pos < endpoint:
+                value_start_pos = pos
+                (element, pos) = _DecodeSignedVarint32(buffer, pos)
+                # pylint: disable=protected-access
+                if element in enum_type.values_by_number:
+                    value.append(element)
+                else:
+                    if not message._unknown_fields:
+                        message._unknown_fields = []
+                    tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_VARINT)
+
+                    message._unknown_fields.append(
+                        (tag_bytes, buffer[value_start_pos:pos].tobytes())
+                    )
+                    # pylint: enable=protected-access
+            if pos > endpoint:
+                if element in enum_type.values_by_number:
+                    del value[-1]  # Discard corrupt value.
+                else:
+                    del message._unknown_fields[-1]
+                    # pylint: enable=protected-access
+                raise _DecodeError("Packed element was truncated.")
+            return pos
+
+        return DecodePackedField
+    elif is_repeated:
+        tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_VARINT)
+        tag_len = len(tag_bytes)
+
+        def DecodeRepeatedField(buffer, pos, end, message, field_dict, current_depth=0):
+            """Decode serialized repeated enum to its value and a new position.
+
+            Args:
+              buffer: memoryview of the serialized bytes.
+              pos: int, position in the memory view to start at.
+              end: int, end position of serialized data
+              message: Message object to store unknown fields in
+              field_dict: Map[Descriptor, Any] to store decoded values in.
+
+            Returns:
+              int, new position in serialized data.
+            """
+            del current_depth  # unused
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            while 1:
+                (element, new_pos) = _DecodeSignedVarint32(buffer, pos)
+                # pylint: disable=protected-access
+                if element in enum_type.values_by_number:
+                    value.append(element)
+                else:
+                    if not message._unknown_fields:
+                        message._unknown_fields = []
+                    message._unknown_fields.append((tag_bytes, buffer[pos:new_pos].tobytes()))
+                # pylint: enable=protected-access
+                # Predict that the next tag is another copy of the same repeated
+                # field.
+                pos = new_pos + tag_len
+                if buffer[new_pos:pos] != tag_bytes or new_pos >= end:
+                    # Prediction failed.  Return.
+                    if new_pos > end:
+                        raise _DecodeError("Truncated message.")
+                    return new_pos
+
+        return DecodeRepeatedField
+    else:
+
+        def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
+            """Decode serialized repeated enum to its value and a new position.
+
+            Args:
+              buffer: memoryview of the serialized bytes.
+              pos: int, position in the memory view to start at.
+              end: int, end position of serialized data
+              message: Message object to store unknown fields in
+              field_dict: Map[Descriptor, Any] to store decoded values in.
+
+            Returns:
+              int, new position in serialized data.
+            """
+            del current_depth  # unused
+            value_start_pos = pos
+            (enum_value, pos) = _DecodeSignedVarint32(buffer, pos)
+            if pos > end:
+                raise _DecodeError("Truncated message.")
+            if clear_if_default and IsDefaultScalarValue(enum_value):
+                field_dict.pop(key, None)
+                return pos
+            # pylint: disable=protected-access
+            if enum_value in enum_type.values_by_number:
+                field_dict[key] = enum_value
+            else:
+                if not message._unknown_fields:
+                    message._unknown_fields = []
+                tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_VARINT)
+                message._unknown_fields.append((tag_bytes, buffer[value_start_pos:pos].tobytes()))
+                # pylint: enable=protected-access
+            return pos
+
+        return DecodeField
 
 
 # --------------------------------------------------------------------
 
 
-Int32Decoder = _SimpleDecoder(
-    wire_format.WIRETYPE_VARINT, _DecodeSignedVarint32)
-
-Int64Decoder = _SimpleDecoder(
-    wire_format.WIRETYPE_VARINT, _DecodeSignedVarint)
+Int32Decoder = _SimpleDecoder(wire_format.WIRETYPE_VARINT, _DecodeSignedVarint32)
+
+Int64Decoder = _SimpleDecoder(wire_format.WIRETYPE_VARINT, _DecodeSignedVarint)
 
 UInt32Decoder = _SimpleDecoder(wire_format.WIRETYPE_VARINT, _DecodeVarint32)
 UInt64Decoder = _SimpleDecoder(wire_format.WIRETYPE_VARINT, _DecodeVarint)
 
 SInt32Decoder = _ModifiedDecoder(
-    wire_format.WIRETYPE_VARINT, _DecodeVarint32, wire_format.ZigZagDecode)
+    wire_format.WIRETYPE_VARINT, _DecodeVarint32, wire_format.ZigZagDecode
+)
 SInt64Decoder = _ModifiedDecoder(
-    wire_format.WIRETYPE_VARINT, _DecodeVarint, wire_format.ZigZagDecode)
+    wire_format.WIRETYPE_VARINT, _DecodeVarint, wire_format.ZigZagDecode
+)
 
 # Note that Python conveniently guarantees that when using the '<' prefix on
 # formats, they will also have the same size across all platforms (as opposed
 # to without the prefix, where their sizes depend on the C compiler's basic
 # type sizes).
-Fixed32Decoder  = _StructPackDecoder(wire_format.WIRETYPE_FIXED32, '<I')
-Fixed64Decoder  = _StructPackDecoder(wire_format.WIRETYPE_FIXED64, '<Q')
-SFixed32Decoder = _StructPackDecoder(wire_format.WIRETYPE_FIXED32, '<i')
-SFixed64Decoder = _StructPackDecoder(wire_format.WIRETYPE_FIXED64, '<q')
+Fixed32Decoder = _StructPackDecoder(wire_format.WIRETYPE_FIXED32, "<I")
+Fixed64Decoder = _StructPackDecoder(wire_format.WIRETYPE_FIXED64, "<Q")
+SFixed32Decoder = _StructPackDecoder(wire_format.WIRETYPE_FIXED32, "<i")
+SFixed64Decoder = _StructPackDecoder(wire_format.WIRETYPE_FIXED64, "<q")
 FloatDecoder = _FloatDecoder()
 DoubleDecoder = _DoubleDecoder()
 
-BoolDecoder = _ModifiedDecoder(
-    wire_format.WIRETYPE_VARINT, _DecodeVarint, bool)
-
-
-def StringDecoder(field_number, is_repeated, is_packed, key, new_default,
-                  clear_if_default=False):
-  """Returns a decoder for a string field."""
-
-  local_DecodeVarint = _DecodeVarint
-
-  def _ConvertToUnicode(memview):
-    """Convert byte to unicode."""
-    byte_str = memview.tobytes()
-    try:
-      value = str(byte_str, 'utf-8')
-    except UnicodeDecodeError as e:
-      # add more information to the error message and re-raise it.
-      e.reason = '%s in field: %s' % (e, key.full_name)
-      raise
-
-    return value
-
-  assert not is_packed
-  if is_repeated:
-    tag_bytes = encoder.TagBytes(field_number,
-                                 wire_format.WIRETYPE_LENGTH_DELIMITED)
+BoolDecoder = _ModifiedDecoder(wire_format.WIRETYPE_VARINT, _DecodeVarint, bool)
+
+
+def StringDecoder(field_number, is_repeated, is_packed, key, new_default, clear_if_default=False):
+    """Returns a decoder for a string field."""
+
+    local_DecodeVarint = _DecodeVarint
+
+    def _ConvertToUnicode(memview):
+        """Convert byte to unicode."""
+        byte_str = memview.tobytes()
+        try:
+            value = str(byte_str, "utf-8")
+        except UnicodeDecodeError as e:
+            # add more information to the error message and re-raise it.
+            e.reason = "%s in field: %s" % (e, key.full_name)
+            raise
+
+        return value
+
+    assert not is_packed
+    if is_repeated:
+        tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+        tag_len = len(tag_bytes)
+
+        def DecodeRepeatedField(buffer, pos, end, message, field_dict, current_depth=0):
+            del current_depth  # unused
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            while 1:
+                (size, pos) = local_DecodeVarint(buffer, pos)
+                new_pos = pos + size
+                if new_pos > end:
+                    raise _DecodeError("Truncated string.")
+                value.append(_ConvertToUnicode(buffer[pos:new_pos]))
+                # Predict that the next tag is another copy of the same repeated field.
+                pos = new_pos + tag_len
+                if buffer[new_pos:pos] != tag_bytes or new_pos == end:
+                    # Prediction failed.  Return.
+                    return new_pos
+
+        return DecodeRepeatedField
+    else:
+
+        def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
+            del current_depth  # unused
+            (size, pos) = local_DecodeVarint(buffer, pos)
+            new_pos = pos + size
+            if new_pos > end:
+                raise _DecodeError("Truncated string.")
+            if clear_if_default and IsDefaultScalarValue(size):
+                field_dict.pop(key, None)
+            else:
+                field_dict[key] = _ConvertToUnicode(buffer[pos:new_pos])
+            return new_pos
+
+        return DecodeField
+
+
+def BytesDecoder(field_number, is_repeated, is_packed, key, new_default, clear_if_default=False):
+    """Returns a decoder for a bytes field."""
+
+    local_DecodeVarint = _DecodeVarint
+
+    assert not is_packed
+    if is_repeated:
+        tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+        tag_len = len(tag_bytes)
+
+        def DecodeRepeatedField(buffer, pos, end, message, field_dict, current_depth=0):
+            del current_depth  # unused
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            while 1:
+                (size, pos) = local_DecodeVarint(buffer, pos)
+                new_pos = pos + size
+                if new_pos > end:
+                    raise _DecodeError("Truncated string.")
+                value.append(buffer[pos:new_pos].tobytes())
+                # Predict that the next tag is another copy of the same repeated field.
+                pos = new_pos + tag_len
+                if buffer[new_pos:pos] != tag_bytes or new_pos == end:
+                    # Prediction failed.  Return.
+                    return new_pos
+
+        return DecodeRepeatedField
+    else:
+
+        def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
+            del current_depth  # unused
+            (size, pos) = local_DecodeVarint(buffer, pos)
+            new_pos = pos + size
+            if new_pos > end:
+                raise _DecodeError("Truncated string.")
+            if clear_if_default and IsDefaultScalarValue(size):
+                field_dict.pop(key, None)
+            else:
+                field_dict[key] = buffer[pos:new_pos].tobytes()
+            return new_pos
+
+        return DecodeField
+
+
+def GroupDecoder(field_number, is_repeated, is_packed, key, new_default):
+    """Returns a decoder for a group field."""
+
+    end_tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_END_GROUP)
+    end_tag_len = len(end_tag_bytes)
+
+    assert not is_packed
+    if is_repeated:
+        tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_START_GROUP)
+        tag_len = len(tag_bytes)
+
+        def DecodeRepeatedField(buffer, pos, end, message, field_dict, current_depth=0):
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            while 1:
+                value = field_dict.get(key)
+                if value is None:
+                    value = field_dict.setdefault(key, new_default(message))
+                # Read sub-message.
+                current_depth += 1
+                if current_depth > _recursion_limit:
+                    raise _DecodeError("Error parsing message: too many levels of nesting.")
+                pos = value.add()._InternalParse(buffer, pos, end, current_depth)
+                current_depth -= 1
+                # Read end tag.
+                new_pos = pos + end_tag_len
+                if buffer[pos:new_pos] != end_tag_bytes or new_pos > end:
+                    raise _DecodeError("Missing group end tag.")
+                # Predict that the next tag is another copy of the same repeated field.
+                pos = new_pos + tag_len
+                if buffer[new_pos:pos] != tag_bytes or new_pos == end:
+                    # Prediction failed.  Return.
+                    return new_pos
+
+        return DecodeRepeatedField
+    else:
+
+        def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            # Read sub-message.
+            current_depth += 1
+            if current_depth > _recursion_limit:
+                raise _DecodeError("Error parsing message: too many levels of nesting.")
+            pos = value._InternalParse(buffer, pos, end, current_depth)
+            current_depth -= 1
+            # Read end tag.
+            new_pos = pos + end_tag_len
+            if buffer[pos:new_pos] != end_tag_bytes or new_pos > end:
+                raise _DecodeError("Missing group end tag.")
+            return new_pos
+
+        return DecodeField
+
+
+def MessageDecoder(field_number, is_repeated, is_packed, key, new_default):
+    """Returns a decoder for a message field."""
+
+    local_DecodeVarint = _DecodeVarint
+
+    assert not is_packed
+    if is_repeated:
+        tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_LENGTH_DELIMITED)
+        tag_len = len(tag_bytes)
+
+        def DecodeRepeatedField(buffer, pos, end, message, field_dict, current_depth=0):
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            while 1:
+                # Read length.
+                (size, pos) = local_DecodeVarint(buffer, pos)
+                new_pos = pos + size
+                if new_pos > end:
+                    raise _DecodeError("Truncated message.")
+                # Read sub-message.
+                current_depth += 1
+                if current_depth > _recursion_limit:
+                    raise _DecodeError("Error parsing message: too many levels of nesting.")
+                if value.add()._InternalParse(buffer, pos, new_pos, current_depth) != new_pos:
+                    # The only reason _InternalParse would return early is if it
+                    # encountered an end-group tag.
+                    raise _DecodeError("Unexpected end-group tag.")
+                current_depth -= 1
+                # Predict that the next tag is another copy of the same repeated field.
+                pos = new_pos + tag_len
+                if buffer[new_pos:pos] != tag_bytes or new_pos == end:
+                    # Prediction failed.  Return.
+                    return new_pos
+
+        return DecodeRepeatedField
+    else:
+
+        def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
+            value = field_dict.get(key)
+            if value is None:
+                value = field_dict.setdefault(key, new_default(message))
+            # Read length.
+            (size, pos) = local_DecodeVarint(buffer, pos)
+            new_pos = pos + size
+            if new_pos > end:
+                raise _DecodeError("Truncated message.")
+            # Read sub-message.
+            current_depth += 1
+            if current_depth > _recursion_limit:
+                raise _DecodeError("Error parsing message: too many levels of nesting.")
+            if value._InternalParse(buffer, pos, new_pos, current_depth) != new_pos:
+                # The only reason _InternalParse would return early is if it encountered
+                # an end-group tag.
+                raise _DecodeError("Unexpected end-group tag.")
+            current_depth -= 1
+            return new_pos
+
+        return DecodeField
+
+
+# --------------------------------------------------------------------
+
+MESSAGE_SET_ITEM_TAG = encoder.TagBytes(1, wire_format.WIRETYPE_START_GROUP)
+
+
+def MessageSetItemDecoder(descriptor):
+    """Returns a decoder for a MessageSet item.
+
+    The parameter is the message Descriptor.
+
+    The message set message looks like this:
+      message MessageSet {
+        repeated group Item = 1 {
+          required int32 type_id = 2;
+          required string message = 3;
+        }
+      }
+    """
+
+    type_id_tag_bytes = encoder.TagBytes(2, wire_format.WIRETYPE_VARINT)
+    message_tag_bytes = encoder.TagBytes(3, wire_format.WIRETYPE_LENGTH_DELIMITED)
+    item_end_tag_bytes = encoder.TagBytes(1, wire_format.WIRETYPE_END_GROUP)
+
+    local_ReadTag = ReadTag
+    local_DecodeVarint = _DecodeVarint
+
+    def DecodeItem(buffer, pos, end, message, field_dict):
+        """Decode serialized message set to its value and new position.
+
+        Args:
+          buffer: memoryview of the serialized bytes.
+          pos: int, position in the memory view to start at.
+          end: int, end position of serialized data
+          message: Message object to store unknown fields in
+          field_dict: Map[Descriptor, Any] to store decoded values in.
+
+        Returns:
+          int, new position in serialized data.
+        """
+        message_set_item_start = pos
+        type_id = -1
+        message_start = -1
+        message_end = -1
+
+        # Technically, type_id and message can appear in any order, so we need
+        # a little loop here.
+        while 1:
+            (tag_bytes, pos) = local_ReadTag(buffer, pos)
+            if tag_bytes == type_id_tag_bytes:
+                (type_id, pos) = local_DecodeVarint(buffer, pos)
+            elif tag_bytes == message_tag_bytes:
+                (size, message_start) = local_DecodeVarint(buffer, pos)
+                pos = message_end = message_start + size
+            elif tag_bytes == item_end_tag_bytes:
+                break
+            else:
+                field_number, wire_type = DecodeTag(tag_bytes)
+                _, pos = _DecodeUnknownField(buffer, pos, end, field_number, wire_type)
+                if pos == -1:
+                    raise _DecodeError("Unexpected end-group tag.")
+
+        if pos > end:
+            raise _DecodeError("Truncated message.")
+
+        if type_id == -1:
+            raise _DecodeError("MessageSet item missing type_id.")
+        if message_start == -1:
+            raise _DecodeError("MessageSet item missing message.")
+
+        extension = message.Extensions._FindExtensionByNumber(type_id)
+        # pylint: disable=protected-access
+        if extension is not None:
+            value = field_dict.get(extension)
+            if value is None:
+                message_type = extension.message_type
+                if not hasattr(message_type, "_concrete_class"):
+                    message_factory.GetMessageClass(message_type)
+                value = field_dict.setdefault(extension, message_type._concrete_class())
+            if value._InternalParse(buffer, message_start, message_end) != message_end:
+                # The only reason _InternalParse would return early is if it encountered
+                # an end-group tag.
+                raise _DecodeError("Unexpected end-group tag.")
+        else:
+            if not message._unknown_fields:
+                message._unknown_fields = []
+            message._unknown_fields.append(
+                (MESSAGE_SET_ITEM_TAG, buffer[message_set_item_start:pos].tobytes())
+            )
+            # pylint: enable=protected-access
+
+        return pos
+
+    return DecodeItem
+
+
+def UnknownMessageSetItemDecoder():
+    """Returns a decoder for a Unknown MessageSet item."""
+
+    type_id_tag_bytes = encoder.TagBytes(2, wire_format.WIRETYPE_VARINT)
+    message_tag_bytes = encoder.TagBytes(3, wire_format.WIRETYPE_LENGTH_DELIMITED)
+    item_end_tag_bytes = encoder.TagBytes(1, wire_format.WIRETYPE_END_GROUP)
+
+    def DecodeUnknownItem(buffer):
+        pos = 0
+        end = len(buffer)
+        message_start = -1
+        message_end = -1
+        while 1:
+            (tag_bytes, pos) = ReadTag(buffer, pos)
+            if tag_bytes == type_id_tag_bytes:
+                (type_id, pos) = _DecodeVarint(buffer, pos)
+            elif tag_bytes == message_tag_bytes:
+                (size, message_start) = _DecodeVarint(buffer, pos)
+                pos = message_end = message_start + size
+            elif tag_bytes == item_end_tag_bytes:
+                break
+            else:
+                field_number, wire_type = DecodeTag(tag_bytes)
+                _, pos = _DecodeUnknownField(buffer, pos, end, field_number, wire_type)
+                if pos == -1:
+                    raise _DecodeError("Unexpected end-group tag.")
+
+        if pos > end:
+            raise _DecodeError("Truncated message.")
+
+        if type_id == -1:
+            raise _DecodeError("MessageSet item missing type_id.")
+        if message_start == -1:
+            raise _DecodeError("MessageSet item missing message.")
+
+        return (type_id, buffer[message_start:message_end].tobytes())
+
+    return DecodeUnknownItem
+
+
+# --------------------------------------------------------------------
+
+
+def MapDecoder(field_descriptor, new_default, is_message_map):
+    """Returns a decoder for a map field."""
+
+    key = field_descriptor
+    tag_bytes = encoder.TagBytes(field_descriptor.number, wire_format.WIRETYPE_LENGTH_DELIMITED)
     tag_len = len(tag_bytes)
-    def DecodeRepeatedField(
-        buffer, pos, end, message, field_dict, current_depth=0
-    ):
-      del current_depth  # unused
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      while 1:
-        (size, pos) = local_DecodeVarint(buffer, pos)
-        new_pos = pos + size
-        if new_pos > end:
-          raise _DecodeError('Truncated string.')
-        value.append(_ConvertToUnicode(buffer[pos:new_pos]))
-        # Predict that the next tag is another copy of the same repeated field.
-        pos = new_pos + tag_len
-        if buffer[new_pos:pos] != tag_bytes or new_pos == end:
-          # Prediction failed.  Return.
-          return new_pos
-
-    return DecodeRepeatedField
-  else:
-
-    def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
-      del current_depth  # unused
-      (size, pos) = local_DecodeVarint(buffer, pos)
-      new_pos = pos + size
-      if new_pos > end:
-        raise _DecodeError('Truncated string.')
-      if clear_if_default and IsDefaultScalarValue(size):
-        field_dict.pop(key, None)
-      else:
-        field_dict[key] = _ConvertToUnicode(buffer[pos:new_pos])
-      return new_pos
-
-    return DecodeField
-
-
-def BytesDecoder(field_number, is_repeated, is_packed, key, new_default,
-                 clear_if_default=False):
-  """Returns a decoder for a bytes field."""
-
-  local_DecodeVarint = _DecodeVarint
-
-  assert not is_packed
-  if is_repeated:
-    tag_bytes = encoder.TagBytes(field_number,
-                                 wire_format.WIRETYPE_LENGTH_DELIMITED)
-    tag_len = len(tag_bytes)
-    def DecodeRepeatedField(
-        buffer, pos, end, message, field_dict, current_depth=0
-    ):
-      del current_depth  # unused
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      while 1:
-        (size, pos) = local_DecodeVarint(buffer, pos)
-        new_pos = pos + size
-        if new_pos > end:
-          raise _DecodeError('Truncated string.')
-        value.append(buffer[pos:new_pos].tobytes())
-        # Predict that the next tag is another copy of the same repeated field.
-        pos = new_pos + tag_len
-        if buffer[new_pos:pos] != tag_bytes or new_pos == end:
-          # Prediction failed.  Return.
-          return new_pos
-
-    return DecodeRepeatedField
-  else:
-
-    def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
-      del current_depth  # unused
-      (size, pos) = local_DecodeVarint(buffer, pos)
-      new_pos = pos + size
-      if new_pos > end:
-        raise _DecodeError('Truncated string.')
-      if clear_if_default and IsDefaultScalarValue(size):
-        field_dict.pop(key, None)
-      else:
-        field_dict[key] = buffer[pos:new_pos].tobytes()
-      return new_pos
-
-    return DecodeField
-
-
-def GroupDecoder(field_number, is_repeated, is_packed, key, new_default):
-  """Returns a decoder for a group field."""
-
-  end_tag_bytes = encoder.TagBytes(field_number,
-                                   wire_format.WIRETYPE_END_GROUP)
-  end_tag_len = len(end_tag_bytes)
-
-  assert not is_packed
-  if is_repeated:
-    tag_bytes = encoder.TagBytes(field_number,
-                                 wire_format.WIRETYPE_START_GROUP)
-    tag_len = len(tag_bytes)
-    def DecodeRepeatedField(
-        buffer, pos, end, message, field_dict, current_depth=0
-    ):
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      while 1:
+    local_DecodeVarint = _DecodeVarint
+    # Can't read _concrete_class yet; might not be initialized.
+    message_type = field_descriptor.message_type
+
+    def DecodeMap(buffer, pos, end, message, field_dict, current_depth=0):
+        del current_depth  # Unused.
+        submsg = message_type._concrete_class()
         value = field_dict.get(key)
         if value is None:
-          value = field_dict.setdefault(key, new_default(message))
-        # Read sub-message.
-        current_depth += 1
-        if current_depth > _recursion_limit:
-          raise _DecodeError(
-              'Error parsing message: too many levels of nesting.'
-          )
-        pos = value.add()._InternalParse(buffer, pos, end, current_depth)
-        current_depth -= 1
-        # Read end tag.
-        new_pos = pos+end_tag_len
-        if buffer[pos:new_pos] != end_tag_bytes or new_pos > end:
-          raise _DecodeError('Missing group end tag.')
-        # Predict that the next tag is another copy of the same repeated field.
-        pos = new_pos + tag_len
-        if buffer[new_pos:pos] != tag_bytes or new_pos == end:
-          # Prediction failed.  Return.
-          return new_pos
-
-    return DecodeRepeatedField
-  else:
-
-    def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      # Read sub-message.
-      current_depth += 1
-      if current_depth > _recursion_limit:
-        raise _DecodeError('Error parsing message: too many levels of nesting.')
-      pos = value._InternalParse(buffer, pos, end, current_depth)
-      current_depth -= 1
-      # Read end tag.
-      new_pos = pos+end_tag_len
-      if buffer[pos:new_pos] != end_tag_bytes or new_pos > end:
-        raise _DecodeError('Missing group end tag.')
-      return new_pos
-
-    return DecodeField
-
-
-def MessageDecoder(field_number, is_repeated, is_packed, key, new_default):
-  """Returns a decoder for a message field."""
-
-  local_DecodeVarint = _DecodeVarint
-
-  assert not is_packed
-  if is_repeated:
-    tag_bytes = encoder.TagBytes(field_number,
-                                 wire_format.WIRETYPE_LENGTH_DELIMITED)
-    tag_len = len(tag_bytes)
-    def DecodeRepeatedField(
-        buffer, pos, end, message, field_dict, current_depth=0
-    ):
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      while 1:
-        # Read length.
-        (size, pos) = local_DecodeVarint(buffer, pos)
-        new_pos = pos + size
-        if new_pos > end:
-          raise _DecodeError('Truncated message.')
-        # Read sub-message.
-        current_depth += 1
-        if current_depth > _recursion_limit:
-          raise _DecodeError(
-              'Error parsing message: too many levels of nesting.'
-          )
-        if (
-            value.add()._InternalParse(buffer, pos, new_pos, current_depth)
-            != new_pos
-        ):
-          # The only reason _InternalParse would return early is if it
-          # encountered an end-group tag.
-          raise _DecodeError('Unexpected end-group tag.')
-        current_depth -= 1
-        # Predict that the next tag is another copy of the same repeated field.
-        pos = new_pos + tag_len
-        if buffer[new_pos:pos] != tag_bytes or new_pos == end:
-          # Prediction failed.  Return.
-          return new_pos
-
-    return DecodeRepeatedField
-  else:
-
-    def DecodeField(buffer, pos, end, message, field_dict, current_depth=0):
-      value = field_dict.get(key)
-      if value is None:
-        value = field_dict.setdefault(key, new_default(message))
-      # Read length.
-      (size, pos) = local_DecodeVarint(buffer, pos)
-      new_pos = pos + size
-      if new_pos > end:
-        raise _DecodeError('Truncated message.')
-      # Read sub-message.
-      current_depth += 1
-      if current_depth > _recursion_limit:
-        raise _DecodeError('Error parsing message: too many levels of nesting.')
-      if value._InternalParse(buffer, pos, new_pos, current_depth) != new_pos:
-        # The only reason _InternalParse would return early is if it encountered
-        # an end-group tag.
-        raise _DecodeError('Unexpected end-group tag.')
-      current_depth -= 1
-      return new_pos
-
-    return DecodeField
-
-
-# --------------------------------------------------------------------
-
-MESSAGE_SET_ITEM_TAG = encoder.TagBytes(1, wire_format.WIRETYPE_START_GROUP)
-
-def MessageSetItemDecoder(descriptor):
-  """Returns a decoder for a MessageSet item.
-
-  The parameter is the message Descriptor.
-
-  The message set message looks like this:
-    message MessageSet {
-      repeated group Item = 1 {
-        required int32 type_id = 2;
-        required string message = 3;
-      }
-    }
-  """
-
-  type_id_tag_bytes = encoder.TagBytes(2, wire_format.WIRETYPE_VARINT)
-  message_tag_bytes = encoder.TagBytes(3, wire_format.WIRETYPE_LENGTH_DELIMITED)
-  item_end_tag_bytes = encoder.TagBytes(1, wire_format.WIRETYPE_END_GROUP)
-
-  local_ReadTag = ReadTag
-  local_DecodeVarint = _DecodeVarint
-
-  def DecodeItem(buffer, pos, end, message, field_dict):
-    """Decode serialized message set to its value and new position.
-
-    Args:
-      buffer: memoryview of the serialized bytes.
-      pos: int, position in the memory view to start at.
-      end: int, end position of serialized data
-      message: Message object to store unknown fields in
-      field_dict: Map[Descriptor, Any] to store decoded values in.
-
-    Returns:
-      int, new position in serialized data.
-    """
-    message_set_item_start = pos
-    type_id = -1
-    message_start = -1
-    message_end = -1
-
-    # Technically, type_id and message can appear in any order, so we need
-    # a little loop here.
-    while 1:
-      (tag_bytes, pos) = local_ReadTag(buffer, pos)
-      if tag_bytes == type_id_tag_bytes:
-        (type_id, pos) = local_DecodeVarint(buffer, pos)
-      elif tag_bytes == message_tag_bytes:
-        (size, message_start) = local_DecodeVarint(buffer, pos)
-        pos = message_end = message_start + size
-      elif tag_bytes == item_end_tag_bytes:
-        break
-      else:
-        field_number, wire_type = DecodeTag(tag_bytes)
-        _, pos = _DecodeUnknownField(buffer, pos, end, field_number, wire_type)
-        if pos == -1:
-          raise _DecodeError('Unexpected end-group tag.')
-
-    if pos > end:
-      raise _DecodeError('Truncated message.')
-
-    if type_id == -1:
-      raise _DecodeError('MessageSet item missing type_id.')
-    if message_start == -1:
-      raise _DecodeError('MessageSet item missing message.')
-
-    extension = message.Extensions._FindExtensionByNumber(type_id)
-    # pylint: disable=protected-access
-    if extension is not None:
-      value = field_dict.get(extension)
-      if value is None:
-        message_type = extension.message_type
-        if not hasattr(message_type, '_concrete_class'):
-          message_factory.GetMessageClass(message_type)
-        value = field_dict.setdefault(
-            extension, message_type._concrete_class())
-      if value._InternalParse(buffer, message_start,message_end) != message_end:
-        # The only reason _InternalParse would return early is if it encountered
-        # an end-group tag.
-        raise _DecodeError('Unexpected end-group tag.')
-    else:
-      if not message._unknown_fields:
-        message._unknown_fields = []
-      message._unknown_fields.append(
-          (MESSAGE_SET_ITEM_TAG, buffer[message_set_item_start:pos].tobytes()))
-      # pylint: enable=protected-access
-
-    return pos
-
-  return DecodeItem
-
-
-def UnknownMessageSetItemDecoder():
-  """Returns a decoder for a Unknown MessageSet item."""
-
-  type_id_tag_bytes = encoder.TagBytes(2, wire_format.WIRETYPE_VARINT)
-  message_tag_bytes = encoder.TagBytes(3, wire_format.WIRETYPE_LENGTH_DELIMITED)
-  item_end_tag_bytes = encoder.TagBytes(1, wire_format.WIRETYPE_END_GROUP)
-
-  def DecodeUnknownItem(buffer):
-    pos = 0
-    end = len(buffer)
-    message_start = -1
-    message_end = -1
-    while 1:
-      (tag_bytes, pos) = ReadTag(buffer, pos)
-      if tag_bytes == type_id_tag_bytes:
-        (type_id, pos) = _DecodeVarint(buffer, pos)
-      elif tag_bytes == message_tag_bytes:
-        (size, message_start) = _DecodeVarint(buffer, pos)
-        pos = message_end = message_start + size
-      elif tag_bytes == item_end_tag_bytes:
-        break
-      else:
-        field_number, wire_type = DecodeTag(tag_bytes)
-        _, pos = _DecodeUnknownField(buffer, pos, end, field_number, wire_type)
-        if pos == -1:
-          raise _DecodeError('Unexpected end-group tag.')
-
-    if pos > end:
-      raise _DecodeError('Truncated message.')
-
-    if type_id == -1:
-      raise _DecodeError('MessageSet item missing type_id.')
-    if message_start == -1:
-      raise _DecodeError('MessageSet item missing message.')
-
-    return (type_id, buffer[message_start:message_end].tobytes())
-
-  return DecodeUnknownItem
-
-# --------------------------------------------------------------------
-
-def MapDecoder(field_descriptor, new_default, is_message_map):
-  """Returns a decoder for a map field."""
-
-  key = field_descriptor
-  tag_bytes = encoder.TagBytes(field_descriptor.number,
-                               wire_format.WIRETYPE_LENGTH_DELIMITED)
-  tag_len = len(tag_bytes)
-  local_DecodeVarint = _DecodeVarint
-  # Can't read _concrete_class yet; might not be initialized.
-  message_type = field_descriptor.message_type
-
-  def DecodeMap(buffer, pos, end, message, field_dict, current_depth=0):
-    del current_depth  # Unused.
-    submsg = message_type._concrete_class()
-    value = field_dict.get(key)
-    if value is None:
-      value = field_dict.setdefault(key, new_default(message))
-    while 1:
-      # Read length.
-      (size, pos) = local_DecodeVarint(buffer, pos)
-      new_pos = pos + size
-      if new_pos > end:
-        raise _DecodeError('Truncated message.')
-      # Read sub-message.
-      submsg.Clear()
-      if submsg._InternalParse(buffer, pos, new_pos) != new_pos:
-        # The only reason _InternalParse would return early is if it
-        # encountered an end-group tag.
-        raise _DecodeError('Unexpected end-group tag.')
-
-      if is_message_map:
-        value[submsg.key].CopyFrom(submsg.value)
-      else:
-        value[submsg.key] = submsg.value
-
-      # Predict that the next tag is another copy of the same repeated field.
-      pos = new_pos + tag_len
-      if buffer[new_pos:pos] != tag_bytes or new_pos == end:
-        # Prediction failed.  Return.
-        return new_pos
-
-  return DecodeMap
+            value = field_dict.setdefault(key, new_default(message))
+        while 1:
+            # Read length.
+            (size, pos) = local_DecodeVarint(buffer, pos)
+            new_pos = pos + size
+            if new_pos > end:
+                raise _DecodeError("Truncated message.")
+            # Read sub-message.
+            submsg.Clear()
+            if submsg._InternalParse(buffer, pos, new_pos) != new_pos:
+                # The only reason _InternalParse would return early is if it
+                # encountered an end-group tag.
+                raise _DecodeError("Unexpected end-group tag.")
+
+            if is_message_map:
+                value[submsg.key].CopyFrom(submsg.value)
+            else:
+                value[submsg.key] = submsg.value
+
+            # Predict that the next tag is another copy of the same repeated field.
+            pos = new_pos + tag_len
+            if buffer[new_pos:pos] != tag_bytes or new_pos == end:
+                # Prediction failed.  Return.
+                return new_pos
+
+    return DecodeMap
 
 
 def _DecodeFixed64(buffer, pos):
-  """Decode a fixed64."""
-  new_pos = pos + 8
-  return (struct.unpack('<Q', buffer[pos:new_pos])[0], new_pos)
+    """Decode a fixed64."""
+    new_pos = pos + 8
+    return (struct.unpack("<Q", buffer[pos:new_pos])[0], new_pos)
 
 
 def _DecodeFixed32(buffer, pos):
-  """Decode a fixed32."""
-
-  new_pos = pos + 4
-  return (struct.unpack('<I', buffer[pos:new_pos])[0], new_pos)
+    """Decode a fixed32."""
+
+    new_pos = pos + 4
+    return (struct.unpack("<I", buffer[pos:new_pos])[0], new_pos)
+
+
 DEFAULT_RECURSION_LIMIT = 100
 _recursion_limit = DEFAULT_RECURSION_LIMIT
 
 
 def SetRecursionLimit(new_limit):
-  global _recursion_limit
-  _recursion_limit = new_limit
+    global _recursion_limit
+    _recursion_limit = new_limit
 
 
 def _DecodeUnknownFieldSet(buffer, pos, end_pos=None, current_depth=0):
-  """Decode UnknownFieldSet.  Returns the UnknownFieldSet and new position."""
-
-  unknown_field_set = containers.UnknownFieldSet()
-  while end_pos is None or pos < end_pos:
-    (tag_bytes, pos) = ReadTag(buffer, pos)
-    (tag, _) = _DecodeVarint(tag_bytes, 0)
-    field_number, wire_type = wire_format.UnpackTag(tag)
-    if wire_type == wire_format.WIRETYPE_END_GROUP:
-      break
-    (data, pos) = _DecodeUnknownField(
-        buffer, pos, end_pos, field_number, wire_type, current_depth
-    )
-    # pylint: disable=protected-access
-    unknown_field_set._add(field_number, wire_type, data)
-
-  return (unknown_field_set, pos)
-
-
-def _DecodeUnknownField(
-    buffer, pos, end_pos, field_number, wire_type, current_depth=0
-):
-  """Decode a unknown field.  Returns the UnknownField and new position."""
-
-  if wire_type == wire_format.WIRETYPE_VARINT:
-    (data, pos) = _DecodeVarint(buffer, pos)
-  elif wire_type == wire_format.WIRETYPE_FIXED64:
-    (data, pos) = _DecodeFixed64(buffer, pos)
-  elif wire_type == wire_format.WIRETYPE_FIXED32:
-    (data, pos) = _DecodeFixed32(buffer, pos)
-  elif wire_type == wire_format.WIRETYPE_LENGTH_DELIMITED:
-    (size, pos) = _DecodeVarint(buffer, pos)
-    data = buffer[pos:pos+size].tobytes()
-    pos += size
-  elif wire_type == wire_format.WIRETYPE_START_GROUP:
-    end_tag_bytes = encoder.TagBytes(
-        field_number, wire_format.WIRETYPE_END_GROUP
-    )
-    current_depth += 1
-    if current_depth >= _recursion_limit:
-      raise _DecodeError('Error parsing message: too many levels of nesting.')
-    data, pos = _DecodeUnknownFieldSet(buffer, pos, end_pos, current_depth)
-    current_depth -= 1
-    # Check end tag.
-    if buffer[pos - len(end_tag_bytes) : pos] != end_tag_bytes:
-      raise _DecodeError('Missing group end tag.')
-  elif wire_type == wire_format.WIRETYPE_END_GROUP:
-    return (0, -1)
-  else:
-    raise _DecodeError('Wrong wire type in tag.')
-
-  if pos > end_pos:
-    raise _DecodeError('Truncated message.')
-
-  return (data, pos)
+    """Decode UnknownFieldSet.  Returns the UnknownFieldSet and new position."""
+
+    unknown_field_set = containers.UnknownFieldSet()
+    while end_pos is None or pos < end_pos:
+        (tag_bytes, pos) = ReadTag(buffer, pos)
+        (tag, _) = _DecodeVarint(tag_bytes, 0)
+        field_number, wire_type = wire_format.UnpackTag(tag)
+        if wire_type == wire_format.WIRETYPE_END_GROUP:
+            break
+        (data, pos) = _DecodeUnknownField(
+            buffer, pos, end_pos, field_number, wire_type, current_depth
+        )
+        # pylint: disable=protected-access
+        unknown_field_set._add(field_number, wire_type, data)
+
+    return (unknown_field_set, pos)
+
+
+def _DecodeUnknownField(buffer, pos, end_pos, field_number, wire_type, current_depth=0):
+    """Decode a unknown field.  Returns the UnknownField and new position."""
+
+    if wire_type == wire_format.WIRETYPE_VARINT:
+        (data, pos) = _DecodeVarint(buffer, pos)
+    elif wire_type == wire_format.WIRETYPE_FIXED64:
+        (data, pos) = _DecodeFixed64(buffer, pos)
+    elif wire_type == wire_format.WIRETYPE_FIXED32:
+        (data, pos) = _DecodeFixed32(buffer, pos)
+    elif wire_type == wire_format.WIRETYPE_LENGTH_DELIMITED:
+        (size, pos) = _DecodeVarint(buffer, pos)
+        data = buffer[pos : pos + size].tobytes()
+        pos += size
+    elif wire_type == wire_format.WIRETYPE_START_GROUP:
+        end_tag_bytes = encoder.TagBytes(field_number, wire_format.WIRETYPE_END_GROUP)
+        current_depth += 1
+        if current_depth >= _recursion_limit:
+            raise _DecodeError("Error parsing message: too many levels of nesting.")
+        data, pos = _DecodeUnknownFieldSet(buffer, pos, end_pos, current_depth)
+        current_depth -= 1
+        # Check end tag.
+        if buffer[pos - len(end_tag_bytes) : pos] != end_tag_bytes:
+            raise _DecodeError("Missing group end tag.")
+    elif wire_type == wire_format.WIRETYPE_END_GROUP:
+        return (0, -1)
+    else:
+        raise _DecodeError("Wrong wire type in tag.")
+
+    if pos > end_pos:
+        raise _DecodeError("Truncated message.")
+
+    return (data, pos)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/protobuf/internal/decoder.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/rpc/context/attribute_context_pb2.pyi	2025-09-21 04:55:32.106194+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/rpc/context/attribute_context_pb2.pyi	2025-09-21 06:00:27.987605+00:00
@@ -47,13 +47,12 @@
             __slots__ = ("key", "value")
             KEY_FIELD_NUMBER: _ClassVar[int]
             VALUE_FIELD_NUMBER: _ClassVar[int]
             key: str
             value: str
-            def __init__(
-                self, key: _Optional[str] = ..., value: _Optional[str] = ...
-            ) -> None: ...
+            def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
+
         IP_FIELD_NUMBER: _ClassVar[int]
         PORT_FIELD_NUMBER: _ClassVar[int]
         LABELS_FIELD_NUMBER: _ClassVar[int]
         PRINCIPAL_FIELD_NUMBER: _ClassVar[int]
         REGION_CODE_FIELD_NUMBER: _ClassVar[int]
@@ -130,13 +129,12 @@
             __slots__ = ("key", "value")
             KEY_FIELD_NUMBER: _ClassVar[int]
             VALUE_FIELD_NUMBER: _ClassVar[int]
             key: str
             value: str
-            def __init__(
-                self, key: _Optional[str] = ..., value: _Optional[str] = ...
-            ) -> None: ...
+            def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
+
         ID_FIELD_NUMBER: _ClassVar[int]
         METHOD_FIELD_NUMBER: _ClassVar[int]
         HEADERS_FIELD_NUMBER: _ClassVar[int]
         PATH_FIELD_NUMBER: _ClassVar[int]
         HOST_FIELD_NUMBER: _ClassVar[int]
@@ -182,13 +180,12 @@
             __slots__ = ("key", "value")
             KEY_FIELD_NUMBER: _ClassVar[int]
             VALUE_FIELD_NUMBER: _ClassVar[int]
             key: str
             value: str
-            def __init__(
-                self, key: _Optional[str] = ..., value: _Optional[str] = ...
-            ) -> None: ...
+            def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
+
         CODE_FIELD_NUMBER: _ClassVar[int]
         SIZE_FIELD_NUMBER: _ClassVar[int]
         HEADERS_FIELD_NUMBER: _ClassVar[int]
         TIME_FIELD_NUMBER: _ClassVar[int]
         BACKEND_LATENCY_FIELD_NUMBER: _ClassVar[int]
@@ -226,23 +223,20 @@
             __slots__ = ("key", "value")
             KEY_FIELD_NUMBER: _ClassVar[int]
             VALUE_FIELD_NUMBER: _ClassVar[int]
             key: str
             value: str
-            def __init__(
-                self, key: _Optional[str] = ..., value: _Optional[str] = ...
-            ) -> None: ...
+            def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
 
         class AnnotationsEntry(_message.Message):
             __slots__ = ("key", "value")
             KEY_FIELD_NUMBER: _ClassVar[int]
             VALUE_FIELD_NUMBER: _ClassVar[int]
             key: str
             value: str
-            def __init__(
-                self, key: _Optional[str] = ..., value: _Optional[str] = ...
-            ) -> None: ...
+            def __init__(self, key: _Optional[str] = ..., value: _Optional[str] = ...) -> None: ...
+
         SERVICE_FIELD_NUMBER: _ClassVar[int]
         NAME_FIELD_NUMBER: _ClassVar[int]
         TYPE_FIELD_NUMBER: _ClassVar[int]
         LABELS_FIELD_NUMBER: _ClassVar[int]
         UID_FIELD_NUMBER: _ClassVar[int]
@@ -278,10 +272,11 @@
             update_time: _Optional[_Union[_timestamp_pb2.Timestamp, _Mapping]] = ...,
             delete_time: _Optional[_Union[_timestamp_pb2.Timestamp, _Mapping]] = ...,
             etag: _Optional[str] = ...,
             location: _Optional[str] = ...,
         ) -> None: ...
+
     ORIGIN_FIELD_NUMBER: _ClassVar[int]
     SOURCE_FIELD_NUMBER: _ClassVar[int]
     DESTINATION_FIELD_NUMBER: _ClassVar[int]
     REQUEST_FIELD_NUMBER: _ClassVar[int]
     RESPONSE_FIELD_NUMBER: _ClassVar[int]
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/rpc/context/attribute_context_pb2.pyi
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/rpc/context/audit_context_pb2.py	2025-09-21 04:55:32.106410+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/rpc/context/audit_context_pb2.py	2025-09-21 06:00:28.419724+00:00
@@ -39,11 +39,11 @@
 _builder.BuildTopDescriptorsAndMessages(
     DESCRIPTOR, "google.rpc.context.audit_context_pb2", _globals
 )
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\026com.google.rpc.contextB\021AuditContextProtoP\001Z9google.golang.org/genproto/googleapis/rpc/context;context"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\026com.google.rpc.contextB\021AuditContextProtoP\001Z9google.golang.org/genproto/googleapis/rpc/context;context"
+    )
     _globals["_AUDITCONTEXT"]._serialized_start = 93
     _globals["_AUDITCONTEXT"]._serialized_end = 292
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/rpc/context/audit_context_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/fraction_pb2.py	2025-09-21 04:55:32.109571+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/fraction_pb2.py	2025-09-21 06:01:19.307178+00:00
@@ -32,16 +32,14 @@
     b'\n\x1agoogle/type/fraction.proto\x12\x0bgoogle.type"2\n\x08\x46raction\x12\x11\n\tnumerator\x18\x01 \x01(\x03\x12\x13\n\x0b\x64\x65nominator\x18\x02 \x01(\x03\x42\x66\n\x0f\x63om.google.typeB\rFractionProtoP\x01Z<google.golang.org/genproto/googleapis/type/fraction;fraction\xa2\x02\x03GTPb\x06proto3'
 )
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(
-    DESCRIPTOR, "google.type.fraction_pb2", _globals
-)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.fraction_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\rFractionProtoP\001Z<google.golang.org/genproto/googleapis/type/fraction;fraction\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\rFractionProtoP\001Z<google.golang.org/genproto/googleapis/type/fraction;fraction\242\002\003GTP"
+    )
     _globals["_FRACTION"]._serialized_start = 43
     _globals["_FRACTION"]._serialized_end = 93
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/fraction_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/expr_pb2.py	2025-09-21 04:55:32.109137+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/expr_pb2.py	2025-09-21 06:01:19.334602+00:00
@@ -35,11 +35,11 @@
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
 _builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.expr_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\tExprProtoP\001Z4google.golang.org/genproto/googleapis/type/expr;expr\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\tExprProtoP\001Z4google.golang.org/genproto/googleapis/type/expr;expr\242\002\003GTP"
+    )
     _globals["_EXPR"]._serialized_start = 39
     _globals["_EXPR"]._serialized_end = 119
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/expr_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/date_pb2.py	2025-09-21 04:55:32.107589+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/date_pb2.py	2025-09-21 06:01:19.611327+00:00
@@ -35,11 +35,11 @@
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
 _builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.date_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\tDateProtoP\001Z4google.golang.org/genproto/googleapis/type/date;date\370\001\001\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\tDateProtoP\001Z4google.golang.org/genproto/googleapis/type/date;date\370\001\001\242\002\003GTP"
+    )
     _globals["_DATE"]._serialized_start = 39
     _globals["_DATE"]._serialized_end = 87
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/date_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/money_pb2.py	2025-09-21 04:55:32.111302+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/money_pb2.py	2025-09-21 06:01:19.917293+00:00
@@ -35,11 +35,11 @@
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
 _builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.money_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\nMoneyProtoP\001Z6google.golang.org/genproto/googleapis/type/money;money\370\001\001\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\nMoneyProtoP\001Z6google.golang.org/genproto/googleapis/type/money;money\370\001\001\242\002\003GTP"
+    )
     _globals["_MONEY"]._serialized_start = 40
     _globals["_MONEY"]._serialized_end = 100
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/money_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/localized_text_pb2.pyi	2025-09-21 04:55:32.111042+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/localized_text_pb2.pyi	2025-09-21 06:01:19.926664+00:00
@@ -24,8 +24,6 @@
     __slots__ = ("text", "language_code")
     TEXT_FIELD_NUMBER: _ClassVar[int]
     LANGUAGE_CODE_FIELD_NUMBER: _ClassVar[int]
     text: str
     language_code: str
-    def __init__(
-        self, text: _Optional[str] = ..., language_code: _Optional[str] = ...
-    ) -> None: ...
+    def __init__(self, text: _Optional[str] = ..., language_code: _Optional[str] = ...) -> None: ...
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/localized_text_pb2.pyi
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/timeofday_pb2.py	2025-09-21 04:55:32.113674+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/timeofday_pb2.py	2025-09-21 06:01:41.888801+00:00
@@ -32,16 +32,14 @@
     b'\n\x1bgoogle/type/timeofday.proto\x12\x0bgoogle.type"K\n\tTimeOfDay\x12\r\n\x05hours\x18\x01 \x01(\x05\x12\x0f\n\x07minutes\x18\x02 \x01(\x05\x12\x0f\n\x07seconds\x18\x03 \x01(\x05\x12\r\n\x05nanos\x18\x04 \x01(\x05\x42l\n\x0f\x63om.google.typeB\x0eTimeOfDayProtoP\x01Z>google.golang.org/genproto/googleapis/type/timeofday;timeofday\xf8\x01\x01\xa2\x02\x03GTPb\x06proto3'
 )
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(
-    DESCRIPTOR, "google.type.timeofday_pb2", _globals
-)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.timeofday_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\016TimeOfDayProtoP\001Z>google.golang.org/genproto/googleapis/type/timeofday;timeofday\370\001\001\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\016TimeOfDayProtoP\001Z>google.golang.org/genproto/googleapis/type/timeofday;timeofday\370\001\001\242\002\003GTP"
+    )
     _globals["_TIMEOFDAY"]._serialized_start = 44
     _globals["_TIMEOFDAY"]._serialized_end = 119
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/timeofday_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/quaternion_pb2.py	2025-09-21 04:55:32.113166+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/quaternion_pb2.py	2025-09-21 06:01:42.163859+00:00
@@ -32,16 +32,14 @@
     b'\n\x1cgoogle/type/quaternion.proto\x12\x0bgoogle.type"8\n\nQuaternion\x12\t\n\x01x\x18\x01 \x01(\x01\x12\t\n\x01y\x18\x02 \x01(\x01\x12\t\n\x01z\x18\x03 \x01(\x01\x12\t\n\x01w\x18\x04 \x01(\x01\x42o\n\x0f\x63om.google.typeB\x0fQuaternionProtoP\x01Z@google.golang.org/genproto/googleapis/type/quaternion;quaternion\xf8\x01\x01\xa2\x02\x03GTPb\x06proto3'
 )
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(
-    DESCRIPTOR, "google.type.quaternion_pb2", _globals
-)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.quaternion_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\017QuaternionProtoP\001Z@google.golang.org/genproto/googleapis/type/quaternion;quaternion\370\001\001\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\017QuaternionProtoP\001Z@google.golang.org/genproto/googleapis/type/quaternion;quaternion\370\001\001\242\002\003GTP"
+    )
     _globals["_QUATERNION"]._serialized_start = 45
     _globals["_QUATERNION"]._serialized_end = 101
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/quaternion_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/phone_number_pb2.pyi	2025-09-21 04:55:32.112391+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/phone_number_pb2.pyi	2025-09-21 06:01:42.211390+00:00
@@ -32,10 +32,11 @@
         region_code: str
         number: str
         def __init__(
             self, region_code: _Optional[str] = ..., number: _Optional[str] = ...
         ) -> None: ...
+
     E164_NUMBER_FIELD_NUMBER: _ClassVar[int]
     SHORT_CODE_FIELD_NUMBER: _ClassVar[int]
     EXTENSION_FIELD_NUMBER: _ClassVar[int]
     e164_number: str
     short_code: PhoneNumber.ShortCode
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/phone_number_pb2.pyi
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/phone_number_pb2.py	2025-09-21 04:55:32.112132+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/phone_number_pb2.py	2025-09-21 06:01:42.238799+00:00
@@ -32,18 +32,16 @@
     b'\n\x1egoogle/type/phone_number.proto\x12\x0bgoogle.type"\xab\x01\n\x0bPhoneNumber\x12\x15\n\x0b\x65\x31\x36\x34_number\x18\x01 \x01(\tH\x00\x12\x38\n\nshort_code\x18\x02 \x01(\x0b\x32".google.type.PhoneNumber.ShortCodeH\x00\x12\x11\n\textension\x18\x03 \x01(\t\x1a\x30\n\tShortCode\x12\x13\n\x0bregion_code\x18\x01 \x01(\t\x12\x0e\n\x06number\x18\x02 \x01(\tB\x06\n\x04kindBt\n\x0f\x63om.google.typeB\x10PhoneNumberProtoP\x01ZDgoogle.golang.org/genproto/googleapis/type/phone_number;phone_number\xf8\x01\x01\xa2\x02\x03GTPb\x06proto3'
 )
 
 _globals = globals()
 _builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
-_builder.BuildTopDescriptorsAndMessages(
-    DESCRIPTOR, "google.type.phone_number_pb2", _globals
-)
+_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "google.type.phone_number_pb2", _globals)
 if _descriptor._USE_C_DESCRIPTORS == False:
     _globals["DESCRIPTOR"]._options = None
-    _globals[
-        "DESCRIPTOR"
-    ]._serialized_options = b"\n\017com.google.typeB\020PhoneNumberProtoP\001ZDgoogle.golang.org/genproto/googleapis/type/phone_number;phone_number\370\001\001\242\002\003GTP"
+    _globals["DESCRIPTOR"]._serialized_options = (
+        b"\n\017com.google.typeB\020PhoneNumberProtoP\001ZDgoogle.golang.org/genproto/googleapis/type/phone_number;phone_number\370\001\001\242\002\003GTP"
+    )
     _globals["_PHONENUMBER"]._serialized_start = 48
     _globals["_PHONENUMBER"]._serialized_end = 219
     _globals["_PHONENUMBER_SHORTCODE"]._serialized_start = 163
     _globals["_PHONENUMBER_SHORTCODE"]._serialized_end = 211
 # @@protoc_insertion_point(module_scope)
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/google/type/phone_number_pb2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_headers.py	2025-09-21 04:55:30.903244+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_headers.py	2025-09-21 06:01:44.265464+00:00
@@ -131,29 +131,24 @@
     List[Tuple[str, str]],
 ]
 
 
 @overload
-def normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers:
-    ...
+def normalize_and_validate(headers: Headers, _parsed: Literal[True]) -> Headers: ...
 
 
 @overload
-def normalize_and_validate(headers: HeaderTypes, _parsed: Literal[False]) -> Headers:
-    ...
+def normalize_and_validate(headers: HeaderTypes, _parsed: Literal[False]) -> Headers: ...
 
 
 @overload
 def normalize_and_validate(
     headers: Union[Headers, HeaderTypes], _parsed: bool = False
-) -> Headers:
-    ...
-
-
-def normalize_and_validate(
-    headers: Union[Headers, HeaderTypes], _parsed: bool = False
-) -> Headers:
+) -> Headers: ...
+
+
+def normalize_and_validate(headers: Union[Headers, HeaderTypes], _parsed: bool = False) -> Headers:
     new_headers = []
     seen_content_length = None
     saw_transfer_encoding = False
     for name, value in headers:
         # For headers coming out of the parser, we can safely skip some steps,
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_headers.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_readers.py	2025-09-21 04:55:30.903391+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_readers.py	2025-09-21 06:01:44.336629+00:00
@@ -78,16 +78,12 @@
         if buf.is_next_line_obviously_invalid_request_line():
             raise LocalProtocolError("illegal request line")
         return None
     if not lines:
         raise LocalProtocolError("no request line received")
-    matches = validate(
-        request_line_re, lines[0], "illegal request line: {!r}", lines[0]
-    )
-    return Request(
-        headers=list(_decode_header_lines(lines[1:])), _parsed=True, **matches
-    )
+    matches = validate(request_line_re, lines[0], "illegal request line: {!r}", lines[0])
+    return Request(headers=list(_decode_header_lines(lines[1:])), _parsed=True, **matches)
 
 
 status_line_re = re.compile(status_line.encode("ascii"))
 
 
@@ -100,13 +96,11 @@
             raise LocalProtocolError("illegal request line")
         return None
     if not lines:
         raise LocalProtocolError("no response line received")
     matches = validate(status_line_re, lines[0], "illegal status line: {!r}", lines[0])
-    http_version = (
-        b"1.1" if matches["http_version"] is None else matches["http_version"]
-    )
+    http_version = b"1.1" if matches["http_version"] is None else matches["http_version"]
     reason = b"" if matches["reason"] is None else matches["reason"]
     status_code = int(matches["status_code"])
     class_: Union[Type[InformationalResponse], Type[Response]] = (
         InformationalResponse if status_code < 200 else Response
     )
@@ -134,13 +128,11 @@
         return Data(data=data)
 
     def read_eof(self) -> NoReturn:
         raise RemoteProtocolError(
             "peer closed connection without sending complete message body "
-            "(received {} bytes, expected {})".format(
-                self._length - self._remaining, self._length
-            )
+            "(received {} bytes, expected {})".format(self._length - self._remaining, self._length)
         )
 
 
 chunk_header_re = re.compile(chunk_header.encode("ascii"))
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_readers.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_events.py	2025-09-21 04:55:30.903100+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_events.py	2025-09-21 06:01:44.499523+00:00
@@ -90,13 +90,11 @@
     ) -> None:
         super().__init__()
         if isinstance(headers, Headers):
             object.__setattr__(self, "headers", headers)
         else:
-            object.__setattr__(
-                self, "headers", normalize_and_validate(headers, _parsed=_parsed)
-            )
+            object.__setattr__(self, "headers", normalize_and_validate(headers, _parsed=_parsed))
         if not _parsed:
             object.__setattr__(self, "method", bytesify(method))
             object.__setattr__(self, "target", bytesify(target))
             object.__setattr__(self, "http_version", bytesify(http_version))
         else:
@@ -145,13 +143,11 @@
     ) -> None:
         super().__init__()
         if isinstance(headers, Headers):
             object.__setattr__(self, "headers", headers)
         else:
-            object.__setattr__(
-                self, "headers", normalize_and_validate(headers, _parsed=_parsed)
-            )
+            object.__setattr__(self, "headers", normalize_and_validate(headers, _parsed=_parsed))
         if not _parsed:
             object.__setattr__(self, "reason", bytesify(reason))
             object.__setattr__(self, "http_version", bytesify(http_version))
             if not isinstance(status_code, int):
                 raise LocalProtocolError("status code must be integer")
@@ -294,13 +290,11 @@
 
     data: bytes
     chunk_start: bool
     chunk_end: bool
 
-    def __init__(
-        self, data: bytes, chunk_start: bool = False, chunk_end: bool = False
-    ) -> None:
+    def __init__(self, data: bytes, chunk_start: bool = False, chunk_end: bool = False) -> None:
         object.__setattr__(self, "data", data)
         object.__setattr__(self, "chunk_start", chunk_start)
         object.__setattr__(self, "chunk_end", chunk_end)
 
     # This is an unhashable type.
@@ -335,13 +329,11 @@
     headers: Headers
 
     def __init__(
         self,
         *,
-        headers: Union[
-            Headers, List[Tuple[bytes, bytes]], List[Tuple[str, str]], None
-        ] = None,
+        headers: Union[Headers, List[Tuple[bytes, bytes]], List[Tuple[str, str]], None] = None,
         _parsed: bool = False,
     ) -> None:
         super().__init__()
         if headers is None:
             headers = Headers([])
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_events.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_connection.py	2025-09-21 04:55:30.902951+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_connection.py	2025-09-21 06:01:44.611663+00:00
@@ -483,13 +483,11 @@
                 self._process_event(self.their_role, cast(Event, event))
             if event is NEED_DATA:
                 if len(self._receive_buffer) > self._max_incomplete_event_size:
                     # 431 is "Request header fields too large" which is pretty
                     # much the only situation where we can get here
-                    raise RemoteProtocolError(
-                        "Receive buffer too long", error_status_hint=431
-                    )
+                    raise RemoteProtocolError("Receive buffer too long", error_status_hint=431)
                 if self._receive_buffer_closed:
                     # We're still trying to complete some event, but that's
                     # never going to happen because no more data is coming
                     raise RemoteProtocolError("peer unexpectedly closed connection")
             return event
@@ -499,22 +497,19 @@
                 exc._reraise_as_remote_protocol_error()
             else:
                 raise
 
     @overload
-    def send(self, event: ConnectionClosed) -> None:
-        ...
+    def send(self, event: ConnectionClosed) -> None: ...
 
     @overload
     def send(
         self, event: Union[Request, InformationalResponse, Response, Data, EndOfMessage]
-    ) -> bytes:
-        ...
+    ) -> bytes: ...
 
     @overload
-    def send(self, event: Event) -> Optional[bytes]:
-        ...
+    def send(self, event: Event) -> Optional[bytes]: ...
 
     def send(self, event: Event) -> Optional[bytes]:
         """Convert a high-level event into bytes that can be sent to the peer,
         while updating our internal state machine.
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_connection.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_writers.py	2025-09-21 04:55:30.904060+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_writers.py	2025-09-21 06:02:06.141988+00:00
@@ -39,13 +39,11 @@
     write(b"%s %s HTTP/1.1\r\n" % (request.method, request.target))
     write_headers(request.headers, write)
 
 
 # Shared between InformationalResponse and Response
-def write_any_response(
-    response: Union[InformationalResponse, Response], write: Writer
-) -> None:
+def write_any_response(response: Union[InformationalResponse, Response], write: Writer) -> None:
     if response.http_version != b"1.1":
         raise LocalProtocolError("I only send HTTP/1.1")
     status_bytes = str(response.status_code).encode("ascii")
     # We don't bother sending ascii status messages like "OK"; they're
     # optional and ignored by the protocol. (But the space after the numeric
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_writers.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_state.py	2025-09-21 04:55:30.903715+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_state.py	2025-09-21 06:02:07.089166+00:00
@@ -353,13 +353,11 @@
                 # Fixed point reached
                 return
 
     def start_next_cycle(self) -> None:
         if self.states != {CLIENT: DONE, SERVER: DONE}:
-            raise LocalProtocolError(
-                f"not in a reusable state. self.states={self.states}"
-            )
+            raise LocalProtocolError(f"not in a reusable state. self.states={self.states}")
         # Can't reach DONE/DONE with any of these active, but still, let's be
         # sure.
         assert self.keep_alive
         assert not self.pending_switch_proposals
         self.states = {CLIENT: IDLE, SERVER: IDLE}
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/h11/_state.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/__init__.py	2025-09-21 04:55:32.038987+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/__init__.py	2025-09-21 06:02:43.777571+00:00
@@ -51,13 +51,11 @@
     from ._backends.anyio import AnyIOBackend
 except ImportError:  # pragma: nocover
 
     class AnyIOBackend:  # type: ignore
         def __init__(self, *args, **kwargs):  # type: ignore
-            msg = (
-                "Attempted to use 'httpcore.AnyIOBackend' but 'anyio' is not installed."
-            )
+            msg = "Attempted to use 'httpcore.AnyIOBackend' but 'anyio' is not installed."
             raise RuntimeError(msg)
 
 
 # The 'httpcore.TrioBackend' class is conditional on 'trio' being installed.
 try:
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/__init__.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/socks_proxy.py	2025-09-21 04:55:32.042235+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/socks_proxy.py	2025-09-21 06:03:13.116705+00:00
@@ -63,13 +63,11 @@
     response = conn.receive_data(incoming_bytes)
     assert isinstance(response, socksio.socks5.SOCKS5AuthReply)
     if response.method != auth_method:
         requested = AUTH_METHODS.get(auth_method, "UNKNOWN")
         responded = AUTH_METHODS.get(response.method, "UNKNOWN")
-        raise ProxyError(
-            f"Requested {requested} from proxy server, but got {responded}."
-        )
+        raise ProxyError(f"Requested {requested} from proxy server, but got {responded}.")
 
     if response.method == socksio.socks5.SOCKS5AuthMethod.USERNAME_PASSWORD:
         # Username/password request
         assert auth is not None
         username, password = auth
@@ -236,26 +234,22 @@
                         "stream": stream,
                         "host": self._remote_origin.host.decode("ascii"),
                         "port": self._remote_origin.port,
                         "auth": self._proxy_auth,
                     }
-                    async with Trace(
-                        "setup_socks5_connection", logger, request, kwargs
-                    ) as trace:
+                    async with Trace("setup_socks5_connection", logger, request, kwargs) as trace:
                         await _init_socks5_connection(**kwargs)
                         trace.return_value = stream
 
                     # Upgrade the stream to SSL
                     if self._remote_origin.scheme == b"https":
                         ssl_context = (
                             default_ssl_context()
                             if self._ssl_context is None
                             else self._ssl_context
                         )
-                        alpn_protocols = (
-                            ["http/1.1", "h2"] if self._http2 else ["http/1.1"]
-                        )
+                        alpn_protocols = ["http/1.1", "h2"] if self._http2 else ["http/1.1"]
                         ssl_context.set_alpn_protocols(alpn_protocols)
 
                         kwargs = {
                             "ssl_context": ssl_context,
                             "server_hostname": sni_hostname
@@ -267,18 +261,15 @@
                             trace.return_value = stream
 
                     # Determine if we should be using HTTP/1.1 or HTTP/2
                     ssl_object = stream.get_extra_info("ssl_object")
                     http2_negotiated = (
-                        ssl_object is not None
-                        and ssl_object.selected_alpn_protocol() == "h2"
+                        ssl_object is not None and ssl_object.selected_alpn_protocol() == "h2"
                     )
 
                     # Create the HTTP/1.1 or HTTP/2 connection
-                    if http2_negotiated or (
-                        self._http2 and not self._http1
-                    ):  # pragma: nocover
+                    if http2_negotiated or (self._http2 and not self._http1):  # pragma: nocover
                         from .http2 import AsyncHTTP2Connection
 
                         self._connection = AsyncHTTP2Connection(
                             origin=self._remote_origin,
                             stream=stream,
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/socks_proxy.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http_proxy.py	2025-09-21 04:55:32.041872+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http_proxy.py	2025-09-21 06:03:13.220791+00:00
@@ -42,13 +42,11 @@
     """
     default_headers = [] if default_headers is None else list(default_headers)
     override_headers = [] if override_headers is None else list(override_headers)
     has_override = set(key.lower() for key, value in override_headers)
     default_headers = [
-        (key, value)
-        for key, value in default_headers
-        if key.lower() not in has_override
+        (key, value) for key, value in default_headers if key.lower() not in has_override
     ]
     return default_headers + override_headers
 
 
 class AsyncHTTPProxy(AsyncConnectionPool):  # pragma: nocover
@@ -122,13 +120,11 @@
             uds=uds,
             socket_options=socket_options,
         )
 
         self._proxy_url = enforce_url(proxy_url, name="proxy_url")
-        if (
-            self._proxy_url.scheme == b"http" and proxy_ssl_context is not None
-        ):  # pragma: no cover
+        if self._proxy_url.scheme == b"http" and proxy_ssl_context is not None:  # pragma: no cover
             raise RuntimeError(
                 "The `proxy_ssl_context` argument is not allowed for the http scheme"
             )
 
         self._ssl_context = ssl_context
@@ -137,13 +133,11 @@
         if proxy_auth is not None:
             username = enforce_bytes(proxy_auth[0], name="proxy_auth")
             password = enforce_bytes(proxy_auth[1], name="proxy_auth")
             userpass = username + b":" + password
             authorization = b"Basic " + base64.b64encode(userpass)
-            self._proxy_headers = [
-                (b"Proxy-Authorization", authorization)
-            ] + self._proxy_headers
+            self._proxy_headers = [(b"Proxy-Authorization", authorization)] + self._proxy_headers
 
     def create_connection(self, origin: Origin) -> AsyncConnectionInterface:
         if origin.scheme == b"http":
             return AsyncForwardHTTPConnection(
                 proxy_origin=self._proxy_url.origin,
@@ -283,13 +277,11 @@
                     method=b"CONNECT",
                     url=connect_url,
                     headers=connect_headers,
                     extensions=request.extensions,
                 )
-                connect_response = await self._connection.handle_async_request(
-                    connect_request
-                )
+                connect_response = await self._connection.handle_async_request(connect_request)
 
                 if connect_response.status < 200 or connect_response.status > 299:
                     reason_bytes = connect_response.extensions.get("reason_phrase", b"")
                     reason_str = reason_bytes.decode("ascii", errors="ignore")
                     msg = "%d %s" % (connect_response.status, reason_str)
@@ -298,13 +290,11 @@
 
                 stream = connect_response.extensions["network_stream"]
 
                 # Upgrade the stream to SSL
                 ssl_context = (
-                    default_ssl_context()
-                    if self._ssl_context is None
-                    else self._ssl_context
+                    default_ssl_context() if self._ssl_context is None else self._ssl_context
                 )
                 alpn_protocols = ["http/1.1", "h2"] if self._http2 else ["http/1.1"]
                 ssl_context.set_alpn_protocols(alpn_protocols)
 
                 kwargs = {
@@ -317,12 +307,11 @@
                     trace.return_value = stream
 
                 # Determine if we should be using HTTP/1.1 or HTTP/2
                 ssl_object = stream.get_extra_info("ssl_object")
                 http2_negotiated = (
-                    ssl_object is not None
-                    and ssl_object.selected_alpn_protocol() == "h2"
+                    ssl_object is not None and ssl_object.selected_alpn_protocol() == "h2"
                 )
 
                 # Create the HTTP/1.1 or HTTP/2 connection
                 if http2_negotiated or (self._http2 and not self._http1):
                     from .http2 import AsyncHTTP2Connection
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http_proxy.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http11.py	2025-09-21 04:55:32.041486+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http11.py	2025-09-21 06:03:13.343618+00:00
@@ -78,13 +78,11 @@
                 raise ConnectionNotAvailable()
 
         try:
             kwargs = {"request": request}
             try:
-                async with Trace(
-                    "send_request_headers", logger, request, kwargs
-                ) as trace:
+                async with Trace("send_request_headers", logger, request, kwargs) as trace:
                     await self._send_request_headers(**kwargs)
                 async with Trace("send_request_body", logger, request, kwargs) as trace:
                     await self._send_request_body(**kwargs)
             except WriteError:
                 # If we get a write error while we're writing the request,
@@ -92,13 +90,11 @@
                 # read the response. Servers can sometimes close the request
                 # pre-emptively and then respond with a well formed HTTP
                 # error response.
                 pass
 
-            async with Trace(
-                "receive_response_headers", logger, request, kwargs
-            ) as trace:
+            async with Trace("receive_response_headers", logger, request, kwargs) as trace:
                 (
                     http_version,
                     status,
                     reason_phrase,
                     headers,
@@ -112,13 +108,11 @@
                 )
 
             network_stream = self._network_stream
 
             # CONNECT or Upgrade request
-            if (status == 101) or (
-                (request.method == b"CONNECT") and (200 <= status < 300)
-            ):
+            if (status == 101) or ((request.method == b"CONNECT") and (200 <= status < 300)):
                 network_stream = AsyncHTTP11UpgradeStream(network_stream, trailing_data)
 
             return Response(
                 status=status,
                 headers=headers,
@@ -175,14 +169,11 @@
 
         while True:
             event = await self._receive_event(timeout=timeout)
             if isinstance(event, h11.Response):
                 break
-            if (
-                isinstance(event, h11.InformationalResponse)
-                and event.status_code == 101
-            ):
+            if isinstance(event, h11.InformationalResponse) and event.status_code == 101:
                 break
 
         http_version = b"HTTP/" + event.http_version
 
         # h11 version 0.11+ supports a `raw_items` interface to get the
@@ -191,34 +182,28 @@
 
         trailing_data, _ = self._h11_state.trailing_data
 
         return http_version, event.status_code, event.reason, headers, trailing_data
 
-    async def _receive_response_body(
-        self, request: Request
-    ) -> typing.AsyncIterator[bytes]:
+    async def _receive_response_body(self, request: Request) -> typing.AsyncIterator[bytes]:
         timeouts = request.extensions.get("timeout", {})
         timeout = timeouts.get("read", None)
 
         while True:
             event = await self._receive_event(timeout=timeout)
             if isinstance(event, h11.Data):
                 yield bytes(event.data)
             elif isinstance(event, (h11.EndOfMessage, h11.PAUSED)):
                 break
 
-    async def _receive_event(
-        self, timeout: float | None = None
-    ) -> h11.Event | type[h11.PAUSED]:
+    async def _receive_event(self, timeout: float | None = None) -> h11.Event | type[h11.PAUSED]:
         while True:
             with map_exceptions({h11.RemoteProtocolError: RemoteProtocolError}):
                 event = self._h11_state.next_event()
 
             if event is h11.NEED_DATA:
-                data = await self._network_stream.read(
-                    self.READ_NUM_BYTES, timeout=timeout
-                )
+                data = await self._network_stream.read(self.READ_NUM_BYTES, timeout=timeout)
 
                 # If we feed this case through h11 we'll raise an exception like:
                 #
                 #     httpcore.RemoteProtocolError: can't handle event type
                 #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE
@@ -235,14 +220,11 @@
                 # mypy fails to narrow the type in the above if statement above
                 return event  # type: ignore[return-value]
 
     async def _response_closed(self) -> None:
         async with self._state_lock:
-            if (
-                self._h11_state.our_state is h11.DONE
-                and self._h11_state.their_state is h11.DONE
-            ):
+            if self._h11_state.our_state is h11.DONE and self._h11_state.their_state is h11.DONE:
                 self._state = HTTPConnectionState.IDLE
                 self._h11_state.start_next_cycle()
                 if self._keepalive_expiry is not None:
                     now = time.monotonic()
                     self._expire_at = now + self._keepalive_expiry
@@ -291,14 +273,11 @@
     def is_closed(self) -> bool:
         return self._state == HTTPConnectionState.CLOSED
 
     def info(self) -> str:
         origin = str(self._origin)
-        return (
-            f"{origin!r}, HTTP/1.1, {self._state.name}, "
-            f"Request Count: {self._request_count}"
-        )
+        return f"{origin!r}, HTTP/1.1, {self._state.name}, " f"Request Count: {self._request_count}"
 
     def __repr__(self) -> str:
         class_name = self.__class__.__name__
         origin = str(self._origin)
         return (
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http11.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/connection.py	2025-09-21 04:55:32.041107+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/connection.py	2025-09-21 06:03:13.518734+00:00
@@ -77,12 +77,11 @@
                 if self._connection is None:
                     stream = await self._connect(request)
 
                     ssl_object = stream.get_extra_info("ssl_object")
                     http2_negotiated = (
-                        ssl_object is not None
-                        and ssl_object.selected_alpn_protocol() == "h2"
+                        ssl_object is not None and ssl_object.selected_alpn_protocol() == "h2"
                     )
                     if http2_negotiated or (self._http2 and not self._http1):
                         from .http2 import AsyncHTTP2Connection
 
                         self._connection = AsyncHTTP2Connection(
@@ -127,31 +126,24 @@
                     kwargs = {
                         "path": self._uds,
                         "timeout": timeout,
                         "socket_options": self._socket_options,
                     }
-                    async with Trace(
-                        "connect_unix_socket", logger, request, kwargs
-                    ) as trace:
-                        stream = await self._network_backend.connect_unix_socket(
-                            **kwargs
-                        )
+                    async with Trace("connect_unix_socket", logger, request, kwargs) as trace:
+                        stream = await self._network_backend.connect_unix_socket(**kwargs)
                         trace.return_value = stream
 
                 if self._origin.scheme in (b"https", b"wss"):
                     ssl_context = (
-                        default_ssl_context()
-                        if self._ssl_context is None
-                        else self._ssl_context
+                        default_ssl_context() if self._ssl_context is None else self._ssl_context
                     )
                     alpn_protocols = ["http/1.1", "h2"] if self._http2 else ["http/1.1"]
                     ssl_context.set_alpn_protocols(alpn_protocols)
 
                     kwargs = {
                         "ssl_context": ssl_context,
-                        "server_hostname": sni_hostname
-                        or self._origin.host.decode("ascii"),
+                        "server_hostname": sni_hostname or self._origin.host.decode("ascii"),
                         "timeout": timeout,
                     }
                     async with Trace("start_tls", logger, request, kwargs) as trace:
                         stream = await stream.start_tls(**kwargs)
                         trace.return_value = stream
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/connection.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http2.py	2025-09-21 04:55:32.041638+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http2.py	2025-09-21 06:03:13.546450+00:00
@@ -103,13 +103,11 @@
 
         async with self._init_lock:
             if not self._sent_connection_init:
                 try:
                     sci_kwargs = {"request": request}
-                    async with Trace(
-                        "send_connection_init", logger, request, sci_kwargs
-                    ):
+                    async with Trace("send_connection_init", logger, request, sci_kwargs):
                         await self._send_connection_init(**sci_kwargs)
                 except BaseException as exc:
                     with AsyncShieldCancellation():
                         await self.aclose()
                     raise exc
@@ -118,13 +116,11 @@
 
                 # Initially start with just 1 until the remote server provides
                 # its max_concurrent_streams value
                 self._max_streams = 1
 
-                local_settings_max_streams = (
-                    self._h2_state.local_settings.max_concurrent_streams
-                )
+                local_settings_max_streams = self._h2_state.local_settings.max_concurrent_streams
                 self._max_streams_semaphore = AsyncSemaphore(local_settings_max_streams)
 
                 for _ in range(local_settings_max_streams - self._max_streams):
                     await self._max_streams_semaphore.acquire()
 
@@ -142,16 +138,12 @@
             kwargs = {"request": request, "stream_id": stream_id}
             async with Trace("send_request_headers", logger, request, kwargs):
                 await self._send_request_headers(request=request, stream_id=stream_id)
             async with Trace("send_request_body", logger, request, kwargs):
                 await self._send_request_body(request=request, stream_id=stream_id)
-            async with Trace(
-                "receive_response_headers", logger, request, kwargs
-            ) as trace:
-                status, headers = await self._receive_response(
-                    request=request, stream_id=stream_id
-                )
+            async with Trace("receive_response_headers", logger, request, kwargs) as trace:
+                status, headers = await self._receive_response(request=request, stream_id=stream_id)
                 trace.return_value = (status, headers)
 
             return Response(
                 status=status,
                 headers=headers,
@@ -207,13 +199,11 @@
         )
 
         # Some websites (*cough* Yahoo *cough*) balk at this setting being
         # present in the initial handshake since it's not defined in the original
         # RFC despite the RFC mandating ignoring settings you don't know about.
-        del self._h2_state.local_settings[
-            h2.settings.SettingCodes.ENABLE_CONNECT_PROTOCOL
-        ]
+        del self._h2_state.local_settings[h2.settings.SettingCodes.ENABLE_CONNECT_PROTOCOL]
 
         self._h2_state.initiate_connection()
         self._h2_state.increment_flow_control_window(2**24)
         await self._write_outgoing_data(request)
 
@@ -260,13 +250,11 @@
         assert isinstance(request.stream, typing.AsyncIterable)
         async for data in request.stream:
             await self._send_stream_data(request, stream_id, data)
         await self._send_end_stream(request, stream_id)
 
-    async def _send_stream_data(
-        self, request: Request, stream_id: int, data: bytes
-    ) -> None:
+    async def _send_stream_data(self, request: Request, stream_id: int, data: bytes) -> None:
         """
         Send a single chunk of data in one or more data frames.
         """
         while data:
             max_flow = await self._wait_for_outgoing_flow(request, stream_id)
@@ -337,13 +325,11 @@
         event = self._events[stream_id].pop(0)
         if isinstance(event, h2.events.StreamReset):
             raise RemoteProtocolError(event)
         return event
 
-    async def _receive_events(
-        self, request: Request, stream_id: int | None = None
-    ) -> None:
+    async def _receive_events(self, request: Request, stream_id: int | None = None) -> None:
         """
         Read some data from the network until we see one or more events
         for a given stream ID.
         """
         async with self._read_lock:
@@ -362,13 +348,11 @@
             # pending for the stream ID we're attempting to send on.
             if stream_id is None or not self._events.get(stream_id):
                 events = await self._read_incoming_data(request)
                 for event in events:
                     if isinstance(event, h2.events.RemoteSettingsChanged):
-                        async with Trace(
-                            "receive_remote_settings", logger, request
-                        ) as trace:
+                        async with Trace("receive_remote_settings", logger, request) as trace:
                             await self._receive_remote_settings_change(event)
                             trace.return_value = event
 
                     elif isinstance(
                         event,
@@ -385,13 +369,11 @@
                     elif isinstance(event, h2.events.ConnectionTerminated):
                         self._connection_terminated = event
 
         await self._write_outgoing_data(request)
 
-    async def _receive_remote_settings_change(
-        self, event: h2.events.RemoteSettingsChanged
-    ) -> None:
+    async def _receive_remote_settings_change(self, event: h2.events.RemoteSettingsChanged) -> None:
         max_concurrent_streams = event.changed_settings.get(
             h2.settings.SettingCodes.MAX_CONCURRENT_STREAMS
         )
         if max_concurrent_streams:
             new_max_streams = min(
@@ -511,14 +493,11 @@
     def is_available(self) -> bool:
         return (
             self._state != HTTPConnectionState.CLOSED
             and not self._connection_error
             and not self._used_all_stream_ids
-            and not (
-                self._h2_state.state_machine.state
-                == h2.connection.ConnectionState.CLOSED
-            )
+            and not (self._h2_state.state_machine.state == h2.connection.ConnectionState.CLOSED)
         )
 
     def has_expired(self) -> bool:
         now = time.monotonic()
         return self._expire_at is not None and now > self._expire_at
@@ -529,14 +508,11 @@
     def is_closed(self) -> bool:
         return self._state == HTTPConnectionState.CLOSED
 
     def info(self) -> str:
         origin = str(self._origin)
-        return (
-            f"{origin!r}, HTTP/2, {self._state.name}, "
-            f"Request Count: {self._request_count}"
-        )
+        return f"{origin!r}, HTTP/2, {self._state.name}, " f"Request Count: {self._request_count}"
 
     def __repr__(self) -> str:
         class_name = self.__class__.__name__
         origin = str(self._origin)
         return (
@@ -558,13 +534,11 @@
     ) -> None:
         await self.aclose()
 
 
 class HTTP2ConnectionByteStream:
-    def __init__(
-        self, connection: AsyncHTTP2Connection, request: Request, stream_id: int
-    ) -> None:
+    def __init__(self, connection: AsyncHTTP2Connection, request: Request, stream_id: int) -> None:
         self._connection = connection
         self._request = request
         self._stream_id = stream_id
         self._closed = False
 
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/http2.py
--- /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/connection_pool.py	2025-09-21 04:55:32.041248+00:00
+++ /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/connection_pool.py	2025-09-21 06:03:13.566294+00:00
@@ -26,13 +26,11 @@
 
     def clear_connection(self) -> None:
         self.connection = None
         self._connection_acquired = AsyncEvent()
 
-    async def wait_for_connection(
-        self, timeout: float | None = None
-    ) -> AsyncConnectionInterface:
+    async def wait_for_connection(self, timeout: float | None = None) -> AsyncConnectionInterface:
         if self.connection is None:
             await self._connection_acquired.wait(timeout=timeout)
         assert self.connection is not None
         return self.connection
 
@@ -89,17 +87,13 @@
             socket_options: Socket options that have to be included
              in the TCP socket when the connection was established.
         """
         self._ssl_context = ssl_context
         self._proxy = proxy
-        self._max_connections = (
-            sys.maxsize if max_connections is None else max_connections
-        )
+        self._max_connections = sys.maxsize if max_connections is None else max_connections
         self._max_keepalive_connections = (
-            sys.maxsize
-            if max_keepalive_connections is None
-            else max_keepalive_connections
+            sys.maxsize if max_keepalive_connections is None else max_keepalive_connections
         )
         self._max_keepalive_connections = min(
             self._max_connections, self._max_keepalive_connections
         )
 
@@ -108,13 +102,11 @@
         self._http2 = http2
         self._retries = retries
         self._local_address = local_address
         self._uds = uds
 
-        self._network_backend = (
-            AutoBackend() if network_backend is None else network_backend
-        )
+        self._network_backend = AutoBackend() if network_backend is None else network_backend
         self._socket_options = socket_options
 
         # The mutable state on a connection pool is the queue of incoming requests,
         # and the set of connections that are servicing those requests.
         self._connections: list[AsyncConnectionInterface] = []
@@ -202,17 +194,13 @@
 
         This is the core implementation that is called into by `.request()` or `.stream()`.
         """
         scheme = request.url.scheme.decode()
         if scheme == "":
-            raise UnsupportedProtocol(
-                "Request URL is missing an 'http://' or 'https://' protocol."
-            )
+            raise UnsupportedProtocol("Request URL is missing an 'http://' or 'https://' protocol.")
         if scheme not in ("http", "https", "ws", "wss"):
-            raise UnsupportedProtocol(
-                f"Request URL has an unsupported protocol '{scheme}://'."
-            )
+            raise UnsupportedProtocol(f"Request URL has an unsupported protocol '{scheme}://'.")
 
         timeouts = request.extensions.get("timeout", {})
         timeout = timeouts.get("pool", None)
 
         with self._optional_thread_lock:
@@ -231,13 +219,11 @@
                 # Wait until this request has an assigned connection.
                 connection = await pool_request.wait_for_connection(timeout=timeout)
 
                 try:
                     # Send the request on the assigned connection.
-                    response = await connection.handle_async_request(
-                        pool_request.request
-                    )
+                    response = await connection.handle_async_request(pool_request.request)
                 except ConnectionNotAvailable:
                     # In some cases a connection may initially be available to
                     # handle a request, but then become unavailable.
                     #
                     # In this case we clear the connection and try again.
@@ -259,13 +245,11 @@
         # the point at which the response is closed.
         assert isinstance(response.stream, typing.AsyncIterable)
         return Response(
             status=response.status,
             headers=response.headers,
-            content=PoolByteStream(
-                stream=response.stream, pool_request=pool_request, pool=self
-            ),
+            content=PoolByteStream(stream=response.stream, pool_request=pool_request, pool=self),
             extensions=response.extensions,
         )
 
     def _assign_requests_to_connections(self) -> list[AsyncConnectionInterface]:
         """
@@ -365,22 +349,18 @@
 
     def __repr__(self) -> str:
         class_name = self.__class__.__name__
         with self._optional_thread_lock:
             request_is_queued = [request.is_queued() for request in self._requests]
-            connection_is_idle = [
-                connection.is_idle() for connection in self._connections
-            ]
+            connection_is_idle = [connection.is_idle() for connection in self._connections]
 
             num_active_requests = request_is_queued.count(False)
             num_queued_requests = request_is_queued.count(True)
             num_active_connections = connection_is_idle.count(False)
             num_idle_connections = connection_is_idle.count(True)
 
-        requests_info = (
-            f"Requests: {num_active_requests} active, {num_queued_requests} queued"
-        )
+        requests_info = f"Requests: {num_active_requests} active, {num_queued_requests} queued"
         connection_info = (
             f"Connections: {num_active_connections} active, {num_idle_connections} idle"
         )
 
         return f"<{class_name} [{requests_info} | {connection_info}]>"
would reformat /Users/thomasbrianreynolds/Library/CloudStorage/GoogleDrive-brianinpty@gmail.com/My Drive/online production/debug_agent_env/lib/python3.13/site-packages/httpcore/_async/connection_pool.py
Aborted!

Aborted!
Exception ignored on threading shutdown:
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/threading.py", line 1536, in _shutdown
    atexit_call()
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/threading.py", line 1507, in <lambda>
    _threading_atexits.append(lambda: func(*arg, **kwargs))
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 106, in _python_exit
    t.join()
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/threading.py", line 1094, in join
    self._handle.join(timeout)
KeyboardInterrupt: 
Exception ignored in atexit callback <function _exit_function at 0x110253d80>:
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/util.py", line 424, in _exit_function
Process SpawnProcess-8:
Process SpawnProcess-9:
Process SpawnProcess-7:
Process SpawnProcess-5:
Process SpawnProcess-6:
Process SpawnProcess-3:
Process SpawnProcess-4:
Process SpawnProcess-2:
    p.join()
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 149, in join
    res = self._popen.wait(timeout)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/popen_fork.py", line 44, in wait
    return self.poll(os.WNOHANG if timeout == 0.0 else 0)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/popen_fork.py", line 28, in poll
    pid, sts = os.waitpid(self.pid, flag)
KeyboardInterrupt: 
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 100, in get
    with self._rlock:
         ^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
           ~~~~~~~~~~~~~~~~~~~~~~~^^
KeyboardInterrupt
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 313, in _bootstrap
    self.run()
    ~~~~~~~~^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/concurrent/futures/process.py", line 242, in _process_worker
    call_item = call_queue.get(block=True)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/queues.py", line 101, in get
    res = self._recv_bytes()
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/connection.py", line 430, in _recv_bytes
    buf = self._recv(4)
  File "/opt/homebrew/Cellar/python@3.13/3.13.7/Frameworks/Python.framework/Versions/3.13/lib/python3.13/multiprocessing/connection.py", line 395, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
