[tool:pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output and reporting
addopts =
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=backend
    --cov=app
    --cov-report=html:tests/coverage_html
    --cov-report=xml:tests/coverage.xml
    --cov-report=term-missing
    --html=tests/report.html
    --self-contained-html
    --junitxml=tests/junit.xml

# Markers for test categorization
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    smoke: Smoke tests for basic functionality
    performance: Performance and load tests
    security: Security-related tests
    slow: Tests that take a long time to run
    fast: Quick tests for rapid feedback
    api: API endpoint tests
    ui: User interface tests
    database: Database-related tests
    external: Tests that require external services
    mock: Tests using mocked dependencies
    real: Tests using real services
    critical: Critical path tests
    regression: Regression tests
    content: Content generation tests
    marketing: Marketing functionality tests
    monetization: Monetization feature tests
    video: Video generation tests
    analytics: Analytics and reporting tests
    auth: Authentication and authorization tests
    upload: File upload tests
    download: File download tests
    streaming: Streaming functionality tests
    realtime: Real-time feature tests
    batch: Batch processing tests
    scheduled: Scheduled task tests
    notification: Notification system tests
    backup: Backup and recovery tests
    migration: Data migration tests
    deployment: Deployment-related tests
    monitoring: Monitoring and alerting tests
    compliance: Compliance and audit tests

# Test execution
minversion = 7.0
required_plugins =
    pytest-asyncio>=0.21.0
    pytest-cov>=4.1.0
    pytest-html>=3.2.0
    pytest-xdist>=3.3.0

# Async configuration
asyncio_mode = auto

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:requests.*
    ignore::UserWarning:urllib3.*

# Test timeout (in seconds)
timeout = 300

# Parallel execution
# Uncomment to run tests in parallel
# -n auto

# Log configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging
log_file = tests/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Auto-use fixtures
usefixtures =
    setup_test_environment
    cleanup_test_data

# Test collection
collect_ignore = [
    "setup.py",
    "conftest.py",
    "__pycache__",
    ".git",
    ".pytest_cache",
    "node_modules",
    "venv",
    "env",
    ".env"

# Doctest configuration
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL

# Cache configuration
cache_dir = .pytest_cache

# Test order randomization (install pytest-randomly if needed)
# randomly-seed = 12345

# Coverage configuration (handled by pytest-cov)
# Use: pytest --cov=backend --cov=app --cov-report=html
# Coverage options are passed via command line or separate .coveragerc file
directory = tests/coverage_html

[coverage:xml]
output = tests/coverage.xml
