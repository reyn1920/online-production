{
  "timestamp": "2025-09-19T03:39:44.260824",
  "summary": {
    "total_functions_analyzed": 175,
    "functions_with_tests": 9,
    "functions_with_issues": 166,
    "coverage_score": 5.142857142857142
  },
  "function_analysis": [
    {
      "function_name": "hash_password",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "hash_password",
          "args": [
            "password"
          ],
          "line_start": 85,
          "line_end": 88,
          "docstring": "Hash a password using bcrypt."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_password_hashing",
          "test_file": "test_services.py",
          "line_number": 93,
          "assertions": []
        },
        {
          "test_name": "test_password_hashing",
          "test_file": "test_services_simple.py",
          "line_number": 75,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "verify_password",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "verify_password",
          "args": [
            "password",
            "password_hash"
          ],
          "line_start": 91,
          "line_end": 93,
          "docstring": "Verify a password against its hash."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_password_hashing",
          "test_file": "test_services.py",
          "line_number": 93,
          "assertions": []
        },
        {
          "test_name": "test_password_hashing",
          "test_file": "test_services_simple.py",
          "line_number": 75,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "generate_secure_token",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "generate_secure_token",
          "args": [],
          "line_start": 96,
          "line_end": 98,
          "docstring": "Generate a secure random token."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "secret_key",
            "algorithm"
          ],
          "line_start": 103,
          "line_end": 105,
          "docstring": ""
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_token",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_token",
          "args": [
            "self",
            "user_id",
            "role",
            "expires_in_hours"
          ],
          "line_start": 107,
          "line_end": 115,
          "docstring": "Create a JWT token for a user."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "verify_token",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "verify_token",
          "args": [
            "self",
            "token"
          ],
          "line_start": 117,
          "line_end": 127,
          "docstring": "Verify and decode a JWT token."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "secret_key",
            "algorithm"
          ],
          "line_start": 103,
          "line_end": 105,
          "docstring": ""
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_session",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_session",
          "args": [
            "self",
            "user_id",
            "ip_address",
            "user_agent",
            "expires_in_hours"
          ],
          "line_start": 135,
          "line_end": 148,
          "docstring": "Create a new user session."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_session",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_session",
          "args": [
            "self",
            "session_id"
          ],
          "line_start": 150,
          "line_end": 155,
          "docstring": "Get a session by ID."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "invalidate_session",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "invalidate_session",
          "args": [
            "self",
            "session_id"
          ],
          "line_start": 157,
          "line_end": 162,
          "docstring": "Invalidate a session."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "cleanup_expired_sessions",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "cleanup_expired_sessions",
          "args": [
            "self"
          ],
          "line_start": 164,
          "line_end": 172,
          "docstring": "Remove expired sessions."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "secret_key",
            "algorithm"
          ],
          "line_start": 103,
          "line_end": 105,
          "docstring": ""
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_user",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_user",
          "args": [
            "self",
            "username",
            "email",
            "password",
            "role"
          ],
          "line_start": 182,
          "line_end": 204,
          "docstring": "Create a new user account."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_user_by_id",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_user_by_id",
          "args": [
            "self",
            "user_id"
          ],
          "line_start": 206,
          "line_end": 208,
          "docstring": "Get a user by ID."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_user_by_email",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_user_by_email",
          "args": [
            "self",
            "email"
          ],
          "line_start": 210,
          "line_end": 213,
          "docstring": "Get a user by email."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "update_user_role",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "update_user_role",
          "args": [
            "self",
            "user_id",
            "new_role"
          ],
          "line_start": 215,
          "line_end": 222,
          "docstring": "Update a user's role."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "lock_user_account",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "lock_user_account",
          "args": [
            "self",
            "user_id",
            "lock_duration_hours"
          ],
          "line_start": 224,
          "line_end": 229,
          "docstring": "Lock a user account temporarily."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "is_account_locked",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "is_account_locked",
          "args": [
            "self",
            "user"
          ],
          "line_start": 231,
          "line_end": 235,
          "docstring": "Check if a user account is locked."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "secret_key",
            "algorithm"
          ],
          "line_start": 103,
          "line_end": 105,
          "docstring": ""
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "verify_token",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "verify_token",
          "args": [
            "self",
            "token"
          ],
          "line_start": 117,
          "line_end": 127,
          "docstring": "Verify and decode a JWT token."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "logout",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "logout",
          "args": [
            "self",
            "session_id"
          ],
          "line_start": 306,
          "line_end": 308,
          "docstring": "Log out a user by invalidating their session."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "require_role",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "require_role",
          "args": [
            "self",
            "required_role"
          ],
          "line_start": 310,
          "line_end": 319,
          "docstring": "Decorator to require a specific role for access."
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "decorator",
      "file_path": "auth.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "decorator",
          "args": [
            "func"
          ],
          "line_start": 312,
          "line_end": 318,
          "docstring": ""
        },
        "file_complexity": 17,
        "file_imports": [
          "secrets",
          "jwt",
          "datetime",
          "dataclasses",
          "enum",
          "bcrypt",
          "asyncio",
          "functools",
          "logging",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "gensalt",
          "decode",
          "hashpw",
          "encode",
          "checkpw",
          "encode",
          "encode",
          "token_urlsafe",
          "utcnow",
          "timedelta",
          "utcnow",
          "encode",
          "decode",
          "warning",
          "warning",
          "token_urlsafe",
          "Session",
          "now",
          "now",
          "timedelta",
          "get",
          "now",
          "now",
          "items",
          "PasswordManager",
          "ValueError",
          "token_urlsafe",
          "hash_password",
          "User",
          "now",
          "info",
          "get",
          "get",
          "get",
          "get_user_by_id",
          "info",
          "get_user_by_id",
          "now",
          "timedelta",
          "warning",
          "now",
          "UserManager",
          "SessionManager",
          "JWTManager",
          "PasswordManager",
          "get_user_by_email",
          "AuthResult",
          "AuthResult",
          "is_account_locked",
          "AuthResult",
          "verify_password",
          "lock_user_account",
          "AuthResult",
          "now",
          "create_session",
          "create_token",
          "info",
          "AuthResult",
          "verify_token",
          "get_user_by_id",
          "invalidate_session",
          "func",
          "wraps",
          "cleanup_expired_sessions",
          "info",
          "AuthenticationSystem",
          "create_user",
          "authenticate",
          "print",
          "print",
          "print",
          "verify_token",
          "print",
          "print",
          "cleanup_expired_data",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "max_values_per_metric"
          ],
          "line_start": 142,
          "line_end": 144,
          "docstring": ""
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "max_values_per_metric"
          ],
          "line_start": 142,
          "line_end": 144,
          "docstring": ""
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "max_values_per_metric"
          ],
          "line_start": 142,
          "line_end": 144,
          "docstring": ""
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "register_metric",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "register_metric",
          "args": [
            "self",
            "config"
          ],
          "line_start": 317,
          "line_end": 325,
          "docstring": "Register a new metric."
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_metric",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_metric",
          "args": [
            "self",
            "name"
          ],
          "line_start": 327,
          "line_end": 329,
          "docstring": "Get a registered metric by name."
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_counter",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_counter",
          "args": [
            "self",
            "name",
            "description",
            "tags"
          ],
          "line_start": 364,
          "line_end": 373,
          "docstring": "Create and register a counter metric."
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_gauge",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_gauge",
          "args": [
            "self",
            "name",
            "description",
            "unit",
            "tags"
          ],
          "line_start": 375,
          "line_end": 384,
          "docstring": "Create and register a gauge metric."
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_timer",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_timer",
          "args": [
            "self",
            "name",
            "description",
            "tags"
          ],
          "line_start": 386,
          "line_end": 395,
          "docstring": "Create and register a timer metric."
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_standard_metrics",
      "file_path": "metrics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_standard_metrics",
          "args": [],
          "line_start": 495,
          "line_end": 511,
          "docstring": "Create a set of standard application metrics."
        },
        "file_complexity": 36,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "time",
          "datetime",
          "enum",
          "collections",
          "threading",
          "abc",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "RLock",
          "append",
          "error",
          "append",
          "sorted",
          "error",
          "list",
          "keys",
          "now",
          "update",
          "update",
          "MetricValue",
          "now",
          "store_metric",
          "_check_thresholds",
          "debug",
          "error",
          "error",
          "warning",
          "record",
          "warning",
          "record",
          "warning",
          "operation",
          "time",
          "iscoroutinefunction",
          "operation",
          "operation",
          "time",
          "record",
          "time",
          "copy",
          "str",
          "type",
          "record",
          "get",
          "warning",
          "get",
          "info",
          "get_metrics",
          "len",
          "min",
          "max",
          "mean",
          "sum",
          "isoformat",
          "len",
          "median",
          "stdev",
          "InMemoryMetricStorage",
          "warning",
          "Metric",
          "info",
          "get",
          "get_metric",
          "record",
          "warning",
          "get_metric",
          "increment",
          "warning",
          "get_metric",
          "set_gauge",
          "warning",
          "get_metric",
          "time_operation",
          "warning",
          "iscoroutinefunction",
          "operation",
          "operation",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "MetricConfig",
          "register_metric",
          "len",
          "now",
          "timedelta",
          "items",
          "get_statistics",
          "isoformat",
          "get_all_metrics_summary",
          "lower",
          "dumps",
          "append",
          "items",
          "append",
          "append",
          "append",
          "append",
          "append",
          "join",
          "create_task",
          "_aggregation_loop",
          "info",
          "cancel",
          "info",
          "_cleanup_old_metrics",
          "sleep",
          "error",
          "sleep",
          "debug",
          "MetricsCollector",
          "increment_counter",
          "set_gauge",
          "time_operation",
          "create_counter",
          "create_counter",
          "create_timer",
          "create_gauge",
          "create_gauge",
          "create_counter",
          "create_counter",
          "create_gauge",
          "info",
          "create_standard_metrics",
          "start_background_tasks",
          "increment",
          "increment",
          "gauge",
          "gauge",
          "sleep",
          "timer",
          "print",
          "get_all_metrics_summary",
          "print",
          "dumps",
          "export_metrics",
          "print",
          "stop_background_tasks",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 121,
          "line_end": 124,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 121,
          "line_end": 124,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_data",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_data",
          "args": [
            "self"
          ],
          "line_start": 232,
          "line_end": 234,
          "docstring": "Get current widget data."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_summary",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_summary",
          "args": [
            "self"
          ],
          "line_start": 236,
          "line_end": 248,
          "docstring": "Get widget data summary."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 121,
          "line_end": 124,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_widget",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_widget",
          "args": [
            "self",
            "widget"
          ],
          "line_start": 259,
          "line_end": 262,
          "docstring": "Add a widget to the dashboard."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "remove_widget",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "remove_widget",
          "args": [
            "self",
            "widget_id"
          ],
          "line_start": 264,
          "line_end": 270,
          "docstring": "Remove a widget from the dashboard."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_layout",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_layout",
          "args": [
            "self"
          ],
          "line_start": 291,
          "line_end": 311,
          "docstring": "Get dashboard layout information."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 121,
          "line_end": 124,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "register_data_source",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "register_data_source",
          "args": [
            "self",
            "config"
          ],
          "line_start": 322,
          "line_end": 338,
          "docstring": "Register a new data source."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_dashboard",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_dashboard",
          "args": [
            "self",
            "dashboard_id"
          ],
          "line_start": 361,
          "line_end": 366,
          "docstring": "Get a dashboard by ID."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_dashboard_list",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_dashboard_list",
          "args": [
            "self"
          ],
          "line_start": 390,
          "line_end": 403,
          "docstring": "Get list of all dashboards."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_widget_template",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_widget_template",
          "args": [
            "self",
            "template_id",
            "config"
          ],
          "line_start": 412,
          "line_end": 415,
          "docstring": "Create a reusable widget template."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_widget_template",
      "file_path": "dashboard_integration.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_widget_template",
          "args": [
            "self",
            "template_id"
          ],
          "line_start": 417,
          "line_end": 419,
          "docstring": "Get a widget template by ID."
        },
        "file_complexity": 24,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "enum",
          "abc",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "range",
          "append",
          "DataPoint",
          "now",
          "timedelta",
          "error",
          "now",
          "get",
          "get",
          "fetch_data",
          "now",
          "info",
          "len",
          "error",
          "refresh_data",
          "sleep",
          "create_task",
          "refresh_loop",
          "cancel",
          "isinstance",
          "len",
          "sum",
          "len",
          "isoformat",
          "now",
          "now",
          "info",
          "info",
          "values",
          "append",
          "refresh_data",
          "gather",
          "info",
          "values",
          "start_auto_refresh",
          "values",
          "stop_auto_refresh",
          "values",
          "get_summary",
          "append",
          "APIDataSource",
          "DatabaseDataSource",
          "APIDataSource",
          "info",
          "error",
          "Dashboard",
          "get",
          "Widget",
          "add_widget",
          "warning",
          "info",
          "error",
          "get",
          "now",
          "get_dashboard",
          "refresh_all_widgets",
          "values",
          "start_auto_refresh",
          "info",
          "values",
          "stop_auto_refresh",
          "info",
          "values",
          "len",
          "isoformat",
          "isoformat",
          "append",
          "items",
          "test_connection",
          "info",
          "get",
          "DashboardIntegration",
          "DataSourceConfig",
          "DataSourceConfig",
          "register_data_source",
          "register_data_source",
          "WidgetConfig",
          "WidgetConfig",
          "DashboardConfig",
          "create_dashboard",
          "print",
          "refresh_dashboard",
          "get_layout",
          "print",
          "dumps",
          "test_all_data_sources",
          "print",
          "start_all_dashboards",
          "sleep",
          "stop_all_dashboards",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 100,
          "line_end": 104,
          "docstring": ""
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 100,
          "line_end": 104,
          "docstring": ""
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 100,
          "line_end": 104,
          "docstring": ""
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 100,
          "line_end": 104,
          "docstring": ""
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_route",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_route",
          "args": [
            "self",
            "source_service",
            "target_services"
          ],
          "line_start": 266,
          "line_end": 268,
          "docstring": "Add a routing rule."
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_message_handler",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_message_handler",
          "args": [
            "self",
            "service_id",
            "handler"
          ],
          "line_start": 270,
          "line_end": 272,
          "docstring": "Add a message handler for a service."
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 100,
          "line_end": 104,
          "docstring": ""
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "register_service",
      "file_path": "bridge_to_system.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "register_service",
          "args": [
            "self",
            "config"
          ],
          "line_start": 307,
          "line_end": 323,
          "docstring": "Register a new service with the bridge."
        },
        "file_complexity": 29,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "dataclasses",
          "enum",
          "aiohttp",
          "websockets",
          "abc",
          "uuid",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "__init__",
          "super",
          "ClientSession",
          "ClientTimeout",
          "info",
          "error",
          "close",
          "update",
          "post",
          "asdict",
          "json",
          "Message",
          "str",
          "uuid4",
          "now",
          "error",
          "time",
          "get",
          "time",
          "time",
          "ServiceHealth",
          "now",
          "__init__",
          "super",
          "connect",
          "info",
          "error",
          "close",
          "send",
          "dumps",
          "asdict",
          "error",
          "ServiceHealth",
          "now",
          "get",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "append",
          "MessageRouter",
          "Queue",
          "HTTPConnector",
          "WebSocketConnector",
          "HTTPConnector",
          "info",
          "error",
          "items",
          "connect",
          "error",
          "items",
          "disconnect",
          "error",
          "get",
          "error",
          "send_message",
          "items",
          "send_message",
          "append",
          "get",
          "health_check",
          "items",
          "health_check",
          "get_all_service_health",
          "items",
          "warning",
          "sleep",
          "error",
          "sleep",
          "create_task",
          "monitor",
          "cancel",
          "wait_for",
          "get",
          "route_message",
          "error",
          "SystemBridge",
          "ServiceConfig",
          "ServiceConfig",
          "register_service",
          "register_service",
          "connect_all_services",
          "print",
          "Message",
          "str",
          "uuid4",
          "now",
          "send_message",
          "print",
          "get_all_service_health",
          "items",
          "print",
          "start_health_monitoring",
          "sleep",
          "stop_health_monitoring",
          "disconnect_all_services",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "action_id",
            "action_type",
            "handler",
            "description",
            "metadata"
          ],
          "line_start": 63,
          "line_end": 79,
          "docstring": "Initialize an action"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "to_dict",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "line_start": 102,
          "line_end": 113,
          "docstring": "Convert action to dictionary"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "action_id",
            "action_type",
            "handler",
            "description",
            "metadata"
          ],
          "line_start": 63,
          "line_end": 79,
          "docstring": "Initialize an action"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_action",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_action",
          "args": [
            "self",
            "action_id"
          ],
          "line_start": 199,
          "line_end": 201,
          "docstring": "Get an action by ID"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "list_actions",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "list_actions",
          "args": [
            "self"
          ],
          "line_start": 203,
          "line_end": 205,
          "docstring": "List all registered actions"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_action_history",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_action_history",
          "args": [
            "self",
            "limit"
          ],
          "line_start": 207,
          "line_end": 209,
          "docstring": "Get action execution history"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_action_registry",
      "file_path": "actions.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_action_registry",
          "args": [],
          "line_start": 248,
          "line_end": 250,
          "docstring": "Get the global action registry instance"
        },
        "file_complexity": 6,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "now",
          "iscoroutinefunction",
          "handler",
          "handler",
          "info",
          "str",
          "error",
          "isoformat",
          "isoformat",
          "info",
          "_register_default_actions",
          "info",
          "error",
          "register_action",
          "register_action",
          "warning",
          "Action",
          "info",
          "error",
          "initialize",
          "ValueError",
          "execute",
          "append",
          "isoformat",
          "now",
          "to_dict",
          "str",
          "get",
          "to_dict",
          "values",
          "isoformat",
          "now",
          "len",
          "len",
          "len",
          "len",
          "list",
          "values",
          "ActionRegistry",
          "register_action",
          "execute_action",
          "initialize",
          "execute_action",
          "print",
          "execute_action",
          "print",
          "list_actions",
          "print",
          "len",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_logger",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_logger",
          "args": [
            "name"
          ],
          "line_start": 42,
          "line_end": 43,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_get_logger_function",
          "test_file": "test_core.py",
          "line_number": 80,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "setup_logging",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "setup_logging",
          "args": [
            "log_level"
          ],
          "line_start": 45,
          "line_end": 49,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "db_path_or_config"
          ],
          "line_start": 53,
          "line_end": 59,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_queue_stats",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_queue_stats",
          "args": [
            "self"
          ],
          "line_start": 61,
          "line_end": 62,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_task",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_task",
          "args": [
            "self",
            "task_type",
            "payload",
            "priority",
            "agent_id"
          ],
          "line_start": 64,
          "line_end": 65,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_recent_tasks",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_recent_tasks",
          "args": [
            "self",
            "limit"
          ],
          "line_start": 67,
          "line_end": 68,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_tasks",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_tasks",
          "args": [
            "self",
            "status",
            "task_type",
            "agent_id",
            "limit",
            "offset"
          ],
          "line_start": 70,
          "line_end": 71,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "db_path_or_config"
          ],
          "line_start": 53,
          "line_end": 59,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_queue_stats",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_queue_stats",
          "args": [
            "self"
          ],
          "line_start": 61,
          "line_end": 62,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_task",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_task",
          "args": [
            "self",
            "task_type",
            "payload",
            "priority",
            "agent_id"
          ],
          "line_start": 64,
          "line_end": 65,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_recent_tasks",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_recent_tasks",
          "args": [
            "self",
            "limit"
          ],
          "line_start": 67,
          "line_end": 68,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_tasks",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_tasks",
          "args": [
            "self",
            "status",
            "task_type",
            "agent_id",
            "limit",
            "offset"
          ],
          "line_start": 70,
          "line_end": 71,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "db_path_or_config"
          ],
          "line_start": 53,
          "line_end": 59,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_init_databases",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_init_databases",
          "args": [
            "self"
          ],
          "line_start": 253,
          "line_end": 265,
          "docstring": "Initialize database connections."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_start_monitoring_thread",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_start_monitoring_thread",
          "args": [
            "self"
          ],
          "line_start": 267,
          "line_end": 281,
          "docstring": "Start background thread for monitoring agents and projects."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "monitor",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "monitor",
          "args": [],
          "line_start": 269,
          "line_end": 277,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_setup_routes",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_setup_routes",
          "args": [
            "self"
          ],
          "line_start": 283,
          "line_end": 430,
          "docstring": "Setup Flask routes."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "index",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "index",
          "args": [],
          "line_start": 287,
          "line_end": 288,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "static_files",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "static_files",
          "args": [
            "filename"
          ],
          "line_start": 291,
          "line_end": 292,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "health_check",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "health_check",
          "args": [],
          "line_start": 295,
          "line_end": 309,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_tasks",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_tasks",
          "args": [
            "self",
            "status",
            "task_type",
            "agent_id",
            "limit",
            "offset"
          ],
          "line_start": 70,
          "line_end": 71,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_task",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_task",
          "args": [],
          "line_start": 348,
          "line_end": 378,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_table_data",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_table_data",
          "args": [
            "table_name"
          ],
          "line_start": 381,
          "line_end": 403,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "execute_database_query",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "execute_database_query",
          "args": [],
          "line_start": 406,
          "line_end": 430,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_setup_error_handlers",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_setup_error_handlers",
          "args": [
            "self"
          ],
          "line_start": 432,
          "line_end": 440,
          "docstring": "Setup error handlers for the Flask app."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "not_found",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "not_found",
          "args": [
            "error"
          ],
          "line_start": 435,
          "line_end": 436,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_service_not_found",
          "test_file": "test_services.py",
          "line_number": 48,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "internal_error",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "internal_error",
          "args": [
            "error"
          ],
          "line_start": 439,
          "line_end": 440,
          "docstring": ""
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_check_database_health",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_check_database_health",
          "args": [
            "self"
          ],
          "line_start": 442,
          "line_end": 449,
          "docstring": "Check if the database is accessible."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_update_agent_status",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_update_agent_status",
          "args": [
            "self"
          ],
          "line_start": 451,
          "line_end": 452,
          "docstring": "Update agent status information."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_update_project_status",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_update_project_status",
          "args": [
            "self"
          ],
          "line_start": 455,
          "line_end": 456,
          "docstring": "Update project status information."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "run",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "run",
          "args": [
            "self",
            "host",
            "port",
            "debug"
          ],
          "line_start": 459,
          "line_end": 471,
          "docstring": "Run the dashboard application."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_system_agent_summary_returns_string",
          "test_file": "test_system_agent_health_summary.py",
          "line_number": 13,
          "assertions": []
        },
        {
          "test_name": "test_service_lifecycle",
          "test_file": "test_services.py",
          "line_number": 55,
          "assertions": [
            "assert_called_once",
            "assert_called_once"
          ]
        },
        {
          "test_name": "test_database_connection",
          "test_file": "test_services.py",
          "line_number": 190,
          "assertions": []
        },
        {
          "test_name": "test_query_execution",
          "test_file": "test_services.py",
          "line_number": 208,
          "assertions": []
        },
        {
          "test_name": "test_query_error_handling",
          "test_file": "test_services.py",
          "line_number": 243,
          "assertions": []
        },
        {
          "test_name": "test_full_service_lifecycle",
          "test_file": "test_services.py",
          "line_number": 307,
          "assertions": []
        },
        {
          "test_name": "test_data_service_query_performance",
          "test_file": "test_services.py",
          "line_number": 355,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_start_background_tasks",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_start_background_tasks",
          "args": [
            "self"
          ],
          "line_start": 473,
          "line_end": 482,
          "docstring": "Start background monitoring tasks."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_background_monitor",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_background_monitor",
          "args": [
            "self"
          ],
          "line_start": 484,
          "line_end": 493,
          "docstring": "Background monitoring loop."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_cleanup",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_cleanup",
          "args": [
            "self"
          ],
          "line_start": 495,
          "line_end": 497,
          "docstring": "Cleanup resources on shutdown."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "main",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "main",
          "args": [],
          "line_start": 500,
          "line_end": 536,
          "docstring": "Main entry point for the dashboard application."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "find_free_port",
      "file_path": "dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "find_free_port",
          "args": [
            "start_port",
            "host"
          ],
          "line_start": 511,
          "line_end": 520,
          "docstring": "Find an available port."
        },
        "file_complexity": 24,
        "file_imports": [
          "logging",
          "os",
          "socket",
          "sqlite3",
          "sys",
          "threading",
          "time",
          "dataclasses",
          "datetime",
          "pathlib",
          "typing",
          "flask",
          "waitress",
          "werkzeug.exceptions",
          "backend.task_queue_manager",
          "argparse"
        ],
        "file_calls": [
          "getLogger",
          "basicConfig",
          "getattr",
          "upper",
          "isinstance",
          "get",
          "append",
          "dirname",
          "dirname",
          "abspath",
          "isinstance",
          "TraeTaskQueueManager",
          "TraeTaskQueueManager",
          "isinstance",
          "hasattr",
          "get_queue_stats",
          "hasattr",
          "add_task",
          "add_task",
          "hasattr",
          "get_recent_tasks",
          "hasattr",
          "get_tasks",
          "get_tasks",
          "print",
          "print",
          "print",
          "DashboardConfig",
          "Flask",
          "setup_logging",
          "get_logger",
          "TaskQueueManager",
          "info",
          "error",
          "now",
          "_setup_routes",
          "_setup_error_handlers",
          "_init_databases",
          "_start_monitoring_thread",
          "info",
          "Path",
          "exists",
          "warning",
          "connect",
          "execute",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "Thread",
          "start",
          "info",
          "send_from_directory",
          "route",
          "send_from_directory",
          "route",
          "isoformat",
          "now",
          "_check_database_health",
          "jsonify",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get",
          "min",
          "int",
          "get",
          "get_tasks",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "get",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "get_json",
          "BadRequest",
          "BadRequest",
          "add_task",
          "get",
          "get",
          "info",
          "jsonify",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "min",
          "int",
          "get",
          "int",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "isoformat",
          "now",
          "error",
          "jsonify",
          "str",
          "route",
          "get_json",
          "BadRequest",
          "strip",
          "startswith",
          "upper",
          "BadRequest",
          "connect",
          "cursor",
          "execute",
          "fetchall",
          "dict",
          "jsonify",
          "len",
          "isoformat",
          "now",
          "jsonify",
          "str",
          "error",
          "jsonify",
          "str",
          "route",
          "jsonify",
          "errorhandler",
          "jsonify",
          "errorhandler",
          "connect",
          "execute",
          "info",
          "_start_background_tasks",
          "serve",
          "info",
          "error",
          "_cleanup",
          "Thread",
          "start",
          "info",
          "error",
          "_update_agent_status",
          "_update_project_status",
          "sleep",
          "error",
          "sleep",
          "info",
          "ArgumentParser",
          "add_argument",
          "add_argument",
          "add_argument",
          "add_argument",
          "parse_args",
          "range",
          "socket",
          "bind",
          "RuntimeError",
          "find_free_port",
          "DashboardConfig",
          "DashboardApp",
          "run",
          "exit",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__post_init__",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "line_start": 59,
          "line_end": 71,
          "docstring": ""
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 104,
          "line_end": 108,
          "docstring": ""
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "is_allowed",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "is_allowed",
          "args": [
            "self",
            "key",
            "rule"
          ],
          "line_start": 110,
          "line_end": 142,
          "docstring": "Check if request is allowed under rate limit."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_cleanup_old_entries",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_cleanup_old_entries",
          "args": [
            "self"
          ],
          "line_start": 144,
          "line_end": 157,
          "docstring": "Clean up old request entries."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 104,
          "line_end": 108,
          "docstring": ""
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "generate_token",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "generate_token",
          "args": [
            "self",
            "session_id"
          ],
          "line_start": 166,
          "line_end": 182,
          "docstring": "Generate CSRF token for session."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_token_generation",
          "test_file": "test_services.py",
          "line_number": 110,
          "assertions": []
        },
        {
          "test_name": "test_full_service_lifecycle",
          "test_file": "test_services.py",
          "line_number": 307,
          "assertions": []
        },
        {
          "test_name": "test_auth_token_generation_performance",
          "test_file": "test_services.py",
          "line_number": 333,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "validate_token",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "validate_token",
          "args": [
            "self",
            "token",
            "session_id"
          ],
          "line_start": 184,
          "line_end": 194,
          "docstring": "Validate CSRF token."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_invalid_token_validation",
          "test_file": "test_services.py",
          "line_number": 129,
          "assertions": []
        },
        {
          "test_name": "test_token_validation",
          "test_file": "test_services_simple.py",
          "line_number": 124,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "cleanup_expired_tokens",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "cleanup_expired_tokens",
          "args": [
            "self"
          ],
          "line_start": 196,
          "line_end": 201,
          "docstring": "Remove expired tokens."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 104,
          "line_end": 108,
          "docstring": ""
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "log_event",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "log_event",
          "args": [
            "self",
            "event_type",
            "ip_address",
            "user_id",
            "endpoint",
            "details"
          ],
          "line_start": 211,
          "line_end": 235,
          "docstring": "Log a security event."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_check_suspicious_activity",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_check_suspicious_activity",
          "args": [
            "self",
            "ip_address"
          ],
          "line_start": 237,
          "line_end": 251,
          "docstring": "Check for suspicious activity patterns."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "is_suspicious_ip",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "is_suspicious_ip",
          "args": [
            "self",
            "ip_address"
          ],
          "line_start": 253,
          "line_end": 255,
          "docstring": "Check if IP is marked as suspicious."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_security_summary",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_security_summary",
          "args": [
            "self"
          ],
          "line_start": 257,
          "line_end": 274,
          "docstring": "Get security summary statistics."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 104,
          "line_end": 108,
          "docstring": ""
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_token",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_token",
          "args": [
            "self",
            "user_id",
            "username",
            "roles",
            "expiry_hours"
          ],
          "line_start": 282,
          "line_end": 321,
          "docstring": "Create JWT token."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "verify_token",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "verify_token",
          "args": [
            "self",
            "token"
          ],
          "line_start": 323,
          "line_end": 368,
          "docstring": "Verify and decode JWT token."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 104,
          "line_end": 108,
          "docstring": ""
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_get_required_security_level",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_get_required_security_level",
          "args": [
            "self",
            "path"
          ],
          "line_start": 577,
          "line_end": 587,
          "docstring": "Get required security level for path."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_matches_pattern",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_matches_pattern",
          "args": [
            "self",
            "path",
            "pattern"
          ],
          "line_start": 589,
          "line_end": 596,
          "docstring": "Check if path matches pattern (supports wildcards)."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_check_authorization",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_check_authorization",
          "args": [
            "self",
            "auth_token",
            "required_level"
          ],
          "line_start": 598,
          "line_end": 611,
          "docstring": "Check if user has required authorization level."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "create_user_token",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "create_user_token",
          "args": [
            "self",
            "user_id",
            "username",
            "roles"
          ],
          "line_start": 613,
          "line_end": 617,
          "docstring": "Create authentication token for user."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_security_status",
      "file_path": "security_middleware.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_security_status",
          "args": [
            "self"
          ],
          "line_start": 619,
          "line_end": 635,
          "docstring": "Get current security status."
        },
        "file_complexity": 49,
        "file_imports": [
          "asyncio",
          "hashlib",
          "hmac",
          "json",
          "logging",
          "secrets",
          "time",
          "datetime",
          "enum",
          "collections",
          "re",
          "base64",
          "base64"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "time",
          "time",
          "_cleanup_old_entries",
          "len",
          "warning",
          "len",
          "append",
          "time",
          "list",
          "keys",
          "list",
          "keys",
          "encode",
          "str",
          "int",
          "time",
          "hexdigest",
          "new",
          "encode",
          "token_urlsafe",
          "time",
          "time",
          "time",
          "items",
          "set",
          "defaultdict",
          "SecurityEventRecord",
          "now",
          "append",
          "len",
          "append",
          "time",
          "_check_suspicious_activity",
          "info",
          "time",
          "len",
          "add",
          "log_event",
          "len",
          "now",
          "timedelta",
          "defaultdict",
          "len",
          "dict",
          "len",
          "get",
          "get",
          "encode",
          "now",
          "timedelta",
          "token_hex",
          "int",
          "timestamp",
          "int",
          "timestamp",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "encode",
          "dumps",
          "digest",
          "new",
          "encode",
          "rstrip",
          "decode",
          "urlsafe_b64encode",
          "split",
          "len",
          "digest",
          "new",
          "encode",
          "len",
          "urlsafe_b64decode",
          "compare_digest",
          "len",
          "decode",
          "urlsafe_b64decode",
          "loads",
          "get",
          "time",
          "AuthToken",
          "fromtimestamp",
          "fromtimestamp",
          "error",
          "RateLimiter",
          "CSRFProtection",
          "SecurityAuditor",
          "JWTManager",
          "RateLimitRule",
          "RateLimitRule",
          "get",
          "get",
          "get",
          "get",
          "update",
          "get",
          "startswith",
          "append",
          "get",
          "_check_rate_limits",
          "append",
          "log_event",
          "is_suspicious_ip",
          "append",
          "_check_authentication",
          "update",
          "get",
          "_check_csrf_protection",
          "update",
          "get",
          "generate_token",
          "error",
          "append",
          "_matches_pattern",
          "is_allowed",
          "_get_required_security_level",
          "get",
          "get",
          "startswith",
          "log_event",
          "get",
          "verify_token",
          "_check_authorization",
          "get",
          "get",
          "get",
          "validate_token",
          "log_event",
          "get",
          "get",
          "items",
          "_matches_pattern",
          "startswith",
          "replace",
          "bool",
          "match",
          "set",
          "create_token",
          "len",
          "len",
          "len",
          "get_security_summary",
          "cleanup_expired_tokens",
          "SecurityConfig",
          "SecurityMiddleware",
          "process_request",
          "print",
          "dumps",
          "create_user_token",
          "print",
          "process_request",
          "print",
          "dumps",
          "get_security_status",
          "print",
          "dumps",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "retention_hours"
          ],
          "line_start": 83,
          "line_end": 86,
          "docstring": ""
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_point",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_point",
          "args": [
            "self",
            "metric_name",
            "value",
            "tags",
            "timestamp"
          ],
          "line_start": 88,
          "line_end": 109,
          "docstring": "Add a data point to the store"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_points",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_points",
          "args": [
            "self",
            "metric_name",
            "start_time",
            "end_time",
            "tags"
          ],
          "line_start": 111,
          "line_end": 133,
          "docstring": "Retrieve data points with optional filtering"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_metric_names",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_metric_names",
          "args": [
            "self"
          ],
          "line_start": 135,
          "line_end": 137,
          "docstring": "Get all metric names"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_cleanup_old_data",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_cleanup_old_data",
          "args": [
            "self"
          ],
          "line_start": 139,
          "line_end": 150,
          "docstring": "Remove old data points beyond retention period"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "retention_hours"
          ],
          "line_start": 83,
          "line_end": 86,
          "docstring": ""
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "calculate_summary",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "calculate_summary",
          "args": [
            "self",
            "metric_name",
            "start_time",
            "end_time",
            "tags"
          ],
          "line_start": 158,
          "line_end": 193,
          "docstring": "Calculate summary statistics for a metric"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_percentile",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_percentile",
          "args": [
            "self",
            "values",
            "percentile"
          ],
          "line_start": 195,
          "line_end": 202,
          "docstring": "Calculate percentile value"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "detect_anomalies",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "detect_anomalies",
          "args": [
            "self",
            "metric_name",
            "window_minutes",
            "threshold_std"
          ],
          "line_start": 204,
          "line_end": 225,
          "docstring": "Detect anomalies in metric data"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "calculate_trend",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "calculate_trend",
          "args": [
            "self",
            "metric_name",
            "window_minutes"
          ],
          "line_start": 227,
          "line_end": 269,
          "docstring": "Calculate trend information for a metric"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "retention_hours"
          ],
          "line_start": 83,
          "line_end": 86,
          "docstring": ""
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "retention_hours"
          ],
          "line_start": 83,
          "line_end": 86,
          "docstring": ""
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "record_metric",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "record_metric",
          "args": [
            "self",
            "name",
            "value",
            "tags"
          ],
          "line_start": 405,
          "line_end": 408,
          "docstring": "Record a metric value"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "increment_counter",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "increment_counter",
          "args": [
            "self",
            "name",
            "tags"
          ],
          "line_start": 410,
          "line_end": 412,
          "docstring": "Increment a counter metric"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "record_timer",
      "file_path": "analytics.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "record_timer",
          "args": [
            "self",
            "name",
            "duration_ms",
            "tags"
          ],
          "line_start": 414,
          "line_end": 417,
          "docstring": "Record a timer metric"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "enum",
          "statistics",
          "collections",
          "hashlib"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "defaultdict",
          "deque",
          "now",
          "now",
          "DataPoint",
          "append",
          "total_seconds",
          "now",
          "_cleanup_old_data",
          "list",
          "all",
          "get",
          "items",
          "list",
          "keys",
          "now",
          "timedelta",
          "popleft",
          "now",
          "info",
          "get_points",
          "MetricSummary",
          "len",
          "sum",
          "min",
          "max",
          "mean",
          "median",
          "len",
          "stdev",
          "median",
          "_percentile",
          "_percentile",
          "_percentile",
          "now",
          "now",
          "error",
          "sorted",
          "int",
          "len",
          "now",
          "timedelta",
          "get_points",
          "len",
          "mean",
          "len",
          "stdev",
          "abs",
          "append",
          "now",
          "timedelta",
          "get_points",
          "len",
          "len",
          "list",
          "range",
          "sum",
          "sum",
          "sum",
          "zip",
          "sum",
          "min",
          "abs",
          "now",
          "timedelta",
          "hexdigest",
          "md5",
          "encode",
          "calculate_summary",
          "append",
          "_generate_metric_insights",
          "extend",
          "_generate_recommendations",
          "extend",
          "_generate_overall_insights",
          "extend",
          "AnalyticsReport",
          "len",
          "now",
          "len",
          "sum",
          "now",
          "append",
          "append",
          "append",
          "append",
          "append",
          "sum",
          "len",
          "append",
          "len",
          "len",
          "append",
          "MetricStore",
          "AnalyticsProcessor",
          "ReportGenerator",
          "info",
          "create_task",
          "_periodic_cleanup",
          "info",
          "add_point",
          "record_metric",
          "record_metric",
          "now",
          "timedelta",
          "calculate_summary",
          "detect_anomalies",
          "get_metric_names",
          "now",
          "timedelta",
          "generate_report",
          "sleep",
          "_cleanup_old_data",
          "error",
          "AnalyticsEngine",
          "AnalyticsEngine",
          "start",
          "range",
          "record_metric",
          "record_metric",
          "increment_counter",
          "record_timer",
          "sleep",
          "generate_report",
          "print",
          "print",
          "len",
          "print",
          "len",
          "print",
          "len",
          "detect_anomalies",
          "print",
          "len",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "update",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "update",
          "args": [
            "self",
            "execution_time",
            "success"
          ],
          "line_start": 80,
          "line_end": 91,
          "docstring": "Update metrics with new execution data"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "action_id",
            "handler",
            "category",
            "priority",
            "execution_mode",
            "description",
            "tags",
            "timeout",
            "retry_count",
            "retry_delay",
            "metadata"
          ],
          "line_start": 110,
          "line_end": 145,
          "docstring": "Initialize an advanced action"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_dependency",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_dependency",
          "args": [
            "self",
            "action_id"
          ],
          "line_start": 201,
          "line_end": 203,
          "docstring": "Add a dependency to this action"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_dependent",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_dependent",
          "args": [
            "self",
            "action_id"
          ],
          "line_start": 205,
          "line_end": 207,
          "docstring": "Add a dependent action"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "set_schedule",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "set_schedule",
          "args": [
            "self",
            "interval",
            "cron_expression",
            "max_runs"
          ],
          "line_start": 209,
          "line_end": 219,
          "docstring": "Set scheduling for the action"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "to_dict",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "line_start": 221,
          "line_end": 244,
          "docstring": "Convert action to dictionary"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "action_id",
            "handler",
            "category",
            "priority",
            "execution_mode",
            "description",
            "tags",
            "timeout",
            "retry_count",
            "retry_delay",
            "metadata"
          ],
          "line_start": 110,
          "line_end": 145,
          "docstring": "Initialize an advanced action"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_system_status",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_system_status",
          "args": [
            "self"
          ],
          "line_start": 493,
          "line_end": 506,
          "docstring": "Get comprehensive system status"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_get_actions_by_category",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_get_actions_by_category",
          "args": [
            "self"
          ],
          "line_start": 508,
          "line_end": 514,
          "docstring": "Get action count by category"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_get_actions_by_priority",
      "file_path": "actions_maxout.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_get_actions_by_priority",
          "args": [
            "self"
          ],
          "line_start": 516,
          "line_end": 522,
          "docstring": "Get action count by priority"
        },
        "file_complexity": 34,
        "file_imports": [
          "logging",
          "asyncio",
          "datetime",
          "enum",
          "json",
          "uuid",
          "concurrent.futures",
          "time",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "set",
          "now",
          "ActionMetrics",
          "ActionSchedule",
          "set",
          "set",
          "RuntimeError",
          "time",
          "range",
          "wait_for",
          "_execute_handler",
          "_execute_handler",
          "warning",
          "sleep",
          "str",
          "error",
          "time",
          "update",
          "iscoroutinefunction",
          "handler",
          "get_event_loop",
          "ThreadPoolExecutor",
          "run_in_executor",
          "handler",
          "add",
          "add",
          "now",
          "list",
          "isoformat",
          "isoformat",
          "list",
          "list",
          "set",
          "info",
          "create_task",
          "_scheduler_loop",
          "create_task",
          "_batch_processor_loop",
          "create_task",
          "_metrics_collector_loop",
          "info",
          "error",
          "warning",
          "AdvancedAction",
          "info",
          "error",
          "initialize",
          "ValueError",
          "_check_dependencies",
          "RuntimeError",
          "_queue_for_batch",
          "_schedule_action",
          "_execute_immediate",
          "len",
          "sleep",
          "add",
          "execute",
          "max",
          "len",
          "_execute_dependents",
          "discard",
          "get",
          "_check_dependencies",
          "create_task",
          "_execute_immediate",
          "str",
          "uuid4",
          "append",
          "now",
          "ValueError",
          "now",
          "values",
          "create_task",
          "_execute_immediate",
          "sleep",
          "error",
          "sleep",
          "min",
          "len",
          "create_task",
          "_execute_immediate",
          "append",
          "gather",
          "sleep",
          "error",
          "sleep",
          "len",
          "sleep",
          "error",
          "sleep",
          "len",
          "len",
          "len",
          "_get_actions_by_category",
          "_get_actions_by_priority",
          "values",
          "get",
          "values",
          "get",
          "ActionMaxoutSystem",
          "initialize",
          "register_action",
          "execute_action",
          "print",
          "get_system_status",
          "print",
          "dumps",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 127,
          "line_end": 132,
          "docstring": ""
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 127,
          "line_end": 132,
          "docstring": ""
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_setup_default_dashboards",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_setup_default_dashboards",
          "args": [
            "self"
          ],
          "line_start": 395,
          "line_end": 487,
          "docstring": "Setup default dashboard configurations."
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_calculate_overall_health",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_calculate_overall_health",
          "args": [
            "self",
            "health_checks"
          ],
          "line_start": 677,
          "line_end": 689,
          "docstring": "Calculate overall system health from individual checks."
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_calculate_performance_score",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_calculate_performance_score",
          "args": [
            "self",
            "metrics"
          ],
          "line_start": 722,
          "line_end": 733,
          "docstring": "Calculate performance score from metrics."
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_calculate_reliability_score",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_calculate_reliability_score",
          "args": [
            "self",
            "metrics"
          ],
          "line_start": 735,
          "line_end": 746,
          "docstring": "Calculate reliability score from metrics."
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_calculate_security_score",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_calculate_security_score",
          "args": [
            "self",
            "metrics"
          ],
          "line_start": 748,
          "line_end": 761,
          "docstring": "Calculate security score from metrics."
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_available_dashboards",
      "file_path": "quality_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_available_dashboards",
          "args": [
            "self"
          ],
          "line_start": 775,
          "line_end": 784,
          "docstring": "Get list of available dashboards."
        },
        "file_complexity": 51,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "datetime",
          "dataclasses",
          "enum",
          "collections",
          "statistics",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing",
          "typing"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "extend",
          "QualityMetric",
          "QualityMetric",
          "QualityMetric",
          "error",
          "now",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "now",
          "sleep",
          "total_seconds",
          "now",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "append",
          "HealthCheck",
          "error",
          "append",
          "HealthCheck",
          "str",
          "int",
          "timestamp",
          "Alert",
          "append",
          "Alert",
          "append",
          "collect_performance_metrics",
          "collect_security_metrics",
          "extend",
          "len",
          "perform_health_checks",
          "extend",
          "len",
          "check_alerts",
          "extend",
          "len",
          "debug",
          "len",
          "len",
          "len",
          "error",
          "create_task",
          "_collection_loop",
          "info",
          "cancel",
          "info",
          "collect_all_metrics",
          "sleep",
          "error",
          "sleep",
          "QualityDataCollector",
          "_setup_default_dashboards",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardWidget",
          "DashboardConfig",
          "ValueError",
          "asdict",
          "isoformat",
          "now",
          "_get_widget_data",
          "_get_health_check_data",
          "_get_performance_metrics_data",
          "_get_alerts_data",
          "_get_latest_metrics_data",
          "_get_gauge_data",
          "_get_resource_metrics_data",
          "now",
          "timedelta",
          "asdict",
          "values",
          "_calculate_overall_health",
          "list",
          "values",
          "len",
          "get",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "len",
          "get",
          "get",
          "sorted",
          "asdict",
          "len",
          "len",
          "reversed",
          "values",
          "append",
          "isoformat",
          "get",
          "reversed",
          "get",
          "get",
          "get",
          "len",
          "len",
          "isoformat",
          "get",
          "defaultdict",
          "append",
          "isoformat",
          "dict",
          "get",
          "any",
          "any",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "now",
          "timedelta",
          "defaultdict",
          "append",
          "_calculate_performance_score",
          "get",
          "_calculate_reliability_score",
          "get",
          "_calculate_security_score",
          "get",
          "round",
          "round",
          "round",
          "round",
          "len",
          "len",
          "_calculate_overall_health",
          "len",
          "isoformat",
          "now",
          "min",
          "max",
          "lower",
          "mean",
          "max",
          "lower",
          "lower",
          "max",
          "start_collection",
          "info",
          "stop_collection",
          "info",
          "items",
          "QualityDashboard",
          "start",
          "sleep",
          "get_quality_summary",
          "print",
          "dumps",
          "get_dashboard_data",
          "print",
          "dumps",
          "get_available_dashboards",
          "print",
          "dumps",
          "stop",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "system_smoke_test_agent.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "config"
          ],
          "line_start": 62,
          "line_end": 67,
          "docstring": ""
        },
        "file_complexity": 14,
        "file_imports": [
          "asyncio",
          "logging",
          "time",
          "datetime",
          "dataclasses",
          "enum",
          "aiohttp",
          "psutil",
          "sqlite3",
          "os"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "info",
          "run_smoke_tests",
          "info",
          "info",
          "info",
          "info",
          "clear",
          "test",
          "append",
          "error",
          "append",
          "SmokeTestResult",
          "str",
          "now",
          "now",
          "time",
          "cpu_percent",
          "virtual_memory",
          "disk_usage",
          "append",
          "append",
          "append",
          "join",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "ClientTimeout",
          "ClientSession",
          "get",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "open",
          "write",
          "open",
          "read",
          "remove",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "ClientTimeout",
          "ClientSession",
          "get",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "isoformat",
          "len",
          "len",
          "len",
          "len",
          "isoformat",
          "SystemSmokeTestAgent",
          "SystemSmokeTestAgent",
          "start",
          "run_smoke_tests",
          "print",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_status",
      "file_path": "system_smoke_test_agent.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_status",
          "args": [
            "self"
          ],
          "line_start": 326,
          "line_end": 335,
          "docstring": "Get agent status"
        },
        "file_complexity": 14,
        "file_imports": [
          "asyncio",
          "logging",
          "time",
          "datetime",
          "dataclasses",
          "enum",
          "aiohttp",
          "psutil",
          "sqlite3",
          "os"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "info",
          "run_smoke_tests",
          "info",
          "info",
          "info",
          "info",
          "clear",
          "test",
          "append",
          "error",
          "append",
          "SmokeTestResult",
          "str",
          "now",
          "now",
          "time",
          "cpu_percent",
          "virtual_memory",
          "disk_usage",
          "append",
          "append",
          "append",
          "join",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "ClientTimeout",
          "ClientSession",
          "get",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "open",
          "write",
          "open",
          "read",
          "remove",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "ClientTimeout",
          "ClientSession",
          "get",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "isoformat",
          "len",
          "len",
          "len",
          "len",
          "isoformat",
          "SystemSmokeTestAgent",
          "SystemSmokeTestAgent",
          "start",
          "run_smoke_tests",
          "print",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_test_results",
      "file_path": "system_smoke_test_agent.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_test_results",
          "args": [
            "self"
          ],
          "line_start": 337,
          "line_end": 349,
          "docstring": "Get test results as dictionaries"
        },
        "file_complexity": 14,
        "file_imports": [
          "asyncio",
          "logging",
          "time",
          "datetime",
          "dataclasses",
          "enum",
          "aiohttp",
          "psutil",
          "sqlite3",
          "os"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "info",
          "run_smoke_tests",
          "info",
          "info",
          "info",
          "info",
          "clear",
          "test",
          "append",
          "error",
          "append",
          "SmokeTestResult",
          "str",
          "now",
          "now",
          "time",
          "cpu_percent",
          "virtual_memory",
          "disk_usage",
          "append",
          "append",
          "append",
          "join",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "get",
          "connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "ClientTimeout",
          "ClientSession",
          "get",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "open",
          "write",
          "open",
          "read",
          "remove",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "time",
          "ClientTimeout",
          "ClientSession",
          "get",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "time",
          "now",
          "SmokeTestResult",
          "str",
          "time",
          "now",
          "isoformat",
          "len",
          "len",
          "len",
          "len",
          "isoformat",
          "SystemSmokeTestAgent",
          "SystemSmokeTestAgent",
          "start",
          "run_smoke_tests",
          "print",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "ai_integrated_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 56,
          "line_end": 59,
          "docstring": ""
        },
        "file_complexity": 21,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "dataclasses",
          "enum",
          "numpy"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "info",
          "now",
          "ModelMetrics",
          "random",
          "random",
          "random",
          "random",
          "now",
          "int",
          "random",
          "error",
          "error",
          "timestamp",
          "now",
          "random",
          "random",
          "random",
          "choice",
          "random",
          "random",
          "random",
          "random",
          "random",
          "random",
          "now",
          "randint",
          "error",
          "_generate_performance_insight",
          "append",
          "_generate_trend_insight",
          "append",
          "_generate_anomaly_insight",
          "append",
          "extend",
          "error",
          "sum",
          "values",
          "len",
          "AIInsight",
          "timestamp",
          "now",
          "random",
          "now",
          "error",
          "len",
          "len",
          "AIInsight",
          "timestamp",
          "now",
          "random",
          "now",
          "error",
          "random",
          "AIInsight",
          "timestamp",
          "now",
          "now",
          "error",
          "AIModelManager",
          "InsightGenerator",
          "info",
          "load_model",
          "warning",
          "info",
          "error",
          "info",
          "_update_dashboard",
          "sleep",
          "error",
          "sleep",
          "info",
          "_collect_system_data",
          "generate_insights",
          "update",
          "now",
          "asdict",
          "items",
          "asdict",
          "items",
          "info",
          "len",
          "error",
          "random",
          "random",
          "random",
          "random",
          "random",
          "range",
          "randint",
          "randint",
          "randint",
          "random",
          "random",
          "random",
          "copy",
          "sorted",
          "asdict",
          "predict",
          "list",
          "keys",
          "asdict",
          "items",
          "len",
          "now",
          "AIIntegratedDashboard",
          "initialize",
          "info",
          "create_task",
          "start_monitoring",
          "sleep",
          "stop_monitoring",
          "cancel",
          "get_dashboard_data",
          "get_insights",
          "get_model_performance",
          "print",
          "len",
          "get",
          "print",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "ai_integrated_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 56,
          "line_end": 59,
          "docstring": ""
        },
        "file_complexity": 21,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "dataclasses",
          "enum",
          "numpy"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "info",
          "now",
          "ModelMetrics",
          "random",
          "random",
          "random",
          "random",
          "now",
          "int",
          "random",
          "error",
          "error",
          "timestamp",
          "now",
          "random",
          "random",
          "random",
          "choice",
          "random",
          "random",
          "random",
          "random",
          "random",
          "random",
          "now",
          "randint",
          "error",
          "_generate_performance_insight",
          "append",
          "_generate_trend_insight",
          "append",
          "_generate_anomaly_insight",
          "append",
          "extend",
          "error",
          "sum",
          "values",
          "len",
          "AIInsight",
          "timestamp",
          "now",
          "random",
          "now",
          "error",
          "len",
          "len",
          "AIInsight",
          "timestamp",
          "now",
          "random",
          "now",
          "error",
          "random",
          "AIInsight",
          "timestamp",
          "now",
          "now",
          "error",
          "AIModelManager",
          "InsightGenerator",
          "info",
          "load_model",
          "warning",
          "info",
          "error",
          "info",
          "_update_dashboard",
          "sleep",
          "error",
          "sleep",
          "info",
          "_collect_system_data",
          "generate_insights",
          "update",
          "now",
          "asdict",
          "items",
          "asdict",
          "items",
          "info",
          "len",
          "error",
          "random",
          "random",
          "random",
          "random",
          "random",
          "range",
          "randint",
          "randint",
          "randint",
          "random",
          "random",
          "random",
          "copy",
          "sorted",
          "asdict",
          "predict",
          "list",
          "keys",
          "asdict",
          "items",
          "len",
          "now",
          "AIIntegratedDashboard",
          "initialize",
          "info",
          "create_task",
          "start_monitoring",
          "sleep",
          "stop_monitoring",
          "cancel",
          "get_dashboard_data",
          "get_insights",
          "get_model_performance",
          "print",
          "len",
          "get",
          "print",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "ai_integrated_dashboard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self"
          ],
          "line_start": 56,
          "line_end": 59,
          "docstring": ""
        },
        "file_complexity": 21,
        "file_imports": [
          "asyncio",
          "logging",
          "datetime",
          "typing",
          "dataclasses",
          "enum",
          "numpy"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "info",
          "now",
          "ModelMetrics",
          "random",
          "random",
          "random",
          "random",
          "now",
          "int",
          "random",
          "error",
          "error",
          "timestamp",
          "now",
          "random",
          "random",
          "random",
          "choice",
          "random",
          "random",
          "random",
          "random",
          "random",
          "random",
          "now",
          "randint",
          "error",
          "_generate_performance_insight",
          "append",
          "_generate_trend_insight",
          "append",
          "_generate_anomaly_insight",
          "append",
          "extend",
          "error",
          "sum",
          "values",
          "len",
          "AIInsight",
          "timestamp",
          "now",
          "random",
          "now",
          "error",
          "len",
          "len",
          "AIInsight",
          "timestamp",
          "now",
          "random",
          "now",
          "error",
          "random",
          "AIInsight",
          "timestamp",
          "now",
          "now",
          "error",
          "AIModelManager",
          "InsightGenerator",
          "info",
          "load_model",
          "warning",
          "info",
          "error",
          "info",
          "_update_dashboard",
          "sleep",
          "error",
          "sleep",
          "info",
          "_collect_system_data",
          "generate_insights",
          "update",
          "now",
          "asdict",
          "items",
          "asdict",
          "items",
          "info",
          "len",
          "error",
          "random",
          "random",
          "random",
          "random",
          "random",
          "range",
          "randint",
          "randint",
          "randint",
          "random",
          "random",
          "random",
          "copy",
          "sorted",
          "asdict",
          "predict",
          "list",
          "keys",
          "asdict",
          "items",
          "len",
          "now",
          "AIIntegratedDashboard",
          "initialize",
          "info",
          "create_task",
          "start_monitoring",
          "sleep",
          "stop_monitoring",
          "cancel",
          "get_dashboard_data",
          "get_insights",
          "get_model_performance",
          "print",
          "len",
          "get",
          "print",
          "error",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "connection_id",
            "websocket",
            "user_id"
          ],
          "line_start": 63,
          "line_end": 72,
          "docstring": ""
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_info",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_info",
          "args": [
            "self"
          ],
          "line_start": 106,
          "line_end": 116,
          "docstring": "Get connection information"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "connection_id",
            "websocket",
            "user_id"
          ],
          "line_start": 63,
          "line_end": 72,
          "docstring": ""
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "add_message_handler",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "add_message_handler",
          "args": [
            "self",
            "message_type",
            "handler"
          ],
          "line_start": 271,
          "line_end": 275,
          "docstring": "Add a message handler for a specific message type"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_connection_count",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_connection_count",
          "args": [
            "self"
          ],
          "line_start": 376,
          "line_end": 378,
          "docstring": "Get the total number of active connections"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_user_connection_count",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_user_connection_count",
          "args": [
            "self",
            "user_id"
          ],
          "line_start": 380,
          "line_end": 382,
          "docstring": "Get the number of connections for a specific user"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_topic_subscriber_count",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_topic_subscriber_count",
          "args": [
            "self",
            "topic"
          ],
          "line_start": 384,
          "line_end": 386,
          "docstring": "Get the number of subscribers for a specific topic"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_status",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_status",
          "args": [
            "self"
          ],
          "line_start": 388,
          "line_end": 396,
          "docstring": "Get WebSocket manager status"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_connections_info",
      "file_path": "websocket_manager.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_connections_info",
          "args": [
            "self"
          ],
          "line_start": 398,
          "line_end": 403,
          "docstring": "Get information about all connections"
        },
        "file_complexity": 35,
        "file_imports": [
          "asyncio",
          "json",
          "logging",
          "uuid",
          "typing",
          "dataclasses",
          "enum"
        ],
        "file_calls": [
          "basicConfig",
          "getLogger",
          "str",
          "uuid4",
          "now",
          "now",
          "set",
          "isoformat",
          "send",
          "dumps",
          "now",
          "error",
          "send",
          "dumps",
          "now",
          "error",
          "ConnectionInfo",
          "info",
          "create_task",
          "_heartbeat_loop",
          "info",
          "cancel",
          "disconnect_all",
          "str",
          "uuid4",
          "WebSocketConnection",
          "set",
          "add",
          "info",
          "discard",
          "list",
          "unsubscribe",
          "info",
          "warning",
          "send_message",
          "warning",
          "list",
          "send_to_connection",
          "set",
          "list",
          "keys",
          "send_to_connection",
          "add",
          "set",
          "add",
          "info",
          "discard",
          "discard",
          "info",
          "list",
          "send_to_connection",
          "append",
          "loads",
          "now",
          "WebSocketMessage",
          "get",
          "str",
          "uuid4",
          "MessageType",
          "get",
          "get",
          "fromisoformat",
          "get",
          "isoformat",
          "now",
          "get",
          "get",
          "_handle_ping",
          "handler",
          "error",
          "error",
          "WebSocketMessage",
          "str",
          "uuid4",
          "str",
          "now",
          "send_to_connection",
          "WebSocketMessage",
          "str",
          "uuid4",
          "now",
          "send_to_connection",
          "sleep",
          "WebSocketMessage",
          "str",
          "uuid4",
          "isoformat",
          "now",
          "now",
          "now",
          "items",
          "total_seconds",
          "append",
          "send_message",
          "info",
          "remove_connection",
          "error",
          "list",
          "keys",
          "remove_connection",
          "len",
          "len",
          "get",
          "set",
          "len",
          "get",
          "set",
          "get_connection_count",
          "len",
          "len",
          "asdict",
          "get_info",
          "values",
          "WebSocketManager",
          "WebSocketManager",
          "start",
          "print",
          "print",
          "get_status",
          "sleep",
          "stop",
          "print",
          "run",
          "main"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "middleware/log_headers.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "app"
          ],
          "line_start": 4,
          "line_end": 5,
          "docstring": ""
        },
        "file_complexity": 3,
        "file_imports": [
          "starlette.requests"
        ],
        "file_calls": [
          "app",
          "Request",
          "decode",
          "decode",
          "get",
          "print",
          "getattr",
          "send",
          "app"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_connect",
      "file_path": "routes/automation.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_connect",
          "args": [],
          "line_start": 18,
          "line_end": 21,
          "docstring": ""
        },
        "file_complexity": 4,
        "file_imports": [
          "fastapi",
          "pydantic",
          "os",
          "sqlite3",
          "typing"
        ],
        "file_calls": [
          "get",
          "join",
          "getcwd",
          "makedirs",
          "dirname",
          "APIRouter",
          "connect",
          "_connect",
          "cursor",
          "execute",
          "commit",
          "close",
          "_init",
          "_connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "dict",
          "get",
          "_connect",
          "cursor",
          "execute",
          "getattr",
          "execute",
          "commit",
          "close",
          "post"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_database_connection",
          "test_file": "test_services.py",
          "line_number": 190,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_init",
      "file_path": "routes/automation.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_init",
          "args": [],
          "line_start": 23,
          "line_end": 37,
          "docstring": ""
        },
        "file_complexity": 4,
        "file_imports": [
          "fastapi",
          "pydantic",
          "os",
          "sqlite3",
          "typing"
        ],
        "file_calls": [
          "get",
          "join",
          "getcwd",
          "makedirs",
          "dirname",
          "APIRouter",
          "connect",
          "_connect",
          "cursor",
          "execute",
          "commit",
          "close",
          "_init",
          "_connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "dict",
          "get",
          "_connect",
          "cursor",
          "execute",
          "getattr",
          "execute",
          "commit",
          "close",
          "post"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [
        {
          "test_name": "test_registry_initialization",
          "test_file": "test_services.py",
          "line_number": 27,
          "assertions": []
        },
        {
          "test_name": "test_auth_service_initialization",
          "test_file": "test_services.py",
          "line_number": 87,
          "assertions": []
        },
        {
          "test_name": "test_data_service_initialization",
          "test_file": "test_services.py",
          "line_number": 185,
          "assertions": []
        }
      ],
      "validation_issues": [],
      "has_tests": true,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "get_toggles",
      "file_path": "routes/automation.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "get_toggles",
          "args": [
            "channel_id"
          ],
          "line_start": 42,
          "line_end": 50,
          "docstring": ""
        },
        "file_complexity": 4,
        "file_imports": [
          "fastapi",
          "pydantic",
          "os",
          "sqlite3",
          "typing"
        ],
        "file_calls": [
          "get",
          "join",
          "getcwd",
          "makedirs",
          "dirname",
          "APIRouter",
          "connect",
          "_connect",
          "cursor",
          "execute",
          "commit",
          "close",
          "_init",
          "_connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "dict",
          "get",
          "_connect",
          "cursor",
          "execute",
          "getattr",
          "execute",
          "commit",
          "close",
          "post"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "set_toggles",
      "file_path": "routes/automation.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "set_toggles",
          "args": [
            "data"
          ],
          "line_start": 53,
          "line_end": 63,
          "docstring": ""
        },
        "file_complexity": 4,
        "file_imports": [
          "fastapi",
          "pydantic",
          "os",
          "sqlite3",
          "typing"
        ],
        "file_calls": [
          "get",
          "join",
          "getcwd",
          "makedirs",
          "dirname",
          "APIRouter",
          "connect",
          "_connect",
          "cursor",
          "execute",
          "commit",
          "close",
          "_init",
          "_connect",
          "cursor",
          "execute",
          "fetchone",
          "close",
          "dict",
          "get",
          "_connect",
          "cursor",
          "execute",
          "getattr",
          "execute",
          "commit",
          "close",
          "post"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "_jitter",
      "file_path": "routes/webhuman.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "_jitter",
          "args": [
            "a",
            "b"
          ],
          "line_start": 21,
          "line_end": 23,
          "docstring": ""
        },
        "file_complexity": 6,
        "file_imports": [
          "fastapi",
          "pydantic",
          "random",
          "playwright.async_api",
          "random"
        ],
        "file_calls": [
          "APIRouter",
          "Field",
          "Field",
          "Field",
          "Field",
          "Field",
          "Field",
          "uniform",
          "wait_for_timeout",
          "int",
          "_jitter",
          "randint",
          "range",
          "wheel",
          "randint",
          "wait_for_timeout",
          "int",
          "_jitter",
          "locator",
          "count",
          "nth",
          "click",
          "str",
          "randint",
          "type",
          "int",
          "_jitter",
          "wait_for_timeout",
          "int",
          "_jitter",
          "async_playwright",
          "launch",
          "new_context",
          "new_page",
          "goto",
          "_humanize_page",
          "close",
          "post"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "__init__",
      "file_path": "services/ctr_guard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "__init__",
          "args": [
            "self",
            "min_delta"
          ],
          "line_start": 9,
          "line_end": 10,
          "docstring": ""
        },
        "file_complexity": 2,
        "file_imports": [
          "dataclasses"
        ],
        "file_calls": [
          "CTRDecision",
          "CTRDecision"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    },
    {
      "function_name": "decide",
      "file_path": "services/ctr_guard.py",
      "new_implementation": {
        "found": true,
        "function": {
          "name": "decide",
          "args": [
            "self",
            "historical_ctr",
            "candidate_ctr_pred"
          ],
          "line_start": 12,
          "line_end": 15,
          "docstring": ""
        },
        "file_complexity": 2,
        "file_imports": [
          "dataclasses"
        ],
        "file_calls": [
          "CTRDecision",
          "CTRDecision"
        ]
      },
      "quarantined_implementation": {
        "found": false,
        "function": null,
        "file_complexity": 0,
        "file_imports": [],
        "file_calls": []
      },
      "test_cases": [],
      "validation_issues": [
        "No test cases found for this function"
      ],
      "has_tests": false,
      "has_new_impl": true,
      "has_quarantined_impl": false
    }
  ]
}
