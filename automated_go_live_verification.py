#!/usr / bin / env python3
"""
Automated Go - Live Verification Script
Demonstrates 100% automated production deployment readiness
"""

import json
import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path

import requests


class GoLiveVerification:


    def __init__(self):
        self.checks_passed = 0
        self.total_checks = 0
        self.results = []


    def log_check(self, name, status, details=""):
        """Log a verification check result"""
        self.total_checks += 1
        if status:
            self.checks_passed += 1
            icon = "‚úÖ"
        else:
            icon = "‚ùå"

        result = f"{icon} {name}"
        if details:
            result += f" - {details}"

        print(result)
        self.results.append((name, status, details))
        return status


    def verify_automation_pipeline(self):
        """Verify CI / CD automation is ready"""
        print("\nü§ñ AUTOMATION PIPELINE VERIFICATION")
        print("=" * 50)

        # Check GitHub Actions workflows
        workflows_dir = Path(".github / workflows")
        required_workflows = {
            "ci - cd.yml": "Main CI / CD Pipeline",
                "security.yml": "Security Scanning",
                "prod - health - watch.yml": "Production Monitoring",
                "deploy.yml": "Deployment Automation",
                }

        for workflow_file, description in required_workflows.items():
            workflow_path = workflows_dir / workflow_file
            if workflow_path.exists():
                # Check if workflow has production deployment
                try:
                    with open(workflow_path, "r") as f:
                        content = f.read()
                        has_prod_deploy = (
                            "production" in content and "workflow_dispatch" in content
                        )
                        self.log_check(
                            f"Workflow: {description}",
                                has_prod_deploy,
                                (
                                "Production deployment configured"
                                if has_prod_deploy
                                else "Missing production config"
                            ),
                                )
                except Exception:
                    self.log_check(
                        f"Workflow: {description}", False, "Failed to read workflow"
                    )
            else:
                self.log_check(
                    f"Workflow: {description}", False, "Workflow file missing"
                )


    def verify_live_testing_capability(self):
        """Verify system can be live tested"""
        print("\nüß™ LIVE TESTING CAPABILITY")
        print("=" * 50)

        # Test main API endpoints
        api_endpoints = [
            ("http://localhost:8000 / health", "Health Check API"),
                ("http://localhost:8000 / api / version", "Version API"),
                ("http://localhost:8081", "Paste Application"),
                ]

        for url, name in api_endpoints:
            try:
                response = requests.get(url, timeout = 5)
                self.log_check(
                    f"Live Test: {name}",
                        response.status_code == 200,
                        f"Status: {response.status_code}",
                        )
            except Exception as e:
                self.log_check(f"Live Test: {name}", False, f"Error: {str(e)[:50]}")


    def verify_security_compliance(self):
        """Verify security measures are in place"""
        print("\nüîí SECURITY COMPLIANCE")
        print("=" * 50)

        # Check .env files are gitignored
        gitignore_path = Path(".gitignore")
        if gitignore_path.exists():
            with open(gitignore_path, "r") as f:
                gitignore_content = f.read()
                env_protected = ".env" in gitignore_content
                self.log_check(
                    "Environment Secrets Protection",
                        env_protected,
                        (
                        "Secrets properly excluded from Git"
                        if env_protected
                        else "Secrets not protected"
                    ),
                        )
        else:
            self.log_check(
                "Environment Secrets Protection", False, ".gitignore missing"
            )

        # Check .env.example exists as template
        env_example = Path(".env.example")
        self.log_check(
            "Environment Template",
                env_example.exists(),
                (
                "Configuration template available"
                if env_example.exists()
                else "Template missing"
            ),
                )

        # Check security tools are configured
        requirements_path = Path("requirements.txt")
        if requirements_path.exists():
            with open(requirements_path, "r") as f:
                requirements = f.read()
                security_tools = ["bandit", "safety"]
                for tool in security_tools:
                    tool_configured = tool in requirements
                    self.log_check(
                        f"Security Tool: {tool}",
                            tool_configured,
                            "Configured" if tool_configured else "Missing",
                            )


    def verify_deployment_readiness(self):
        """Verify deployment configuration"""
        print("\nüöÄ DEPLOYMENT READINESS")
        print("=" * 50)

        # Check Netlify configuration
        netlify_config = Path("netlify.toml")
        self.log_check(
            "Netlify Configuration",
                netlify_config.exists(),
                "Deployment config ready" if netlify_config.exists() else "Config missing",
                )

        # Check production startup script
        production_scripts = ["start_production.py", "launch_live.py"]
        for script in production_scripts:
            script_path = Path(script)
            if script_path.exists():
                self.log_check(
                    f"Production Script: {script}", True, "Ready for deployment"
                )
                break
        else:
            self.log_check(
                "Production Scripts", False, "No production startup script found"
            )

        # Check requirements.txt
        requirements_path = Path("requirements.txt")
        self.log_check(
            "Dependencies Configuration",
                requirements_path.exists(),
                (
                "Dependencies defined"
                if requirements_path.exists()
                else "Requirements missing"
            ),
                )


    def demonstrate_go_live_process(self):
        """Demonstrate the automated go - live process"""
        print("\nüéØ AUTOMATED GO - LIVE PROCESS DEMONSTRATION")
        print("=" * 50)

        print("\nüìã Go - Live Steps:")
        print("1. ‚úÖ Code committed to main branch")
        print("2. ‚úÖ GitHub Actions CI / CD pipeline triggers automatically")
        print("3. ‚úÖ Security scans (Bandit, Safety, CodeQL) execute")
        print("4. ‚úÖ Automated tests run and pass")
        print("5. ‚úÖ Build process creates deployment artifacts")
        print("6. ‚úÖ Netlify deployment with production environment variables")
        print("7. ‚úÖ Health checks verify live deployment")
        print("8. ‚úÖ Production monitoring begins")

        print("\nüîÑ Trigger Methods:")
        print("‚Ä¢ Manual: GitHub Actions workflow_dispatch")
        print("‚Ä¢ Automatic: Push to main branch")
        print("‚Ä¢ API: GitHub REST API deployment trigger")

        print("\nüõ°Ô∏è Safety Features:")
        print("‚Ä¢ Staging environment for pre - production testing")
        print("‚Ä¢ Atomic deployments with instant rollback capability")
        print("‚Ä¢ Automated health monitoring and alerting")
        print("‚Ä¢ Zero - downtime deployment process")


    def generate_go_live_report(self):
        """Generate final go - live readiness report"""
        print("\nüìä FINAL GO - LIVE READINESS REPORT")
        print("=" * 50)

        success_rate = (
            (self.checks_passed / self.total_checks) * 100
            if self.total_checks > 0
            else 0
        )

        print(f"Timestamp: {datetime.now().isoformat()}")
        print(f"Total Checks: {self.total_checks}")
        print(f"Passed: {self.checks_passed}")
        print(f"Failed: {self.total_checks - self.checks_passed}")
        print(f"Success Rate: {success_rate:.1f}%")

        if success_rate >= 90:
            print("\nüéâ SYSTEM IS READY FOR 100% AUTOMATED GO - LIVE!")
            print("\nüöÄ DEPLOYMENT AUTHORIZATION: APPROVED")
            print("\n‚ú® Next Steps:")
            print("   1. Navigate to GitHub Actions")
            print("   2. Select 'CI / CD Pipeline' workflow")
            print("   3. Click 'Run workflow'")
            print("   4. Select 'production' environment")
            print("   5. Click 'Run workflow' to deploy")
            print("\nüåê Your application will be live within minutes!")
            return True
        else:
            print("\n‚ö†Ô∏è  SYSTEM REQUIRES ATTENTION BEFORE GO - LIVE")
            print(
                f"\n‚ùå {self.total_checks - self.checks_passed} issues need resolution"
            )
            print("\nüîß Failed Checks:")
            for name, status, details in self.results:
                if not status:
                    print(f"   ‚Ä¢ {name}: {details}")
            return False


def main():
    """Run complete go - live verification"""
    print("üöÄ AUTOMATED GO - LIVE VERIFICATION")
    print("=" * 50)
    print("Verifying 100% automated, live - testable production readiness...")

    verifier = GoLiveVerification()

    # Run all verification checks
    verifier.verify_automation_pipeline()
    verifier.verify_live_testing_capability()
    verifier.verify_security_compliance()
    verifier.verify_deployment_readiness()
    verifier.demonstrate_go_live_process()

    # Generate final report
    ready_for_golive = verifier.generate_go_live_report()

    return 0 if ready_for_golive else 1

if __name__ == "__main__":
    sys.exit(main())
