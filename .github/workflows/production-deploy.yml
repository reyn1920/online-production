name: 🚀 Production Deployment Pipeline

# Trigger Configuration
# - Manual deployment via workflow_dispatch for controlled releases
# - Automatic staging deployment on pull requests
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test suite (emergency only)'
        required: false
        default: false
        type: boolean

  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

# Security: Restrict permissions to minimum required
permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

# Environment Variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

jobs:
  # =============================================================================
  # PHASE 1: CONTINUOUS INTEGRATION (CI)
  # =============================================================================

  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Security Tools
        run: |
          pip install bandit safety semgrep
          npm install -g @gitguardian/ggshield

      - name: Run Secret Scanning
        run: |
          echo "🔍 Scanning for hardcoded secrets..."
          if [ -f "scripts/security_scanner.py" ]; then
            python scripts/security_scanner.py --strict --format json > security-report.json
          else
            echo "Custom security scanner not found, using grep fallback"
            ! grep -r "password.*=.*[\"'][^\"']*[\"']" . --include="*.py" --exclude-dir=".git" | grep -v "os.getenv"
          fi

      - name: Run Bandit Security Linter
        run: |
          echo "🛡️ Running Bandit security analysis..."
          bandit -r . -f json -o bandit-report.json || true

      - name: Check Dependencies for Vulnerabilities
        run: |
          echo "📦 Checking dependencies for known vulnerabilities..."
          if [ -f "requirements.txt" ]; then
            safety check -r requirements.txt --json --output safety-report.json || true
          fi
          if [ -f "package.json" ]; then
            npm audit --audit-level=high --json > npm-audit.json || true
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            security-report.json
            bandit-report.json
            safety-report.json
            npm-audit.json
          retention-days: 30

  code-quality:
    name: 📋 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          fi
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

      - name: Run Linting
        run: |
          echo "🧹 Running code linting..."
          if [ -f "package.json" ] && npm list eslint &>/dev/null; then
            npm run lint || echo "ESLint not configured"
          fi
          if command -v flake8 &> /dev/null; then
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          fi

      - name: Run Code Formatting Check
        run: |
          echo "🎨 Checking code formatting..."
          if [ -f "package.json" ] && npm list prettier &>/dev/null; then
            npm run format:check || echo "Prettier not configured"
          fi
          if command -v black &> /dev/null; then
            black --check . || echo "Black formatting issues found"
          fi

  automated-tests:
    name: 🧪 Automated Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          fi
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

      - name: Run Unit Tests
        run: |
          echo "🔬 Running unit tests..."
          if [ -f "package.json" ] && npm list jest &>/dev/null; then
            npm test
          elif [ -f "pytest.ini" ] || [ -f "pyproject.toml" ]; then
            pytest --cov=. --cov-report=xml
          else
            echo "No test framework detected"
          fi

      - name: Run Integration Tests
        run: |
          echo "🔗 Running integration tests..."
          if [ -f "tests/integration" ]; then
            pytest tests/integration/ -v
          else
            echo "No integration tests found"
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            test-results.xml
          retention-days: 30

  # =============================================================================
  # PHASE 2: BUILD & PACKAGE
  # =============================================================================

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci
          fi

      - name: Build Application
        env:
          NODE_ENV: production
          # Inject production environment variables
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_APP_NAME: ${{ secrets.VITE_APP_NAME }}
        run: |
          echo "🔨 Building application for production..."
          if [ -f "package.json" ] && npm run build &>/dev/null; then
            npm run build
          elif [ -f "vite.config.js" ] || [ -f "vite.config.ts" ]; then
            npx vite build
          else
            echo "No build script found"
            mkdir -p dist
            cp -r . dist/ 2>/dev/null || true
          fi

      - name: Optimize Build
        run: |
          echo "⚡ Optimizing build artifacts..."
          if [ -d "dist" ]; then
            # Remove source maps in production (security)
            find dist -name "*.map" -delete
            # Compress assets
            find dist -name "*.js" -o -name "*.css" | head -10 | xargs gzip -k
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            build/
          retention-days: 7

  # =============================================================================
  # PHASE 3: CONTINUOUS DEPLOYMENT (CD)
  # =============================================================================

  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, automated-tests]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.deploy-url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ./

      - name: Deploy to Netlify (Staging)
        id: deploy
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🚀 Staging Deploy - PR #${{ github.event.number }} - ${{ github.event.head.sha }}"
          alias: pr-${{ github.event.number }}
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
        timeout-minutes: 10

      - name: Run Staging Health Check
        run: |
          echo "🏥 Running staging health check..."
          STAGING_URL="${{ steps.deploy.outputs.deploy-url }}"

          # Wait for deployment to be ready
          sleep 30

          # Basic health check
          if curl -f -s "$STAGING_URL" > /dev/null; then
            echo "✅ Staging deployment is healthy"
          else
            echo "❌ Staging deployment failed health check"
            exit 1
          fi

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, automated-tests]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deploy-url }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: ./

      - name: Pre-Production Security Check
        run: |
          echo "🔒 Running final security validation..."

          # Verify no secrets in build artifacts
          if find dist -type f -name "*.js" -o -name "*.html" | xargs grep -l "sk-" 2>/dev/null; then
            echo "❌ Potential API keys found in build artifacts!"
            exit 1
          fi

          # Verify environment variables are properly injected
          if [ -z "$NETLIFY_AUTH_TOKEN" ]; then
            echo "❌ Missing required environment variables!"
            exit 1
          fi

          echo "✅ Security validation passed"

      - name: Deploy to Netlify (Production)
        id: deploy
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './dist'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🌟 Production Deploy - ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 15

      - name: Run Production Health Check
        run: |
          echo "🏥 Running production health check..."
          PROD_URL="${{ steps.deploy.outputs.deploy-url }}"

          # Wait for deployment to propagate
          sleep 60

          # Comprehensive health check
          if curl -f -s "$PROD_URL" > /dev/null; then
            echo "✅ Production deployment is healthy"

            # Check critical endpoints
            if curl -f -s "$PROD_URL/health" > /dev/null 2>&1; then
              echo "✅ Health endpoint responding"
            fi

            # Performance check
            RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$PROD_URL")
            echo "⚡ Response time: ${RESPONSE_TIME}s"

            if (( $(echo "$RESPONSE_TIME < 3.0" | bc -l) )); then
              echo "✅ Performance check passed"
            else
              echo "⚠️ Slow response time detected"
            fi
          else
            echo "❌ Production deployment failed health check"
            exit 1
          fi

      - name: Post-Deployment Notification
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌐 Live URL: ${{ steps.deploy.outputs.deploy-url }}"
          echo "📊 Deployment ID: ${{ steps.deploy.outputs.deploy-id }}"
          echo "⏰ Deployed at: $(date -u)"

  # =============================================================================
  # PHASE 4: POST-DEPLOYMENT MONITORING
  # =============================================================================

  post-deployment-tests:
    name: 🔍 Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'production'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run E2E Tests
        run: |
          echo "🎭 Running end-to-end tests against production..."

          # Install Playwright if available
          if [ -f "package.json" ] && npm list playwright &>/dev/null; then
            npx playwright install
            npm run test:e2e
          else
            echo "No E2E tests configured"
          fi

      - name: Performance Audit
        run: |
          echo "⚡ Running performance audit..."

          # Install Lighthouse CI if available
          if command -v lhci &> /dev/null; then
            lhci autorun
          else
            echo "Lighthouse CI not configured"
          fi

      - name: Security Headers Check
        run: |
          echo "🛡️ Checking security headers..."
          PROD_URL="${{ needs.deploy-production.outputs.deploy-url }}"

          # Check for essential security headers
          HEADERS=$(curl -I -s "$PROD_URL")

          if echo "$HEADERS" | grep -i "x-frame-options" > /dev/null; then
            echo "✅ X-Frame-Options header present"
          else
            echo "⚠️ Missing X-Frame-Options header"
          fi

          if echo "$HEADERS" | grep -i "x-content-type-options" > /dev/null; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "⚠️ Missing X-Content-Type-Options header"
          fi

# =============================================================================
# WORKFLOW SUMMARY
# =============================================================================
#
# This workflow implements a comprehensive CI/CD pipeline following the
# three core principles: Automation, Security, and Reliability.
#
# 🔄 Automation: Fully automated build, test, and deployment process
# 🔒 Security: Multi-layer security scanning and validation
# 🛡️ Reliability: Health checks, rollback capability, and monitoring
#
# Deployment Triggers:
# - Manual production deployment via workflow_dispatch
# - Automatic staging deployment on pull requests
#
# Security Features:
# - Secret scanning and vulnerability assessment
# - Dependency security checks
# - Pre-deployment security validation
# - Post-deployment security header verification
#
# Quality Gates:
# - Code linting and formatting
# - Automated test suite
# - Build optimization
# - Performance monitoring
#
# =============================================================================
