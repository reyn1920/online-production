name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black ruff mypy pytest

      - name: Code formatting check
        run: black --check .

      - name: Lint with ruff
        run: ruff check .

      - name: Type check with mypy
        run: mypy app/ --ignore-missing-imports

      - name: Run unit tests
        run: pytest tests/ -v

      - name: Import smoke test
        run: |
          python -c "from app.dashboard import DashboardApp; print('✓ Dashboard imports OK')"
          python -c "from app.metrics import get_metrics_blueprint; print('✓ Metrics imports OK')"

      - name: API smoke test
        run: |
          python -c "
          import os, time, requests, threading
          from app.dashboard import DashboardApp

          def run_server():
              app = DashboardApp()
              app.socketio.run(app.app, host='127.0.0.1', port=8083, allow_unsafe_werkzeug=True)

          # Start server in background
          server_thread = threading.Thread(target=run_server, daemon=True)
          server_thread.start()
          time.sleep(3)  # Wait for server to start

          # Test endpoints
          resp = requests.get('http://127.0.0.1:8083/api/version')
          assert resp.status_code == 200, f'Version endpoint failed: {resp.status_code}'

          resp = requests.get('http://127.0.0.1:8083/api/metrics')
          assert resp.status_code == 200, f'Metrics endpoint failed: {resp.status_code}'

          print('✓ API smoke tests passed')
          "

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Secret scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
