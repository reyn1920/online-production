name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  # Phase 1: Continuous Integration (CI)
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black ruff mypy pytest bandit safety

      - name: Code formatting check
        run: black --check .

      - name: Lint with ruff
        run: ruff check .

      - name: Type check with mypy
        run: mypy src/ --ignore-missing-imports

      - name: Security scan - Bandit
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Dependency vulnerability scan
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ matrix.python-version }}
          path: |
            bandit-report.json
            safety-report.json

  test:
    name: Automated Testing
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        run: pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Import smoke test
        run: |
          python -c "from src.services.registry import ServiceRegistry; print('✓ Services import OK')"
          python -c "from src.core.config import Config; print('✓ Core imports OK')"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/

  # Phase 2: Continuous Deployment (CD)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Netlify CLI
      run: npm install -g netlify-cli

    - name: Build application
      run: |
        # Set staging environment variables
        export VITE_API_URL=${{ secrets.STAGING_API_URL }}
        export VITE_APP_ENV=staging
        if [ -f package.json ]; then
          npm install
          npm run build
        else
          echo "No package.json found, skipping npm build"
        fi

    - name: Deploy to Netlify (Staging)
      if: env.NETLIFY_AUTH_TOKEN != ''
      run: |
        netlify deploy \
          --dir=dist \
          --site=${{ secrets.NETLIFY_SITE_ID }} \
          --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} \
          --message="Staging deployment from ${{ github.sha }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Netlify CLI
      run: npm install -g netlify-cli

    - name: Build application
      run: |
        # Set production environment variables
        export VITE_API_URL=${{ secrets.PRODUCTION_API_URL }}
        export VITE_APP_ENV=production
        if [ -f package.json ]; then
          npm install
          npm run build
        else
          echo "No package.json found, skipping npm build"
        fi

    - name: Deploy to Netlify (Production)
      if: env.NETLIFY_AUTH_TOKEN != ''
      run: |
        netlify deploy \
          --prod \
          --dir=dist \
          --site=${{ secrets.NETLIFY_SITE_ID }} \
          --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} \
          --message="Production deployment from ${{ github.sha }}"
          from app.dashboard import DashboardApp

          def run_server():
              app = DashboardApp()
              app.socketio.run(app.app, host='127.0.0.1', port=8083, allow_unsafe_werkzeug=True)

          # Start server in background
          server_thread = threading.Thread(target=run_server, daemon=True)
          server_thread.start()
          time.sleep(3)  # Wait for server to start

          # Test endpoints
          resp = requests.get('http://127.0.0.1:8083/api/version')
          assert resp.status_code == 200, f'Version endpoint failed: {resp.status_code}'

          resp = requests.get('http://127.0.0.1:8083/api/metrics')
          assert resp.status_code == 200, f'Metrics endpoint failed: {resp.status_code}'

          print('✓ API smoke tests passed')
          "

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Secret scan with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
