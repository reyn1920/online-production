# TRAE.AI System Dependencies
# Production-ready Python package requirements
# 
# This file contains all necessary dependencies for the TRAE.AI foundational utilities:
# - SecretStore with encryption (cryptography)
# - Centralized logging with rotation
# - Rule1 content scanning and enforcement
# - Database operations (SQLite)
# - CLI interfaces and utilities
#
# Install with: pip install -r requirements.txt
# For development: pip install -r requirements.txt -r requirements-dev.txt
#
# Author: TRAE.AI System
# Version: 1.0.0

# ============================================================================
# CORE CRYPTOGRAPHY AND SECURITY
# ============================================================================

# Cryptography library for SecretStore encryption/decryption
# Provides Fernet (AES) encryption and PBKDF2 key derivation
cryptography>=41.0.0,<42.0.0

# Secure random number generation and hashing
secrets>=1.0.0  # Built-in Python module (no version constraint needed)
hashlib>=1.0.0  # Built-in Python module (no version constraint needed)

# ============================================================================
# DATABASE AND DATA PERSISTENCE
# ============================================================================

# SQLite is built into Python, but we may need additional utilities
# SQLite database browser and management tools (optional)
sqlite-utils>=3.34.0,<4.0.0

# Database migration and schema management
alembic>=1.12.0,<2.0.0

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Enhanced logging capabilities (built-in logging is sufficient for basic needs)
# But we'll include some useful logging extensions
coloredlogs>=15.0.1,<16.0.0
structlog>=23.1.0,<24.0.0

# Performance monitoring and profiling
psutil>=5.9.0,<6.0.0

# ============================================================================
# WEB FRAMEWORK AND API
# ============================================================================

# Flask web framework for dashboard and API endpoints
Flask>=2.3.0,<3.0.0
Flask-CORS>=4.0.0,<5.0.0
Flask-Login>=0.6.0,<1.0.0
Flask-Session>=0.5.0,<1.0.0

# Request handling and HTTP utilities
requests>=2.31.0,<3.0.0
urllib3>=2.0.0,<3.0.0

# JSON Web Tokens for authentication
PyJWT>=2.8.0,<3.0.0

# ============================================================================
# DATA PROCESSING AND VALIDATION
# ============================================================================

# Data validation and serialization
pydantic>=2.3.0,<3.0.0
marshmallow>=3.20.0,<4.0.0

# Date and time handling
python-dateutil>=2.8.0,<3.0.0
pytz>=2023.3

# Regular expressions (built-in re module is sufficient)
# But we'll include regex for advanced features
regex>=2023.8.8,<2024.0.0

# ============================================================================
# NATURAL LANGUAGE PROCESSING
# ============================================================================

# NLTK for Rule1 content analysis
nltk>=3.8.1,<4.0.0

# Text processing utilities
textblob>=0.17.1,<1.0.0

# Language detection
langdetect>=1.0.9,<2.0.0

# ============================================================================
# FILE HANDLING AND UTILITIES
# ============================================================================

# File type detection
python-magic>=0.4.27,<1.0.0

# Archive handling
zipfile>=1.0.0  # Built-in module
tarfile>=1.0.0  # Built-in module

# Path manipulation (pathlib is built-in)
# But we'll include pathlib2 for compatibility
pathlib2>=2.3.7,<3.0.0

# ============================================================================
# COMMAND LINE INTERFACE
# ============================================================================

# CLI framework
click>=8.1.0,<9.0.0

# Rich text and formatting for CLI
rich>=13.5.0,<14.0.0

# Progress bars and status indicators
tqdm>=4.66.0,<5.0.0

# ============================================================================
# CONFIGURATION MANAGEMENT
# ============================================================================

# YAML configuration files
PyYAML>=6.0.1,<7.0.0

# TOML configuration files
toml>=0.10.2,<1.0.0

# INI file handling (configparser is built-in)
# But we'll include configobj for advanced features
configobj>=5.0.8,<6.0.0

# ============================================================================
# ASYNC AND CONCURRENCY
# ============================================================================

# Async HTTP client
aiohttp>=3.8.0,<4.0.0

# Async utilities
asyncio>=3.4.3  # Built-in module

# Thread pool utilities
concurrent.futures>=3.1.1  # Built-in module

# ============================================================================
# IMAGE AND MEDIA PROCESSING
# ============================================================================

# Image processing
Pillow>=10.0.0,<11.0.0

# Computer vision (optional, for advanced content analysis)
opencv-python>=4.8.0,<5.0.0

# ============================================================================
# SCIENTIFIC COMPUTING (OPTIONAL)
# ============================================================================

# NumPy for numerical operations
numpy>=1.24.0,<2.0.0

# Pandas for data analysis (optional)
pandas>=2.0.0,<3.0.0

# ============================================================================
# NETWORKING AND PROTOCOLS
# ============================================================================

# WebSocket support
websockets>=11.0.0,<12.0.0

# SSH client (for remote operations)
paramiko>=3.3.0,<4.0.0

# FTP client
ftplib>=1.0.0  # Built-in module

# ============================================================================
# CACHING AND PERFORMANCE
# ============================================================================

# In-memory caching
cachetools>=5.3.0,<6.0.0

# Redis client (optional)
redis>=4.6.0,<5.0.0

# ============================================================================
# SERIALIZATION AND DATA FORMATS
# ============================================================================

# JSON handling (json is built-in)
# But we'll include ujson for performance
ujson>=5.8.0,<6.0.0

# Pickle utilities (pickle is built-in)
# But we'll include dill for advanced serialization
dill>=0.3.7,<1.0.0

# MessagePack serialization
msgpack>=1.0.5,<2.0.0

# Protocol Buffers
protobuf>=4.24.0,<5.0.0

# ============================================================================
# SCHEMA AND VALIDATION
# ============================================================================

# JSON Schema validation
jsonschema>=4.19.0,<5.0.0

# ============================================================================
# TESTING AND QUALITY ASSURANCE
# ============================================================================

# Testing framework
pytest>=7.4.0,<8.0.0
pytest-cov>=4.1.0,<5.0.0
pytest-mock>=3.11.0,<4.0.0
pytest-asyncio>=0.21.0,<1.0.0

# Code quality and linting
flake8>=6.0.0,<7.0.0
black>=23.7.0,<24.0.0
isort>=5.12.0,<6.0.0
mypy>=1.5.0,<2.0.0

# Security scanning
bandit>=1.7.5,<2.0.0
safety>=2.3.0,<3.0.0

# ============================================================================
# DEVELOPMENT AND DEBUGGING
# ============================================================================

# Interactive debugging
ipdb>=0.13.13,<1.0.0

# Code formatting and style
autopep8>=2.0.4,<3.0.0

# Documentation generation
sphinx>=7.1.0,<8.0.0
sphinx-rtd-theme>=1.3.0,<2.0.0

# ============================================================================
# PERFORMANCE AND OPTIMIZATION
# ============================================================================

# Memory profiling
memory-profiler>=0.61.0,<1.0.0

# Performance timing
line-profiler>=4.1.0,<5.0.0

# ============================================================================
# SYSTEM INTEGRATION
# ============================================================================

# Environment variable management
python-dotenv>=1.0.0,<2.0.0

# Configuration management
configparser>=5.3.0,<6.0.0  # Built-in module

# System information
platform>=1.0.8  # Built-in module

# Process management
subprocess>=3.5.4  # Built-in module

# ============================================================================
# EXTERNAL SERVICE INTEGRATIONS
# ============================================================================

# Email handling
email-validator>=2.0.0,<3.0.0

# Phone number validation
phonumbers>=8.13.0,<9.0.0

# URL validation and parsing
validators>=0.22.0,<1.0.0

# ============================================================================
# MACHINE LEARNING (OPTIONAL)
# ============================================================================

# Scikit-learn for ML models (optional)
scikit-learn>=1.3.0,<2.0.0

# TensorFlow (optional, for advanced AI features)
# tensorflow>=2.13.0,<3.0.0

# PyTorch (optional, alternative to TensorFlow)
# torch>=2.0.0,<3.0.0

# ============================================================================
# COMPATIBILITY AND UTILITIES
# ============================================================================

# Python 2/3 compatibility (if needed)
six>=1.16.0,<2.0.0

# Backports for older Python versions
backports.zoneinfo>=0.2.1,<1.0.0; python_version<"3.9"

# Type hints backport
typing-extensions>=4.7.0,<5.0.0

# ============================================================================
# VERSION CONSTRAINTS AND NOTES
# ============================================================================

# Python version requirement: >=3.8
# Some packages may require Python 3.9+ for full functionality

# Pin critical dependencies to avoid breaking changes
# Use semantic versioning constraints (>=major.minor.patch,<next_major.0.0)
# This allows patch and minor updates while preventing breaking changes

# ============================================================================
# INSTALLATION NOTES
# ============================================================================

# To install all dependencies:
# pip install -r requirements.txt
#
# To install with development dependencies:
# pip install -r requirements.txt -r requirements-dev.txt
#
# To create a virtual environment:
# python -m venv venv
# source venv/bin/activate  # On Windows: venv\Scripts\activate
# pip install -r requirements.txt
#
# To update dependencies:
# pip install --upgrade -r requirements.txt
#
# To check for security vulnerabilities:
# pip install safety
# safety check -r requirements.txt
#
# To generate a lock file with exact versions:
# pip freeze > requirements-lock.txt

# ============================================================================
# PRODUCTION DEPLOYMENT NOTES
# ============================================================================

# For production deployment, consider:
# 1. Using pip-tools to generate requirements-lock.txt with exact versions
# 2. Installing only production dependencies (exclude dev/test packages)
# 3. Using Docker for consistent deployment environments
# 4. Setting up automated dependency updates with security scanning
# 5. Monitoring dependency licenses for compliance

# Production-only installation (excluding dev dependencies):
# pip install cryptography click rich requests pydantic python-dotenv

# Minimal core installation for SecretStore only:
# pip install cryptography

# Minimal core installation for logging only:
# pip install coloredlogs structlog

# Minimal core installation for Rule1 scanner only:
# pip install regex nltk